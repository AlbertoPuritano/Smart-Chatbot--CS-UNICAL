{"version":3,"sources":["webpack://org_turbocommons/webpack/bootstrap","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/utils/StringUtils.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/utils/ArrayUtils.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/utils/NumericUtils.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/utils/ObjectUtils.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/managers/ValidationManager.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/model/HashMapObject.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/managers/httpmanager/HTTPManagerBaseRequest.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/model/JavaPropertiesObject.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/managers/httpmanager/HTTPManagerGetRequest.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/utils/EncodingUtils.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/model/TableObject.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/index.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/managers/BrowserManager.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/managers/HTTPManager.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/managers/httpmanager/HTTPManagerPostRequest.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/managers/LocalizationManager.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/managers/ModelHistoryManager.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/managers/SerializationManager.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/model/BaseStrictClass.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/model/CSVObject.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/model/DateTimeObject.js","webpack://org_turbocommons/./target/turbocommons-ts-3.7.0/dist/es5/tmp/utils/ConversionUtils.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","NumericUtils_1","ArrayUtils_1","StringUtils","isString","String","forceString","valueName","errorMessage","Error","isUrl","res","isEmpty","length","RegExp","test","string","emptyChars","replace","concat","forceNonEmptyString","isCamelCase","isSnakeCase","search","replacement","count","ArrayUtils","isArray","NumericUtils","isInteger","result","searchArray","replacementArray","valueToReplace","resultArray","splittedArray","split","j","push","join","trim","characters","trimLeft","trimRight","pad","padLength","padString","substr","countStringOccurences","findMe","countByCase","letterCase","FORMAT_ALL_UPPER_CASE","removeAccents","FORMAT_ALL_LOWER_CASE","countWords","wordSeparator","lines","getLines","words","countPathElements","path","formatPath","indexOf","limitLen","limit","limiterString","isNumeric","substring","getDomainFromUrl","url","hostName","getHostNameFromUrl","shift","tmp","document","createElement","href","dotsCount","host","match","filters","replacedFilters","getKeyWords","getPath","elementsToRemove","separator","elements","arrayToRemove","getPathElement","position","getPathElementWithoutExt","extensionSeparator","element","lastIndexOf","getPathExtension","getSchemeFromUrl","undefined","formatCase","format","FORMAT_START_CASE","map","toUpperCase","toLowerCase","FORMAT_FIRST_UPPER_REST_LOWER","charAt","slice","stringWords","FORMAT_UPPER_CAMEL_CASE","FORMAT_LOWER_CAMEL_CASE","formatUrl","urlSeparator","this","formatForFullTextSearch","compareByLevenshtein","string1","string2","length1","length2","currentRow","prevRow","c1","c2","insertions","deletions","substitutions","Math","min","compareSimilarityPercent","levenshtein","max","generateRandom","minLength","maxLength","charSet","finalCharSet","_i","charSet_1","chars","firstChar","thirdChar","generateRandomInteger","floor","random","findMostSimilarString","findMostSimilarStringIndex","removeNewLineCharacters","defaultDiacriticsRemovalMap","diacriticsMap","letters","b","a","removeWordsShorterThan","removeWordsLongerThan","removeUrls","removeHtmlCode","removeSameConsecutive","FORMAT_SENTENCE_CASE","FORMAT_CAMEL_CASE","FORMAT_SNAKE_CASE","FORMAT_UPPER_SNAKE_CASE","FORMAT_LOWER_SNAKE_CASE","ObjectUtils_1","StringUtils_1","ValidationManager_1","toString","isEqualTo","array1","array2","ObjectUtils","isObject","isStringFound","array","str","caseSensitive","forceNonEmptyArray","removeElement","removeDuplicateElements","numElements","validationManager","ValidationManager","found","resultCount","hasDuplicateElements","getDuplicateElements","isNaN","parseFloat","isFinite","getNumeric","Number","getKeys","keys","object1","object2","keys1","sort","keys2","keys_1","merge","destination","source","sourceKeys_1","clone","constructor","_validationStatus","tag","status","OK","_failedMessages","getStatus","tags","maxStatus","tagsList","_a","status_1","ok","notOk","getFirstMessage","message","getLastMessage","isTrue","isWarning","_updateValidationStatus","isBoolean","isNumericBetween","isFilledIn","isDate","isMail","value2","isMinimumWords","isNIF","isMinimumLength","isMaximumLength","isPostalCode","isPhone","isHtmlFormValid","reset","tagsList_1","tagFound","_b","_c","tagsList_2","ERROR","WARNING","HashMapObject","data","_keys","_data","_length","set","dataCount","getAt","index","getValues","isKey","remove","_validateKeyFormat","rename","newKey","swap","key1","key2","key1Value","key2Value","key1Index","key2Index","sortByKey","method","order","SORT_METHOD_STRING","SORT_ORDER_ASCENDING","SORT_ORDER_DESCENDING","reverse","SORT_METHOD_NUMERIC","pop","HTTPManagerBaseRequest","resultFormat","timeout","STRING","ignoreGlobalPostParams","successCallback","errorCallback","finallyCallback","JSON","extendStatics","__extends","setPrototypeOf","__proto__","Array","__","HashMapObject_1","EncodingUtils_1","JavaPropertiesObject","_super","_this","isWaitingOtherLine","lines_1","line","EncodingUtils","unicodeEscapedCharsToUtf8","tmpLine","keyDividerIndex","isJavaProperties","e","properties","strictOrder","objectToCompare","thisKeys","keysToCompare","thisKeys_1","keysCount","utf8ToUnicodeEscapedChars","HTTPManagerGetRequest","apply","arguments","parameters","_match","grp","fromCharCode","parseInt","ch","charCodeAt","TableObject","rows","columns","_columnsCount","_rowsCount","setColumnNames","_columnNames","_cells","setColumnName","column","columnIndex","_validateColumnIndex","names","namesCount","getColumnNames","getColumnName","getColumnIndex","getColumn","getCell","addColumns","number","at","rowAndCol","colIndex","setColumn","setCell","removeColumn","row","_validateRowIndex","rowIndex","getRow","addRows","setRow","removeRow","countRows","countColumns","countCells","columnNames","columnNamesKeys","columnNamesCount","BrowserManager_1","BrowserManager","HTTPManager_1","HTTPManager","HTTPManagerBaseRequest_1","HTTPManagerGetRequest_1","HTTPManagerPostRequest_1","HTTPManagerPostRequest","LocalizationManager_1","LocalizationManager","ModelHistoryManager_1","ModelHistoryManager","SerializationManager_1","SerializationManager","BaseStrictClass_1","BaseStrictClass","CSVObject_1","CSVObject","DateTimeObject_1","DateTimeObject","JavaPropertiesObject_1","TableObject_1","ConversionUtils_1","ConversionUtils","getCurrentUrl","window","location","isDocumentLoaded","readyState","isCookie","getCookie","setCookie","expires","domain","secure","days","Date","setDate","getDate","encodeURIComponent","toUTCString","cookie","cookies","pluses","parts","part","decodeURIComponent","deleteCookie","reload","getPreferredLanguage","language","navigator","goToUrl","newWindow","postData","open","form","action","style","display","target","props","getOwnPropertyNames","input","type","appendChild","body","submit","removeChild","disableBackButton","history","pushState","URL","addEventListener","_onPopStatePreventBackButton","enableBackButton","removeEventListener","disableScroll","enableScroll","getScrollPosition","pageXOffset","pageYOffset","getWindowWidth","innerWidth","documentElement","clientWidth","getElementsByTagName","getWindowHeight","innerHeight","clientHeight","getDocumentWidth","scrollWidth","offsetWidth","getDocumentHeight","scrollHeight","offsetHeight","scrollTo","duration","callback","easingFunction","startX","startY","startTime","performance","now","getTime","documentWidth","documentHeight","windowWidth","windowHeight","destinationValueX","offsetLeft","destinationValueY","offsetTop","destinationX","destinationY","round","scroll","animate","time","x","ceil","y","requestAnimationFrame","asynchronous","baseUrl","isOnlyHttps","internetCheckLocations","_queues","_globalPostParams","setGlobalPostParam","parameterName","isGlobalPostParam","getGlobalPostParam","deleteGlobalPostParam","createQueue","isRunning","pendingRequests","countQueues","isQueueRunning","queue","deleteQueue","splice","generateUrlQueryString","keyValuePairs","values","stringify","isInternetAvailable","yesCallback","noCallback","recursiveUrlTest","urls","urlExists","onLine","composedUrl","_composeUrl","request","execute","getUrlHeaders","xmlHttprequest","XMLHttpRequest","onload","getAllResponseHeaders","onerror","statusText","ontimeout","ERROR_TIMEOUT","_executeXmlHttprequestSend","requests","finishedCallback","progressCallback","requestsList","_generateValidRequestsList","Function","finishedCount","finishedAnyError","finishedResults","processFinishedRequest","requestWithIndex","response","isError","errorMsg","code","formattedResponse","parse","_loop_1","this_1","requestType","responseText","postParamsToSend","globalPostParam","setRequestHeader","send","requestItem","queueName","unshift","dummyRequest","_startQueue","runRequests","loadResourcesFromList","urlToListOfResources","results","_anyError","resourcesFullUrls","resourcesList","resourcesList_1","resource","resultsData","results_1","relativeUrl","missingKeyFormat","wildCardsFormat","isBundleMandatory","_initialized","_locales","_languages","_activeBundle","_activeLocation","_definedLocations","_loadedTranslations","_filesManager","_httpManager","isInitialized","isLocaleLoaded","locale","isLanguageLoaded","initialize","locationsLoader","locales","locations","locations_1","location_1","label","bundles","_loadData","errors","loadLocales","loadBundles","pathsToLoad","pathsToLoadInfo","locations_2","location_2","bundle","locales_1","locationFound","_d","_e","definedLocation","_loadDataFromUrls","processWhenDone","errorCode","location_3","bundleFormat","parseJson","parseProperties","completedUrl","totalRequests","languages","activeBundle","primaryLocale","primaryLanguage","setActiveBundle","location_4","setPrimaryLocale","setPrimaryLocales","setPrimaryLanguage","setPrimaryLanguages","setLocalesOrder","locales_2","toReplace","replacements","getStartCase","getAllUpperCase","getAllLowerCase","getFirstUpperRestLower","jsonString","propertiesString","javaPropertiesObject","instance","maxSnapshots","_snapshots","_currentState","_initialState","setInitialState","configurable","snapshot","state","getSnapshotsByTag","saveSnapshot","firstSnapshot","undo","tagsFilter","latestSnapshot","undoAll","isUndoPossible","redo","strictMode","classToJson","classInstance","classToObject","javaPropertiesObjectToString","javaProperties","jsonToClass","objectToClass","objectKeys","classInstanceName","classInstanceKeys","objectKeys_1","typeErrorMessage","defaultElement","isDefaultElementAClass","value_1","stringToJavaPropertiesObject","headers","delimiter","enclosure","_hasHeaders","currentColumn","enclosureFound","fieldValue","stringLen","character","_insertField","_findNextDelimiterIndex","_defineHeaders","isCSV","csv","thisRows","thisColumns","thisCell","cellToCompare","columnValue","_escapeField","rowsCount","columnsCount","cell","field","currentIndex","char","duplicateColumnNames","columnNames_1","columnName","duplicateColumnNames_1","dateTimeString","_dateTimeString","_dateTimeStringExploded","_explodeISO8601String","toISOString","isValidDateTime","dateTime","parsedDate","testDate","getMonth","getFullYear","isEqual","dateTime1","dateTime2","compare","getMonthName","month","getDayName","day","getCurrentYear","getCurrentMonth","getCurrentDay","getCurrentDayOfWeek","getCurrentHour","getHours","getCurrentMinute","getMinutes","getCurrentSecond","getSeconds","getCurrentMiliSecond","getMilliseconds","getCurrentMicroSecond","getCurrentTimeZoneOffset","getTimezoneOffset","setUTC","date1","date2","sortedDates","getYear","getDay","getDayOfWeek","getHour","getMinute","getSecond","getMiliSecond","getMicroSecond","getTimeZoneOffset","getFirstDayOfMonth","getLastDayOfMonth","setLocalTimeZone","isUTC","formatString","exploded","compareTo","splitted","splittedCount","stringToBase64","chr1","chr2","chr3","enc1","enc2","enc3","enc4","keyStr","output","utftext","utf8Encode","base64ToString","c3","utf8Decode"],"mappings":"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EAAK,KACN,CACC,EAAK,IACL,EAAK,+CACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,KACL,EAAK,MACN,CACC,EAAK,KACL,EAAK,MACN,CACC,EAAK,IACL,EAAK,cACN,CACC,EAAK,IACL,EAAK,UACN,CACC,EAAK,IACL,EAAK,qBACN,CACC,EAAK,IACL,EAAK,qBACN,CACC,EAAK,IACL,EAAK,mBACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,IACL,EAAK,sCACN,CACC,EAAK,IACL,EAAK,YACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,IACL,EAAK,cACN,CACC,EAAK,IACL,EAAK,SACN,CACC,EAAK,IACL,EAAK,mBACN,CACC,EAAK,IACL,EAAK,kBACN,CACC,EAAK,IACL,EAAK,uCACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,KACL,EAAK,OACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,KACL,EAAK,MACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,IACL,EAAK,aACN,CACC,EAAK,IACL,EAAK,iBACN,CACC,EAAK,IACL,EAAK,kBACN,CACC,EAAK,KACL,EAAK,MACN,CACC,EAAK,IACL,EAAK,mCACN,CACC,EAAK,IACL,EAAK,UACN,CACC,EAAK,IACL,EAAK,mBACN,CACC,EAAK,IACL,EAAK,mBACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,IACL,EAAK,wBACN,CACC,EAAK,IACL,EAAK,UACN,CACC,EAAK,IACL,EAAK,kBACN,CACC,EAAK,IACL,EAAK,uBACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,IACL,EAAK,YACN,CACC,EAAK,IACL,EAAK,qBACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,IACL,EAAK,+CACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,KACL,EAAK,KACN,CACC,EAAK,KACL,EAAK,KA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","file":"turbocommons-es5.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 11);\n","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar NumericUtils_1 = require(\"./NumericUtils\");\r\nvar ArrayUtils_1 = require(\"./ArrayUtils\");\r\n/**\r\n * The most common string processing and modification utilities\r\n */\r\nvar StringUtils = /** @class */ (function () {\r\n    function StringUtils() {\r\n    }\r\n    /**\r\n     * Tells if the given value is a string or not\r\n     *\r\n     * @param value A value to check\r\n     *\r\n     * @returns true if the given value is a string, false otherwise\r\n     */\r\n    StringUtils.isString = function (value) {\r\n        return (typeof value === 'string' || value instanceof String);\r\n    };\r\n    /**\r\n     * Strictly check that the provided value is a string or throw an exception\r\n     *\r\n     * @param value A value to check\r\n     * @param valueName The name of the value to be shown at the beginning of the exception message\r\n     * @param errorMessage The rest of the exception message\r\n     *\r\n     * @throws Error If the check fails\r\n     *\r\n     * @return void\r\n     */\r\n    StringUtils.forceString = function (value, valueName, errorMessage) {\r\n        if (valueName === void 0) { valueName = ''; }\r\n        if (errorMessage === void 0) { errorMessage = 'must be a string'; }\r\n        if (!StringUtils.isString(value)) {\r\n            throw new Error(valueName + ' ' + errorMessage);\r\n        }\r\n    };\r\n    /**\r\n     * Tells if the given string is a valid url or not\r\n     *\r\n     * @param value The value to check\r\n     *\r\n     * @return False in case the validation fails or true if validation succeeds.\r\n     */\r\n    StringUtils.isUrl = function (value) {\r\n        var res = false;\r\n        if (!StringUtils.isEmpty(value) && StringUtils.isString(value)) {\r\n            // This amazingly good solution's been found at http://stackoverflow.com/questions/3809401/what-is-a-good-regular-expression-to-match-a-url\r\n            var urlRegex = '^(?!mailto:)(?:(?:http|https|ftp)://)(?:\\\\S+(?::\\\\S*)?@)?(?:(?:(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}(?:\\\\.(?:[0-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))|(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))|localhost)(?::\\\\d{2,5})?(?:(/|\\\\?|#)[^\\\\s]*)?$';\r\n            res = !(value.length < 2083 && (new RegExp(urlRegex, 'i')).test(value)) ? false : true;\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * Tells if a specified string is semantically empty, which applies to any string that is comprised of empty spaces, new line characters, tabulations or any other\r\n     * characters without a visually semantic value to the user.\r\n     *\r\n     * Example1: Following strings are considered as empty: \"     \", \"\", \"    \\n\\n\\n\", \"    \\t\\t\\n\"\r\n     * Example2: Following strings are not considered as empty: \"hello\", \"   a\", \"    \\n\\nB\"\r\n     *\r\n     * @param string The text to check\r\n     * @param emptyChars Custom list of strings that will be also considered as empty characters. For example, we can define 'NULL' and '_' as empty string values by setting this to ['NULL', '_']\r\n     *\r\n     * @return false if the string is not empty, true if the string contains non semantically valuable characters or any other characters defined as \"empty\" values\r\n     */\r\n    StringUtils.isEmpty = function (string, emptyChars) {\r\n        if (emptyChars === void 0) { emptyChars = []; }\r\n        // Throw exception if non string value was received\r\n        if (!StringUtils.isString(string)) {\r\n            // Empty or null value is considered empty\r\n            if (string == null || string == '') {\r\n                return true;\r\n            }\r\n            throw new Error(\"value is not a string\");\r\n        }\r\n        return StringUtils.replace(string, emptyChars.concat([' ', \"\\n\", \"\\r\", \"\\t\"]), '') === '';\r\n    };\r\n    /**\r\n     * Strictly check that the provided value is a non empty string or throw an exception\r\n     *\r\n     * Uses the same criteria as the StringUtils.isEmpty() method\r\n     *\r\n     * @param value A value to check\r\n     * @param valueName The name of the value to be shown at the beginning of the exception message\r\n     * @param errorMessage The rest of the exception message\r\n     *\r\n     * @throws Error If the check fails\r\n     *\r\n     * @return void\r\n     */\r\n    StringUtils.forceNonEmptyString = function (value, valueName, errorMessage) {\r\n        if (valueName === void 0) { valueName = ''; }\r\n        if (errorMessage === void 0) { errorMessage = 'must be a non empty string'; }\r\n        if (!StringUtils.isString(value) || StringUtils.isEmpty(value)) {\r\n            throw new Error(valueName + ' ' + errorMessage);\r\n        }\r\n    };\r\n    StringUtils.isCamelCase = function () {\r\n        // TODO - translate from php\r\n    };\r\n    StringUtils.isSnakeCase = function () {\r\n        // TODO - translate from php\r\n    };\r\n    /**\r\n     * Replace all occurrences of the search string with the replacement string\r\n     *\r\n     * @param string The string or array being searched and replaced on, otherwise known as the haystack.\r\n     * @param search The value being searched for, otherwise known as the needle. An array may be used to designate multiple needles\r\n     *        (if we use an array, the order of replacement will be the same of the array: First element will be the first one to be replaced,\r\n     *         second element the second, etc..)\r\n     * @param replacement The value being searched for, otherwise known as the needle. An array may be used to designate multiple needles.\r\n     * @param count [optional] If passed and > 0, this will define the maximum number of replacements to perform\r\n     *\r\n     * @returns The string with all the replaced values\r\n     */\r\n    StringUtils.replace = function (string, search, replacement, count) {\r\n        if (count === void 0) { count = -1; }\r\n        if (!StringUtils.isString(string)) {\r\n            throw new Error(\"string is not valid\");\r\n        }\r\n        if (!StringUtils.isString(search) && !ArrayUtils_1.ArrayUtils.isArray(search)) {\r\n            throw new Error(\"search is not a string or array\");\r\n        }\r\n        if (!StringUtils.isString(replacement) && !ArrayUtils_1.ArrayUtils.isArray(replacement)) {\r\n            throw new Error(\"replacement is not a string or array\");\r\n        }\r\n        if (!NumericUtils_1.NumericUtils.isInteger(count) || count === 0) {\r\n            throw new Error(\"count must be a positive integer\");\r\n        }\r\n        var result = string;\r\n        var searchArray = StringUtils.isString(search) ? [String(search)] : search;\r\n        var replacementArray = StringUtils.isString(replacement) ? [String(replacement)] : replacement;\r\n        if (replacementArray.length > 1 && searchArray.length !== replacementArray.length) {\r\n            throw new Error(\"search and replacement arrays must have the same length\");\r\n        }\r\n        for (var i = 0; i < searchArray.length; i++) {\r\n            if (searchArray[i] !== '') {\r\n                var valueToReplace = (replacementArray.length === 1) ? replacementArray[0] : replacementArray[i];\r\n                if (valueToReplace === undefined || valueToReplace === null) {\r\n                    valueToReplace = '';\r\n                }\r\n                var resultArray = [];\r\n                var splittedArray = result.split(searchArray[i]);\r\n                for (var j = 0; j < splittedArray.length; j++) {\r\n                    resultArray.push(splittedArray[j]);\r\n                    if (j < splittedArray.length - 1) {\r\n                        if (count < 0 || j < count) {\r\n                            resultArray.push(valueToReplace);\r\n                        }\r\n                        else {\r\n                            resultArray.push(searchArray[i]);\r\n                        }\r\n                    }\r\n                }\r\n                result = resultArray.join('');\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Remove whitespaces (or any custom set of characters) from both sides of a string\r\n     *\r\n     * @param string A string to process\r\n     *\r\n     * @param characters A set of characters that will be trimmed from both string sides. By default,\r\n     * empty space and new line characters are defined : \" \\n\\r\"\r\n     *\r\n     * @example: StringUtils.trim(\"abcXXabc\", \"abc\") outputs \"XX\"\r\n     *\r\n     * @returns The trimmed string\r\n     */\r\n    StringUtils.trim = function (string, characters) {\r\n        if (characters === void 0) { characters = \" \\n\\r\"; }\r\n        return StringUtils.trimLeft(StringUtils.trimRight(string, characters), characters);\r\n    };\r\n    /**\r\n     * Remove whitespaces (or any custom set of characters) from a string left side\r\n     *\r\n     * @param string A string to process\r\n     * @param characters A set of characters that will be trimmed from string left side. By default,\r\n     *        empty space and new line characters are defined : \" \\n\\r\"\r\n     *\r\n     * @example: StringUtils.trimLeft(\"abcXXabc\", \"abc\") outputs \"XXabc\"\r\n     *\r\n     * @returns The trimmed string\r\n     */\r\n    StringUtils.trimLeft = function (string, characters) {\r\n        if (characters === void 0) { characters = \" \\n\\r\"; }\r\n        if (!StringUtils.isString(string)) {\r\n            throw new Error('value is not a string');\r\n        }\r\n        return string.replace(new RegExp(\"^[\" + characters + \"]+\"), \"\");\r\n    };\r\n    /**\r\n     * Remove whitespaces (or any custom set of characters) from a string right side\r\n     *\r\n     * @param string A string to process\r\n     *\r\n     * @param characters A set of characters that will be trimmed from string right side. By default,\r\n     * empty space and new line characters are defined : \" \\n\\r\"\r\n     *\r\n     * @example: StringUtils.trimRight(\"abcXXabc\", \"abc\") outputs \"abcXX\"\r\n     *\r\n     * @returns The trimmed string\r\n     */\r\n    StringUtils.trimRight = function (string, characters) {\r\n        if (characters === void 0) { characters = \" \\n\\r\"; }\r\n        if (!StringUtils.isString(string)) {\r\n            throw new Error('value is not a string');\r\n        }\r\n        return string.replace(new RegExp(\"[\" + characters + \"]+$\"), \"\");\r\n    };\r\n    /**\r\n     * Pad a string to a certain length with another string\r\n     *\r\n     * @param string The string to which we want to fill the empty spaces\r\n     * @param padLength The minimum length that we want for the resulting string to have\r\n     * @param padString The character or characters which we want to add to the string to match the target length\r\n     * @param mode LEFT to append the padString to the left of the string, RIGHT to append the padString to the right of the string\r\n     *\r\n     * @returns The padded string\r\n     */\r\n    StringUtils.pad = function (string, padLength, padString, mode) {\r\n        if (padString === void 0) { padString = '0'; }\r\n        if (mode === void 0) { mode = 'LEFT'; }\r\n        if (!StringUtils.isString(string) || !StringUtils.isString(padString) || padString.length <= 0) {\r\n            throw new Error('string and padString must be strings');\r\n        }\r\n        if (!NumericUtils_1.NumericUtils.isInteger(padLength)) {\r\n            throw new Error('padLength is not an int');\r\n        }\r\n        if (mode !== 'LEFT' && mode !== 'RIGHT') {\r\n            throw new Error('mode must be LEFT or RIGHT');\r\n        }\r\n        var result = string;\r\n        if (mode === 'RIGHT') {\r\n            while (result.length < padLength) {\r\n                result = result + padString.substr(0, padLength - result.length);\r\n            }\r\n        }\r\n        else {\r\n            while (result.length < padLength) {\r\n                result = padString.substr(-(padLength - result.length)) + result;\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Count the number of times a string is found inside another string\r\n     *\r\n     * @param string The string where we want to search\r\n     * @param findMe The string that we want to look for\r\n     *\r\n     * @returns The number of times that findMe appears on string\r\n     */\r\n    StringUtils.countStringOccurences = function (string, findMe) {\r\n        if (!StringUtils.isString(string) || !StringUtils.isString(findMe)) {\r\n            throw new Error('value is not a string');\r\n        }\r\n        if (findMe === '') {\r\n            throw new Error('cannot count empty string occurences');\r\n        }\r\n        return string.split(findMe).length - 1;\r\n    };\r\n    /**\r\n     * Count the number of characters that match the given letter case on the given string\r\n     *\r\n     * @param string The string which case matching characters will be counted\r\n     * @param letterCase Defines which letter case are we looking for: StringUtils.FORMAT_ALL_UPPER_CASE or\r\n     *        StringUtils.FORMAT_ALL_LOWER_CASE\r\n     *\r\n     * @return The number of characters with the specified letter case that are present on the string\r\n     */\r\n    StringUtils.countByCase = function (string, letterCase) {\r\n        if (letterCase === void 0) { letterCase = StringUtils.FORMAT_ALL_UPPER_CASE; }\r\n        string = StringUtils.removeAccents(string);\r\n        if (letterCase === StringUtils.FORMAT_ALL_UPPER_CASE) {\r\n            return string.replace(/[^A-Z]+/g, '').length;\r\n        }\r\n        if (letterCase === StringUtils.FORMAT_ALL_LOWER_CASE) {\r\n            return string.replace(/[^a-z]+/g, '').length;\r\n        }\r\n        throw new Error('invalid case value');\r\n    };\r\n    /**\r\n     * Count the number of words that exist on the given string\r\n     *\r\n     * @param string The string which words will be counted\r\n     * @param wordSeparator ' ' by default. The character that is considered as the word sepparator\r\n     *\r\n     * @returns The number of words (elements divided by the wordSeparator value) that are present on the string\r\n     */\r\n    StringUtils.countWords = function (string, wordSeparator) {\r\n        if (wordSeparator === void 0) { wordSeparator = ' '; }\r\n        var count = 0;\r\n        var lines = StringUtils.getLines(string);\r\n        for (var i = 0; i < lines.length; i++) {\r\n            var words = lines[i].split(wordSeparator);\r\n            for (var j = 0; j < words.length; j++) {\r\n                if (!StringUtils.isEmpty(words[j])) {\r\n                    count++;\r\n                }\r\n            }\r\n        }\r\n        return count;\r\n    };\r\n    /**\r\n     * Given a string with a list of elements separated by '/' or '\\' that represent some arbitrary path structure,\r\n     * this method will return the number of elements that are listed on the path.\r\n     *\r\n     * @example \"c:\\\\\" -> results in 1\r\n     *          \"//folder/folder2/folder3/file.txt\" -> results in 4\r\n     *\r\n     * @param path A string containing some arbitrary path.\r\n     *\r\n     * @return The number of elements that are listed on the provided path\r\n     */\r\n    StringUtils.countPathElements = function (path) {\r\n        path = StringUtils.formatPath(path, '/');\r\n        path = (path.indexOf('/') === 0) ? path.substr(1) : path;\r\n        return path == '' ? 0 : path.split('/').length;\r\n    };\r\n    /**\r\n     * Method that limits the length of a string and optionally appends informative characters like ' ...'\r\n     * to inform that the original string was longer.\r\n     *\r\n     * @param string String to limit\r\n     * @param limit Max number of characters\r\n     * @param limiterString If the specified text exceeds the specified limit, the value of this parameter will be added to the end of the result. The value is ' ...' by default.\r\n     *\r\n     * @returns The specified string but limited in length if necessary. Final result will never exceed the specified limit, also with the limiterString appended.\r\n     */\r\n    StringUtils.limitLen = function (string, limit, limiterString) {\r\n        if (limit === void 0) { limit = 100; }\r\n        if (limiterString === void 0) { limiterString = ' ...'; }\r\n        if (limit <= 0 || !NumericUtils_1.NumericUtils.isNumeric(limit)) {\r\n            throw new Error('limit must be a positive numeric value');\r\n        }\r\n        if (!StringUtils.isString(string)) {\r\n            return '';\r\n        }\r\n        if (string.length <= limit) {\r\n            return string;\r\n        }\r\n        if (limiterString.length > limit) {\r\n            return limiterString.substring(0, limit);\r\n        }\r\n        else {\r\n            return string.substring(0, limit - limiterString.length) + limiterString;\r\n        }\r\n    };\r\n    /**\r\n     * Extracts the domain name from a given url (excluding subdomain).\r\n     * For example: http://subdomain.google.com/test/ will result in 'google.com'\r\n     *\r\n     * @param url A string containing an URL\r\n     *\r\n     * @returns The domain from the given string (excluding the subdomain if exists)\r\n     */\r\n    StringUtils.getDomainFromUrl = function (url) {\r\n        var hostName = StringUtils.getHostNameFromUrl(url);\r\n        hostName = hostName.split('.');\r\n        if (hostName.length > 2) {\r\n            hostName.shift();\r\n        }\r\n        return hostName.join('.');\r\n    };\r\n    /**\r\n     * Extracts the hostname (domain + subdomain) from a given url.\r\n     * For example: http://subdomain.google.com/test/ will result in 'subdomain.google.com'\r\n     *\r\n     * @param url A string containing an URL\r\n     *\r\n     * @returns The domain and subdomain from the given string (subdomain.domain.com)\r\n     */\r\n    StringUtils.getHostNameFromUrl = function (url) {\r\n        if (StringUtils.isEmpty(url) || !StringUtils.isUrl(url)) {\r\n            return '';\r\n        }\r\n        // TODO - This should be improved by avoiding the use of an anchor element,\r\n        // cause it will only work on browsers and Explorer / Edge generate wrong results\r\n        var tmp = document.createElement('a');\r\n        tmp.href = url;\r\n        // Validate domain contains a valid number of dots\r\n        var dotsCount = (tmp.host.match(/\\./g) || []).length;\r\n        if (dotsCount <= 0 || dotsCount > 2) {\r\n            return '';\r\n        }\r\n        return tmp.host;\r\n    };\r\n    /**\r\n     * Extracts all the lines from the given string and outputs an array with each line as an element.\r\n     * It does not matter which line separator's been used (\\n, \\r, Windows, linux...). All source lines will be correctly extracted.\r\n     *\r\n     * @param string Text containing one or more lines that will be converted to an array with each line on a different element.\r\n     * @param filters One or more regular expressions that will be used to filter unwanted lines. Lines that match any of the\r\n     *  filters will be excluded from the result. By default, all empty lines are ignored (those containing only newline, blank, tabulators, etc..).\r\n     *\r\n     * @returns A list with all the string lines sepparated as different array elements.\r\n     */\r\n    StringUtils.getLines = function (string, filters) {\r\n        if (filters === void 0) { filters = [/\\s+/g]; }\r\n        var res = [];\r\n        // Validate we are receiving a string\r\n        if (!StringUtils.isString(string)) {\r\n            return res;\r\n        }\r\n        var tmp = string.split(/\\r?\\n|\\n|\\r/);\r\n        for (var i = 0; i < tmp.length; i++) {\r\n            // Apply specified filters\r\n            if (StringUtils.isString(tmp[i])) {\r\n                var replacedFilters = tmp[i];\r\n                for (var j = 0; j < filters.length; j++) {\r\n                    replacedFilters = replacedFilters.replace(filters[j], '');\r\n                }\r\n                if (replacedFilters != '') {\r\n                    res.push(tmp[i]);\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    StringUtils.getKeyWords = function () {\r\n        // TODO: translate from php\r\n    };\r\n    /**\r\n     * Given a string with a list of elements separated by '/' or '\\' that represent some arbitrary path structure,\r\n     * this method will format the specified path and remove the number of requested path elements (from its right\r\n     * side) and return the path without that elements.\r\n     *\r\n     * This method can be used with Operating system file paths, urls, or any other string that uses the 'slash separated'\r\n     * format to encode a path.\r\n     *\r\n     * @example \"//folder/folder2/folder3/file.txt\" -> results in \"/folder/folder2/folder3\" if elementsToRemove = 1<br>\r\n     *          \"//folder/folder2\\folder3\\file.txt\" -> results in \"/folder/folder2\" if elementsToRemove = 2\r\n     *\r\n     * @see StringUtils.formatPath\r\n     *\r\n     * @param path A string containing some arbitrary path.\r\n     * @param elementsToRemove (one by default) The number of elements that we want to remove from the right side of the path.\r\n     * @param separator The character to use as the element divider for the returned path. Only slash '/' or backslash '\\' are allowed.\r\n     *\r\n     * @return The received path without the specified number of elements and correctly formatted\r\n     */\r\n    StringUtils.getPath = function (path, elementsToRemove, separator) {\r\n        if (elementsToRemove === void 0) { elementsToRemove = 1; }\r\n        if (separator === void 0) { separator = '/'; }\r\n        if (StringUtils.isEmpty(path)) {\r\n            return '';\r\n        }\r\n        path = StringUtils.formatPath(path, '/');\r\n        if (path === '/') {\r\n            return path;\r\n        }\r\n        var processedPath = (path.indexOf('/') === 0) ? path.substr(1) : path;\r\n        var elements = processedPath.split('/');\r\n        if (elementsToRemove > elements.length || elementsToRemove < -1) {\r\n            return '';\r\n        }\r\n        var arrayToRemove = [];\r\n        for (var i = elements.length - elementsToRemove; i < elements.length; i++) {\r\n            arrayToRemove.push(elements[i]);\r\n        }\r\n        if (arrayToRemove.length <= 0) {\r\n            return path;\r\n        }\r\n        return StringUtils.formatPath(path.substring(0, path.length - arrayToRemove.join('/').length - 1), separator);\r\n    };\r\n    /**\r\n     * Given a string with a list of elements separated by '/' or '\\' that represent some arbitrary path structure,\r\n     * this method will return the element that is located at the requested position. If no position is defined,\r\n     * by default the last element of the path will be returned (the most to the right one).\r\n     *\r\n     * This method can be used with Operating system file paths, urls, or any other string that uses the 'slash separated'\r\n     * format to encode a path.\r\n     *\r\n     * @example \"//folder/folder2/folder3/file.txt\" -> results in \"file.txt\" if (-1) position is defined<br>\r\n     *          \"//folder/folder2\\folder3\\file.txt\" -> results in \"folder\" if position 0 is defined<br>\r\n     *          \"//folder/folder2\\folder3\\file.txt\" -> results in \"folder3\" if position 2 is defined<br>\r\n     *          \"//folder/folder2\\folder3\\file.txt\" -> results in \"folder3\" if position -2 is defined<br>\r\n     *          \"//folder/folder2\\folder3\\file.txt\" -> results in \"folder2\" if position -3 is defined\r\n     *\r\n     * @param path A string containing some arbitrary path.\r\n     * @param position The index for the element that we want to extract from the path. Positive values will get path elements\r\n     *        starting from the left side, being 0 the first most to the left one. Negative values will get path elements starting from\r\n     *        the right side, being -1 the last path element (or the first most to the right one).\r\n     *        If not specified, the last one will be returned.\r\n     *\r\n     * @return The element at the specified path position or the last one if no position is defined\r\n     */\r\n    StringUtils.getPathElement = function (path, position) {\r\n        if (position === void 0) { position = -1; }\r\n        if (StringUtils.isEmpty(path)) {\r\n            return '';\r\n        }\r\n        path = StringUtils.formatPath(path, '/');\r\n        path = (path.indexOf('/') === 0) ? path.substr(1) : path;\r\n        var elements = path.split('/');\r\n        if (position >= elements.length || position < -elements.length) {\r\n            throw new Error('Invalid position specified');\r\n        }\r\n        return position < 0 ? elements[elements.length + position] : elements[position];\r\n    };\r\n    /**\r\n     * This method works in the same way as getPathElement but it also removes the extension part from the result\r\n     * if it has any.\r\n     *\r\n     * @example \"//folder/folder2/folder3/file.txt\" -> results in \"file\" if position = -1. Notice that \".txt\" extension is removed<br>\r\n     *          \"//folder/folder2\\folder3\\file.txt\" -> results in \"folder3\" if position = 2. \"folder3\" has no extension so it does not get modified.\r\n     *\r\n     * @see StringUtils.getPathElement\r\n     *\r\n     * @param path A string containing some arbitrary path.\r\n     * @param position The index for the element that we want to extract from the path. If not specified, the\r\n     *                 last one will be returned.\r\n     * @param extensionSeparator The character to be used as the extension separator. The most commonly used is '.'\r\n     *\r\n     * @return The element at the specified path position with it's extension removed or the last one if no position is defined\r\n     */\r\n    StringUtils.getPathElementWithoutExt = function (path, position, extensionSeparator) {\r\n        if (position === void 0) { position = -1; }\r\n        if (extensionSeparator === void 0) { extensionSeparator = '.'; }\r\n        var element = StringUtils.getPathElement(path, position);\r\n        if (element.indexOf(extensionSeparator) >= 0) {\r\n            element = element.substr(0, element.lastIndexOf(extensionSeparator));\r\n        }\r\n        return element;\r\n    };\r\n    /**\r\n     * This method works in the same way as getPathElement but it only gives the element extension if it has any.\r\n     *\r\n     * @example \"//folder/folder2/folder3/file.txt\" -> results in \"txt\" if position = -1. Notice that extension without separator character is returned<br>\r\n     *          \"//folder/folder2\\folder3\\file.txt\" -> results in \"folder3\" if position = 2. \"folder3\" has no extension so it does not get modified.\r\n     *\r\n     * @see StringUtils.getPathElement\r\n     *\r\n     * @param path A string containing some arbitrary path.\r\n     * @param position The index for the element extension that we want to extract from the path. If not specified, the\r\n     *                 last one will be returned.\r\n     * @param extensionSeparator The character to be used as the extension separator. The most commonly used is '.'\r\n     *\r\n     * @return The extension from the element at the specified path position or the extension from the last one if no position is defined\r\n     */\r\n    StringUtils.getPathExtension = function (path, position, extensionSeparator) {\r\n        if (position === void 0) { position = -1; }\r\n        if (extensionSeparator === void 0) { extensionSeparator = '.'; }\r\n        var element = StringUtils.getPathElement(path, position);\r\n        if (element.indexOf(extensionSeparator) < 0) {\r\n            return '';\r\n        }\r\n        // Find the extension by getting the last position of the dot character\r\n        return element.substr(element.lastIndexOf(extensionSeparator) + 1);\r\n    };\r\n    /**\r\n     * Given an internet URL, this method extracts only the scheme part.\r\n     * Example: \"http://google.com\" -> results in \"http\"\r\n     *\r\n     * @see StringUtils.formatUrl\r\n     *\r\n     * @param url A valid internet url\r\n     *\r\n     * @returns ('ftp', 'http', ...) if the url is valid or '' if the url is invalid\r\n     */\r\n    StringUtils.getSchemeFromUrl = function (url) {\r\n        if (url == null || url == undefined) {\r\n            return '';\r\n        }\r\n        if (!StringUtils.isString(url)) {\r\n            throw new Error(\"Specified value must be a string\");\r\n        }\r\n        if (!StringUtils.isUrl(url)) {\r\n            return '';\r\n        }\r\n        var res = url.split('://');\r\n        return (res.length === 2) ? res[0] : '';\r\n    };\r\n    /**\r\n     * Changes the letter case for the given string to the specified format.\r\n     *\r\n     * @param string A string that will be processed to match the specified case format.\r\n     * @param format The format to which the given string will be converted. Possible values are defined as\r\n     * StringUtils constants that start with <b>FORMAT_</b>, like: StringUtils.FORMAT_ALL_UPPER_CASE\r\n     *\r\n     * @see StringUtils.FORMAT_SENTENCE_CASE\r\n     * @see StringUtils.FORMAT_START_CASE\r\n     * @see StringUtils.FORMAT_ALL_UPPER_CASE\r\n     * @see StringUtils.FORMAT_ALL_LOWER_CASE\r\n     * @see StringUtils.FORMAT_FIRST_UPPER_REST_LOWER\r\n     * @see StringUtils.FORMAT_CAMEL_CASE\r\n     * @see StringUtils.FORMAT_UPPER_CAMEL_CASE\r\n     * @see StringUtils.FORMAT_LOWER_CAMEL_CASE\r\n     * @see StringUtils.FORMAT_SNAKE_CASE\r\n     * @see StringUtils.FORMAT_UPPER_SNAKE_CASE\r\n     * @see StringUtils.FORMAT_LOWER_SNAKE_CASE\r\n     *\r\n     * @returns The given string converted to the specified case format.\r\n     */\r\n    StringUtils.formatCase = function (string, format) {\r\n        // Non string values will throw an exception\r\n        if (!StringUtils.isString(string)) {\r\n            throw new Error('value is not a string');\r\n        }\r\n        // Empty values will return the string itself\r\n        if (StringUtils.isEmpty(string)) {\r\n            return string;\r\n        }\r\n        // Generate the sentence case output\r\n        // TODO - translate from PHP\r\n        // Generate the title case output\r\n        if (format === StringUtils.FORMAT_START_CASE) {\r\n            return string.split(' ')\r\n                .map(function (s) { return (s.length > 0 ? s[0].toUpperCase() : '') + (s.length > 1 ? s.substr(1).toLowerCase() : ''); })\r\n                .join(' ');\r\n        }\r\n        // Generate the all upper case output\r\n        if (format === StringUtils.FORMAT_ALL_UPPER_CASE) {\r\n            return string.toUpperCase();\r\n        }\r\n        // Generate the all lower case output\r\n        if (format === StringUtils.FORMAT_ALL_LOWER_CASE) {\r\n            return string.toLowerCase();\r\n        }\r\n        // Generate the first upper rest lower case output\r\n        if (format === StringUtils.FORMAT_FIRST_UPPER_REST_LOWER) {\r\n            return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();\r\n        }\r\n        // Generate the snake case format\r\n        // TODO - translate from PHP\r\n        // Generate the camel case format\r\n        if (format.indexOf('CAMEL_CASE') > 0) {\r\n            // non-alpha and non-numeric characters become spaces and the whole string is splitted to words\r\n            var stringWords = StringUtils.removeAccents(string).replace(/[^a-z0-9]+/ig, ' ').trim().split(' ');\r\n            // uppercase the first character of each word except the first one\r\n            if (stringWords.length > 1) {\r\n                for (var i = 1; i < stringWords.length; i++) {\r\n                    stringWords[i] = stringWords[i].charAt(0).toUpperCase() + stringWords[i].slice(1);\r\n                }\r\n            }\r\n            string = stringWords.join('');\r\n            if (format == StringUtils.FORMAT_UPPER_CAMEL_CASE) {\r\n                return string.charAt(0).toUpperCase() + string.slice(1);\r\n            }\r\n            if (format == StringUtils.FORMAT_LOWER_CAMEL_CASE) {\r\n                return string.charAt(0).toLowerCase() + string.slice(1);\r\n            }\r\n            return string;\r\n        }\r\n        throw new Error('Unknown format specified');\r\n    };\r\n    /**\r\n     * Given a string with a list of elements separated by '/' or '\\' that represent some kind of unformatted path,\r\n     * this method will process it to get a standarized one by applying the following rules:\r\n     *\r\n     * - Duplicate separator characters will be removed: \"a\\\\\\b\\\\c\" will become \"a/b/c\"\r\n     * - All separator characters will be unified to the same one: \"a\\b/c\\d\" will become \"a/b/c/d\"\r\n     * - No trailing separator will exist: \"a\\b\\c\\\" will become \"a\\b\\c\"\r\n     *\r\n     * NOTE: This method only applies format to the received string. It does not check if the path is a real\r\n     *       location or a valid url, and won't also fail if the received path contains strange characters or is invalid.\r\n     *\r\n     * @param path A raw path to be formatted\r\n     * @param separator The character to use as the element divider. Only slash '/' or backslash '\\' are allowed.\r\n     *\r\n     * @return The correctly formatted path without any trailing separator\r\n     */\r\n    StringUtils.formatPath = function (path, separator) {\r\n        if (separator === void 0) { separator = '/'; }\r\n        if (!StringUtils.isString(path)) {\r\n            throw new Error('path must be a string');\r\n        }\r\n        if (separator !== '/' && separator !== '\\\\') {\r\n            throw new Error('separator must be a slash or backslash');\r\n        }\r\n        // Standarize all the separator characters\r\n        path = path.replace(/\\//g, separator);\r\n        path = path.replace(/\\\\/g, separator);\r\n        // Remove duplicate path separator characters\r\n        while (path.indexOf(separator + separator) >= 0) {\r\n            path = path.replace(separator + separator, separator);\r\n        }\r\n        // Remove the last separator only if it exists and is not the only character of the path\r\n        if (path.length > 1 && path.substr(path.length - 1) === separator) {\r\n            path = path.substr(0, path.length - 1);\r\n        }\r\n        return path;\r\n    };\r\n    /**\r\n     * Given a raw string containing an internet URL, this method will process it to obtain a URL that is 100% format valid.\r\n     *\r\n     * A Uniform Resource Locator (URL), commonly informally termed a web address is a reference to a web resource that specifies\r\n     * its location on a computer network and a mechanism for retrieving it. URLs occur most commonly to reference web pages (http),\r\n     * but are also used for file transfer (ftp), email (mailto), database access (JDBC), and many other applications.\r\n     *\r\n     * Every HTTP URL conforms to the syntax of a generic URI. A generic URI is of the form: scheme:[//[user:password@]host[:port]][/]path[?query][#fragment]\r\n     *\r\n     * @see https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax\r\n     *\r\n     * @returns The formated url string or the original string if it was not a valid url\r\n     */\r\n    StringUtils.formatUrl = function (url) {\r\n        var urlSeparator = '/';\r\n        if (url == '') {\r\n            return '';\r\n        }\r\n        if (!StringUtils.isString(url)) {\r\n            throw new Error(\"url must be a string\");\r\n        }\r\n        if (StringUtils.isEmpty(url)) {\r\n            return url;\r\n        }\r\n        // Trim and replace all slashes on the url with the correct url slash\r\n        url = url.trim();\r\n        url = url.replace(/\\//g, urlSeparator);\r\n        url = url.replace(/\\\\/g, urlSeparator);\r\n        // Remove duplicate path separator characters. We replace :// with @@\r\n        // to prevent the first two // from being replaced with a single one\r\n        url = url.replace(/\\:\\/\\//g, '@@@');\r\n        while (url.indexOf(urlSeparator + urlSeparator) >= 0) {\r\n            url = url.replace(urlSeparator + urlSeparator, urlSeparator);\r\n        }\r\n        url = url.replace(/@@@/g, '://');\r\n        // get the url scheme\r\n        var scheme = this.getSchemeFromUrl(url);\r\n        if (scheme === '') {\r\n            if (StringUtils.isUrl('http://' + url)) {\r\n                return 'http://' + url;\r\n            }\r\n        }\r\n        return url;\r\n    };\r\n    StringUtils.formatForFullTextSearch = function () {\r\n        // TODO: translate from php\r\n    };\r\n    /**\r\n     * Compares two strings and gives the number of character replacements that must be performed to convert one\r\n     * of the strings into the other. A very useful method to use in fuzzy text searches where we want to look for\r\n     * similar texts. This method uses the Levenshtein method for the comparison:\r\n     *\r\n     * The Levenshtein distance is defined as the minimal number of characters you have to replace, insert or delete\r\n     * to transform string1 into string2. The complexity of the algorithm is O(m*n), where n and m are the length\r\n     * of string1 and string2.\r\n     *\r\n     * @example \"aha\" and \"aba\" will output 1 cause we need to change the h for a b to transform one string into another.\r\n     *\r\n     * @param string1 The first string to compare\r\n     * @param string2 The second string to compare\r\n     *\r\n     * @return The number of characters to replace to convert $string1 into $string2 where 0 means both strings are the same.\r\n     *         The higher the result, the more different the strings are.\r\n     */\r\n    StringUtils.compareByLevenshtein = function (string1, string2) {\r\n        // This function was found at https://gist.github.com/santhoshtr/1710925\r\n        if (!StringUtils.isString(string1) || !StringUtils.isString(string2)) {\r\n            throw new Error('string1 and string2 must be strings');\r\n        }\r\n        var length1 = string1.length;\r\n        var length2 = string2.length;\r\n        if (length1 < length2) {\r\n            return StringUtils.compareByLevenshtein(string2, string1);\r\n        }\r\n        if (length1 == 0) {\r\n            return length2;\r\n        }\r\n        if (string1 === string2) {\r\n            return 0;\r\n        }\r\n        var currentRow = [];\r\n        // This code is the equivalent to the range(0, $length2) in php version\r\n        var prevRow = [];\r\n        for (var i = 0; i <= length2; i++) {\r\n            prevRow.push(i);\r\n        }\r\n        for (var i = 0; i < length1; i++) {\r\n            currentRow = [];\r\n            currentRow[0] = i + 1;\r\n            var c1 = string1.substr(i, 1);\r\n            for (var j = 0; j < length2; j++) {\r\n                var c2 = string2.substr(j, 1);\r\n                var insertions = prevRow[j + 1] + 1;\r\n                var deletions = currentRow[j] + 1;\r\n                var substitutions = prevRow[j] + ((c1 !== c2) ? 1 : 0);\r\n                currentRow.push(Math.min(insertions, deletions, substitutions));\r\n            }\r\n            prevRow = currentRow;\r\n        }\r\n        return prevRow[length2];\r\n    };\r\n    /**\r\n     * Compares the percentage of similarity between two strings, based on the Levenshtein method. A very useful method\r\n     * to use in fuzzy text searches where we want to look for similar texts.\r\n     *\r\n     * @param string1 The first string to compare\r\n     * @param string2 The second string to compare\r\n     *\r\n     * @return A number between 0 and 100, being 100 if both strings are the same and 0 if both strings are totally different\r\n     */\r\n    StringUtils.compareSimilarityPercent = function (string1, string2) {\r\n        var levenshtein = StringUtils.compareByLevenshtein(string1, string2);\r\n        if (levenshtein === 0) {\r\n            return 100;\r\n        }\r\n        return (1 - levenshtein / Math.max(string1.length, string2.length)) * 100;\r\n    };\r\n    /**\r\n     * Generates a random string with the specified length and options\r\n     *\r\n     * @param minLength Specify the minimum possible length for the generated string\r\n     * @param maxLength Specify the maximum possible length for the generated string\r\n     * @param charSet Defines the list of possible characters to be generated. Each element of charSet must be a string containing\r\n     *                the possible characters like 'a1kjuhAO' or a range like 'a-z', 'A-D', '0-5', ... etc.\r\n     *                Note that - character must be escaped \\- when not specified as part of a range.\r\n     *                Default charset is alphanumeric ['0-9', 'a-z', 'A-Z']\r\n     *\r\n     * @return A randomly generated string\r\n     */\r\n    StringUtils.generateRandom = function (minLength, maxLength, charSet) {\r\n        if (charSet === void 0) { charSet = ['0-9', 'a-z', 'A-Z']; }\r\n        if (minLength < 0 || !NumericUtils_1.NumericUtils.isInteger(minLength) ||\r\n            maxLength < 0 || !NumericUtils_1.NumericUtils.isInteger(maxLength)) {\r\n            throw new Error('minLength and maxLength must be positive numbers');\r\n        }\r\n        if (maxLength < minLength) {\r\n            throw new Error('Provided maxLength must be higher or equal than minLength');\r\n        }\r\n        if (!ArrayUtils_1.ArrayUtils.isArray(charSet) || charSet.length <= 0) {\r\n            throw new Error('invalid charset');\r\n        }\r\n        // Define the output charset\r\n        var finalCharSet = '';\r\n        var numbers = '0123456789';\r\n        var lowerCaseLetters = 'abcdefghijkmnopqrstuvwxyz';\r\n        var upperCaseLetters = 'ABCDEFGHIJKMNOPQRSTUVWXYZ';\r\n        for (var _i = 0, charSet_1 = charSet; _i < charSet_1.length; _i++) {\r\n            var chars = charSet_1[_i];\r\n            if (!StringUtils.isString(chars) || StringUtils.isEmpty(chars)) {\r\n                throw new Error('invalid charset');\r\n            }\r\n            var firstChar = chars.substr(0, 1);\r\n            var thirdChar = chars.substr(2, 1);\r\n            // Check if an interval of characters has been defined\r\n            if (chars.length === 3 && chars.indexOf('-') === 1 && firstChar !== '\\\\') {\r\n                // Look for numeric intervals\r\n                if (numbers.indexOf(firstChar) >= 0) {\r\n                    finalCharSet += numbers.substring(numbers.indexOf(firstChar), numbers.indexOf(thirdChar) + 1);\r\n                    // Look for lower case letter intervals\r\n                }\r\n                else if (lowerCaseLetters.indexOf(firstChar) >= 0) {\r\n                    finalCharSet += lowerCaseLetters.substring(lowerCaseLetters.indexOf(firstChar), lowerCaseLetters.indexOf(thirdChar) + 1);\r\n                    // Look for upper case letter intervals\r\n                }\r\n                else if (upperCaseLetters.indexOf(firstChar) >= 0) {\r\n                    finalCharSet += upperCaseLetters.substring(upperCaseLetters.indexOf(firstChar), upperCaseLetters.indexOf(thirdChar) + 1);\r\n                }\r\n            }\r\n            else {\r\n                finalCharSet += StringUtils.replace(chars, '\\\\-', '-');\r\n            }\r\n        }\r\n        // Generate as many random characters as required\r\n        var result = '';\r\n        var length = (minLength === maxLength) ? maxLength : NumericUtils_1.NumericUtils.generateRandomInteger(minLength, maxLength);\r\n        for (var i = 0; i < length; i++) {\r\n            result += finalCharSet.charAt(Math.floor(Math.random() * finalCharSet.length));\r\n        }\r\n        return result;\r\n    };\r\n    StringUtils.findMostSimilarString = function () {\r\n        // TODO: translate from php\r\n    };\r\n    StringUtils.findMostSimilarStringIndex = function () {\r\n        // TODO: translate from php\r\n    };\r\n    StringUtils.removeNewLineCharacters = function () {\r\n        // TODO: translate from php\r\n    };\r\n    /**\r\n     * Converts all accent characters to ASCII characters on a given string.<br>\r\n     * This method is based on a stack overflow implementation called removeDiacritics\r\n     *\r\n     * @see http://stackoverflow.com/questions/990904/remove-accents-diacritics-in-a-string-in-javascript\r\n     *\r\n     * @param string Text from which accents must be cleaned\r\n     *\r\n     * @returns The given string with all accent and diacritics replaced by the respective ASCII characters.\r\n     */\r\n    StringUtils.removeAccents = function (string) {\r\n        if (!StringUtils.isString(string)) {\r\n            throw new Error('value is not a string');\r\n        }\r\n        var defaultDiacriticsRemovalMap = [{\r\n                'b': 'A',\r\n                'l': '\\u0041\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F'\r\n            }, {\r\n                'b': 'AA',\r\n                'l': '\\uA732'\r\n            }, {\r\n                'b': 'AE',\r\n                'l': '\\u00C6\\u01FC\\u01E2'\r\n            }, {\r\n                'b': 'AO',\r\n                'l': '\\uA734'\r\n            }, {\r\n                'b': 'AU',\r\n                'l': '\\uA736'\r\n            }, {\r\n                'b': 'AV',\r\n                'l': '\\uA738\\uA73A'\r\n            }, {\r\n                'b': 'AY',\r\n                'l': '\\uA73C'\r\n            }, {\r\n                'b': 'B',\r\n                'l': '\\u0042\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181'\r\n            }, {\r\n                'b': 'C',\r\n                'l': '\\u0043\\u24B8\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73E'\r\n            }, {\r\n                'b': 'D',\r\n                'l': '\\u0044\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779'\r\n            }, {\r\n                'b': 'DZ',\r\n                'l': '\\u01F1\\u01C4'\r\n            }, {\r\n                'b': 'Dz',\r\n                'l': '\\u01F2\\u01C5'\r\n            }, {\r\n                'b': 'E',\r\n                'l': '\\u0045\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E'\r\n            }, {\r\n                'b': 'F',\r\n                'l': '\\u0046\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B'\r\n            }, {\r\n                'b': 'G',\r\n                'l': '\\u0047\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E'\r\n            }, {\r\n                'b': 'H',\r\n                'l': '\\u0048\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D'\r\n            }, {\r\n                'b': 'I',\r\n                'l': '\\u0049\\u24BE\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197'\r\n            }, {\r\n                'b': 'J',\r\n                'l': '\\u004A\\u24BF\\uFF2A\\u0134\\u0248'\r\n            }, {\r\n                'b': 'K',\r\n                'l': '\\u004B\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2'\r\n            }, {\r\n                'b': 'L',\r\n                'l': '\\u004C\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780'\r\n            }, {\r\n                'b': 'LJ',\r\n                'l': '\\u01C7'\r\n            }, {\r\n                'b': 'Lj',\r\n                'l': '\\u01C8'\r\n            }, {\r\n                'b': 'M',\r\n                'l': '\\u004D\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C'\r\n            }, {\r\n                'b': 'N',\r\n                'l': '\\u004E\\u24C3\\uFF2E\\u01F8\\u0143\\u00D1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u0220\\u019D\\uA790\\uA7A4'\r\n            }, {\r\n                'b': 'NJ',\r\n                'l': '\\u01CA'\r\n            }, {\r\n                'b': 'Nj',\r\n                'l': '\\u01CB'\r\n            }, {\r\n                'b': 'O',\r\n                'l': '\\u004F\\u24C4\\uFF2F\\u00D2\\u00D3\\u00D4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\u00D5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\u00D6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\u00D8\\u01FE\\u0186\\u019F\\uA74A\\uA74C'\r\n            }, {\r\n                'b': 'OI',\r\n                'l': '\\u01A2'\r\n            }, {\r\n                'b': 'OO',\r\n                'l': '\\uA74E'\r\n            }, {\r\n                'b': 'OU',\r\n                'l': '\\u0222'\r\n            }, {\r\n                'b': 'OE',\r\n                'l': '\\u008C\\u0152'\r\n            }, {\r\n                'b': 'oe',\r\n                'l': '\\u009C\\u0153'\r\n            }, {\r\n                'b': 'P',\r\n                'l': '\\u0050\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754'\r\n            }, {\r\n                'b': 'Q',\r\n                'l': '\\u0051\\u24C6\\uFF31\\uA756\\uA758\\u024A'\r\n            }, {\r\n                'b': 'R',\r\n                'l': '\\u0052\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782'\r\n            }, {\r\n                'b': 'S',\r\n                'l': '\\u0053\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784'\r\n            }, {\r\n                'b': 'T',\r\n                'l': '\\u0054\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786'\r\n            }, {\r\n                'b': 'TZ',\r\n                'l': '\\uA728'\r\n            }, {\r\n                'b': 'U',\r\n                'l': '\\u0055\\u24CA\\uFF35\\u00D9\\u00DA\\u00DB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\u00DC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244'\r\n            }, {\r\n                'b': 'V',\r\n                'l': '\\u0056\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245'\r\n            }, {\r\n                'b': 'VY',\r\n                'l': '\\uA760'\r\n            }, {\r\n                'b': 'W',\r\n                'l': '\\u0057\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72'\r\n            }, {\r\n                'b': 'X',\r\n                'l': '\\u0058\\u24CD\\uFF38\\u1E8A\\u1E8C'\r\n            }, {\r\n                'b': 'Y',\r\n                'l': '\\u0059\\u24CE\\uFF39\\u1EF2\\u00DD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE'\r\n            }, {\r\n                'b': 'Z',\r\n                'l': '\\u005A\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762'\r\n            }, {\r\n                'b': 'a',\r\n                'l': '\\u0061\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250'\r\n            }, {\r\n                'b': 'aa',\r\n                'l': '\\uA733'\r\n            }, {\r\n                'b': 'ae',\r\n                'l': '\\u00E6\\u01FD\\u01E3'\r\n            }, {\r\n                'b': 'ao',\r\n                'l': '\\uA735'\r\n            }, {\r\n                'b': 'au',\r\n                'l': '\\uA737'\r\n            }, {\r\n                'b': 'av',\r\n                'l': '\\uA739\\uA73B'\r\n            }, {\r\n                'b': 'ay',\r\n                'l': '\\uA73D'\r\n            }, {\r\n                'b': 'b',\r\n                'l': '\\u0062\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253'\r\n            }, {\r\n                'b': 'c',\r\n                'l': '\\u0063\\u24D2\\uFF43\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184'\r\n            }, {\r\n                'b': 'd',\r\n                'l': '\\u0064\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\uA77A'\r\n            }, {\r\n                'b': 'dz',\r\n                'l': '\\u01F3\\u01C6'\r\n            }, {\r\n                'b': 'e',\r\n                'l': '\\u0065\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u025B\\u01DD'\r\n            }, {\r\n                'b': 'f',\r\n                'l': '\\u0066\\u24D5\\uFF46\\u1E1F\\u0192\\uA77C'\r\n            }, {\r\n                'b': 'g',\r\n                'l': '\\u0067\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\u1D79\\uA77F'\r\n            }, {\r\n                'b': 'h',\r\n                'l': '\\u0068\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265'\r\n            }, {\r\n                'b': 'hv',\r\n                'l': '\\u0195'\r\n            }, {\r\n                'b': 'i',\r\n                'l': '\\u0069\\u24D8\\uFF49\\u00EC\\u00ED\\u00EE\\u0129\\u012B\\u012D\\u00EF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131'\r\n            }, {\r\n                'b': 'j',\r\n                'l': '\\u006A\\u24D9\\uFF4A\\u0135\\u01F0\\u0249'\r\n            }, {\r\n                'b': 'k',\r\n                'l': '\\u006B\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3'\r\n            }, {\r\n                'b': 'l',\r\n                'l': '\\u006C\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747'\r\n            }, {\r\n                'b': 'lj',\r\n                'l': '\\u01C9'\r\n            }, {\r\n                'b': 'm',\r\n                'l': '\\u006D\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F'\r\n            }, {\r\n                'b': 'n',\r\n                'l': '\\u006E\\u24DD\\uFF4E\\u01F9\\u0144\\u00F1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5'\r\n            }, {\r\n                'b': 'nj',\r\n                'l': '\\u01CC'\r\n            }, {\r\n                'b': 'o',\r\n                'l': '\\u006F\\u24DE\\uFF4F\\u00F2\\u00F3\\u00F4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\u00F5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\u00F6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\u00F8\\u01FF\\u0254\\uA74B\\uA74D\\u0275'\r\n            }, {\r\n                'b': 'oi',\r\n                'l': '\\u01A3'\r\n            }, {\r\n                'b': 'ou',\r\n                'l': '\\u0223'\r\n            }, {\r\n                'b': 'oo',\r\n                'l': '\\uA74F'\r\n            }, {\r\n                'b': 'p',\r\n                'l': '\\u0070\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755'\r\n            }, {\r\n                'b': 'q',\r\n                'l': '\\u0071\\u24E0\\uFF51\\u024B\\uA757\\uA759'\r\n            }, {\r\n                'b': 'r',\r\n                'l': '\\u0072\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783'\r\n            }, {\r\n                'b': 's',\r\n                'l': '\\u0073\\u24E2\\uFF53\\u00DF\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B'\r\n            }, {\r\n                'b': 't',\r\n                'l': '\\u0074\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787'\r\n            }, {\r\n                'b': 'tz',\r\n                'l': '\\uA729'\r\n            }, {\r\n                'b': 'u',\r\n                'l': '\\u0075\\u24E4\\uFF55\\u00F9\\u00FA\\u00FB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\u00FC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289'\r\n            }, {\r\n                'b': 'v',\r\n                'l': '\\u0076\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C'\r\n            }, {\r\n                'b': 'vy',\r\n                'l': '\\uA761'\r\n            }, {\r\n                'b': 'w',\r\n                'l': '\\u0077\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73'\r\n            }, {\r\n                'b': 'x',\r\n                'l': '\\u0078\\u24E7\\uFF58\\u1E8B\\u1E8D'\r\n            }, {\r\n                'b': 'y',\r\n                'l': '\\u0079\\u24E8\\uFF59\\u1EF3\\u00FD\\u0177\\u1EF9\\u0233\\u1E8F\\u00FF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF'\r\n            }, {\r\n                'b': 'z',\r\n                'l': '\\u007A\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763'\r\n            }];\r\n        var diacriticsMap = {};\r\n        for (var i = 0; i < defaultDiacriticsRemovalMap.length; i++) {\r\n            var letters = defaultDiacriticsRemovalMap[i].l;\r\n            for (var j = 0; j < letters.length; j++) {\r\n                diacriticsMap[letters[j]] = defaultDiacriticsRemovalMap[i].b;\r\n            }\r\n        }\r\n        return string.replace(/[^\\u0000-\\u007E]/g, function (a) {\r\n            return diacriticsMap[a] || a;\r\n        });\r\n    };\r\n    StringUtils.removeWordsShorterThan = function () {\r\n        // TODO: translate from php\r\n    };\r\n    StringUtils.removeWordsLongerThan = function () {\r\n        // TODO: translate from php\r\n    };\r\n    StringUtils.removeUrls = function () {\r\n        // TODO: translate from php\r\n    };\r\n    StringUtils.removeHtmlCode = function () {\r\n        // TODO: translate from php\r\n    };\r\n    StringUtils.removeSameConsecutive = function () {\r\n        // TODO: translate from php\r\n    };\r\n    /**\r\n     * Defines the sentence case format (Only the first character of the sentence is capitalised,except for\r\n     * proper nouns and other words which are required by a more specific rule to be capitalised).\r\n     * Generally equivalent to the baseline universal standard of formal English orthography\r\n     */\r\n    StringUtils.FORMAT_SENTENCE_CASE = 'FORMAT_SENTENCE_CASE';\r\n    /**\r\n     * Defines the start case format (The first character in all words capitalised and all the rest\r\n     * of the word lower case). It is also called Title Case\r\n     */\r\n    StringUtils.FORMAT_START_CASE = 'FORMAT_START_CASE';\r\n    /**\r\n     * Defines the all upper case format (All letters on a string written with Capital letters only)\r\n     */\r\n    StringUtils.FORMAT_ALL_UPPER_CASE = 'FORMAT_ALL_UPPER_CASE';\r\n    /**\r\n     * Defines the all lower case format (All letters on a string written with lower case letters only)\r\n     */\r\n    StringUtils.FORMAT_ALL_LOWER_CASE = 'FORMAT_ALL_LOWER_CASE';\r\n    /**\r\n     * Defines the first upper rest lower case format (All letters on a string written\r\n     * with lower case letters except the first one which is Capitalized)\r\n     */\r\n    StringUtils.FORMAT_FIRST_UPPER_REST_LOWER = 'FORMAT_FIRST_UPPER_REST_LOWER';\r\n    /**\r\n     * Defines the CamelCase format (the practice of writing compound words or phrases such that each\r\n     * word or abbreviation begins with a capital letter)\r\n     */\r\n    StringUtils.FORMAT_CAMEL_CASE = 'FORMAT_CAMEL_CASE';\r\n    /**\r\n     * Defines the UpperCamelCase format variation that writes first letter as upper case\r\n     *\r\n     * @see StringUtils.FORMAT_CAMEL_CASE\r\n     */\r\n    StringUtils.FORMAT_UPPER_CAMEL_CASE = 'FORMAT_UPPER_CAMEL_CASE';\r\n    /**\r\n     * Defines the lowerCamelCase format variation that writes first letter as lower case\r\n     *\r\n     * @see StringUtils.FORMAT_CAMEL_CASE\r\n     */\r\n    StringUtils.FORMAT_LOWER_CAMEL_CASE = 'FORMAT_LOWER_CAMEL_CASE';\r\n    /**\r\n     * Defines the snake_case format (the practice of writing compound words or phrases in which\r\n     * the elements are separated with one underscore character (_) and no spaces)\r\n     */\r\n    StringUtils.FORMAT_SNAKE_CASE = 'FORMAT_SNAKE_CASE';\r\n    /**\r\n     * Defines the FORMAT_UPPER_SNAKE_CASE format variation that writes all letters as upper case\r\n     *\r\n     * @see StringUtils.FORMAT_SNAKE_CASE\r\n     */\r\n    StringUtils.FORMAT_UPPER_SNAKE_CASE = 'FORMAT_UPPER_SNAKE_CASE';\r\n    /**\r\n     * Defines the lower_snake_case format variation that writes all letters as lower case\r\n     *\r\n     * @see StringUtils.FORMAT_SNAKE_CASE\r\n     */\r\n    StringUtils.FORMAT_LOWER_SNAKE_CASE = 'FORMAT_LOWER_SNAKE_CASE';\r\n    return StringUtils;\r\n}());\r\nexports.StringUtils = StringUtils;\r\n//# sourceMappingURL=StringUtils.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ObjectUtils_1 = require(\"./ObjectUtils\");\r\nvar StringUtils_1 = require(\"./StringUtils\");\r\nvar ValidationManager_1 = require(\"../managers/ValidationManager\");\r\n/**\r\n * Utilities to perform common array operations\r\n */\r\nvar ArrayUtils = /** @class */ (function () {\r\n    function ArrayUtils() {\r\n    }\r\n    /**\r\n     * Tells if the given value is an array or not\r\n     *\r\n     * @param value A value to check\r\n     *\r\n     * @returns true if the given value is an array, false otherwise\r\n     */\r\n    ArrayUtils.isArray = function (value) {\r\n        return Object.prototype.toString.call(value) === '[object Array]';\r\n    };\r\n    /**\r\n     * Check if two provided arrays are identical (have exactly the same elements and in the same order).\r\n     *\r\n     * @param array1 First array to compare\r\n     * @param array2 Second array to compare\r\n     *\r\n     * @returns true if arrays are exactly the same, false if not\r\n     */\r\n    ArrayUtils.isEqualTo = function (array1, array2) {\r\n        // Both provided values must be arrays or an exception will be launched\r\n        if (!ArrayUtils.isArray(array1) || !ArrayUtils.isArray(array2)) {\r\n            throw new Error('parameters must be arrays');\r\n        }\r\n        // Compare lengths can save a lot of time \r\n        if (array1.length != array2.length) {\r\n            return false;\r\n        }\r\n        for (var i = 0, l = array1.length; i < l; i++) {\r\n            // Check if we have nested arrays\r\n            if (ArrayUtils.isArray(array1[i]) && ArrayUtils.isArray(array2[i])) {\r\n                if (!ArrayUtils.isEqualTo(array1[i], array2[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            else {\r\n                if (ObjectUtils_1.ObjectUtils.isObject(array1[i]) && ObjectUtils_1.ObjectUtils.isObject(array2[i])) {\r\n                    if (!ObjectUtils_1.ObjectUtils.isEqualTo(array1[i], array2[i])) {\r\n                        return false;\r\n                    }\r\n                }\r\n                else if (array1[i] !== array2[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Check if the provided string is found inside the provided array structure.\r\n     * This method will recursively search inside all the provided array elements and test if the provided string is found.\r\n     * Search will be performed inside any array structures like arrays or other objects. Result will be positive even if\r\n     * any string on the array contains the searched text as a substring.\r\n     *\r\n     * @param array The array where the string will be looked for\r\n     * @param str The string that will be searched on the array\r\n     * @param caseSensitive True (default) to perform a case sensitive search, false otherwise\r\n     *\r\n     * @returns True if the string is found anywhere inside the provided array, false otherwise\r\n     */\r\n    ArrayUtils.isStringFound = function (array, str, caseSensitive) {\r\n        if (caseSensitive === void 0) { caseSensitive = true; }\r\n        if (!ArrayUtils.isArray(array)) {\r\n            throw new Error(\"parameter must be an array\");\r\n        }\r\n        if (!StringUtils_1.StringUtils.isString(str)) {\r\n            throw new Error(\"str is not a string\");\r\n        }\r\n        for (var i = 0; i < array.length; i++) {\r\n            if (StringUtils_1.StringUtils.isString(array[i]) &&\r\n                ((caseSensitive && array[i].indexOf(str) >= 0) ||\r\n                    (!caseSensitive && array[i].toLowerCase().indexOf(str.toLowerCase()) >= 0))) {\r\n                return true;\r\n            }\r\n            if (ArrayUtils.isArray(array[i]) && ArrayUtils.isStringFound(array[i], str, caseSensitive)) {\r\n                return true;\r\n            }\r\n            if (ObjectUtils_1.ObjectUtils.isObject(array[i]) && ObjectUtils_1.ObjectUtils.isStringFound(array[i], str, caseSensitive)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Strictly check that the provided value is a non empty array or throw an exception\r\n     *\r\n     * @param value A value to check\r\n     * @param valueName The name of the value to be shown at the beginning of the exception message\r\n     * @param errorMessage The rest of the exception message\r\n     *\r\n     * @throws Error If the check fails\r\n     *\r\n     * @return void\r\n     */\r\n    ArrayUtils.forceNonEmptyArray = function (value, valueName, errorMessage) {\r\n        if (valueName === void 0) { valueName = ''; }\r\n        if (errorMessage === void 0) { errorMessage = 'must be a non empty array'; }\r\n        if (!this.isArray(value) || value.length <= 0) {\r\n            throw new Error(valueName + ' ' + errorMessage);\r\n        }\r\n    };\r\n    /**\r\n     * Remove the specified item from an array\r\n     *\r\n     * @param array An array (it will not be modified by this method)\r\n     * @param element The element that must be removed from the given array\r\n     *\r\n     * @returns The provided array but without the specified element (if found). Note that originally received array is not modified by this method\r\n     */\r\n    ArrayUtils.removeElement = function (array, element) {\r\n        // Provided array must be an array\r\n        if (!ArrayUtils.isArray(array)) {\r\n            throw new Error('parameter must be an array');\r\n        }\r\n        var res = [];\r\n        if (ArrayUtils.isArray(element)) {\r\n            for (var i = 0; i < array.length; i++) {\r\n                if (!ArrayUtils.isArray(array[i])) {\r\n                    res.push(array[i]);\r\n                }\r\n                else {\r\n                    if (!ArrayUtils.isEqualTo(element, array[i])) {\r\n                        res.push(array[i]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            for (var j = 0; j < array.length; j++) {\r\n                if (element !== array[j]) {\r\n                    res.push(array[j]);\r\n                }\r\n            }\r\n        }\r\n        return res;\r\n    };\r\n    /**\r\n     * remove all the duplicate values on the provided array\r\n     * Duplicate values with different data types won't be considered as equal ('1', 1 will not be removed)\r\n     *\r\n     * @param array An array with possible duplicate values\r\n     *\r\n     * @return The same provided array but without duplicate elements\r\n     */\r\n    ArrayUtils.removeDuplicateElements = function (array) {\r\n        // Provided array must be an array\r\n        if (!ArrayUtils.isArray(array)) {\r\n            throw new Error('parameter must be an array');\r\n        }\r\n        var result = [];\r\n        var numElements = array.length;\r\n        var validationManager = new ValidationManager_1.ValidationManager();\r\n        for (var i = 0; i < numElements; i++) {\r\n            var found = false;\r\n            var resultCount = result.length;\r\n            for (var j = 0; j < resultCount; j++) {\r\n                if (validationManager.isEqualTo(array[i], result[j])) {\r\n                    found = true;\r\n                    break;\r\n                }\r\n            }\r\n            if (!found) {\r\n                result.push(array[i]);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Check if the given array contains duplicate values or not.\r\n     * Duplicate values with different data types won't be considered as equal ('1', 1 will return false)\r\n     *\r\n     * @param array An array containing some elements to test\r\n     *\r\n     * @return True if there are duplicate values, false otherwise\r\n     */\r\n    ArrayUtils.hasDuplicateElements = function (array) {\r\n        // Provided array must be an array\r\n        if (!ArrayUtils.isArray(array)) {\r\n            throw new Error('parameter must be an array');\r\n        }\r\n        var numElements = array.length;\r\n        var validationManager = new ValidationManager_1.ValidationManager();\r\n        for (var i = 0; i < numElements; i++) {\r\n            for (var j = i + 1; j < numElements; j++) {\r\n                if (validationManager.isEqualTo(array[i], array[j])) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Get all the duplicate values on the provided array\r\n     * Duplicate values with different data types won't be considered as equal ('1', 1 will return false)\r\n     *\r\n     * @param array An array containing some elements to test\r\n     *\r\n     * @return list with all the elements that are duplicated on the provided array\r\n     */\r\n    ArrayUtils.getDuplicateElements = function (array) {\r\n        // Provided array must be an array\r\n        if (!ArrayUtils.isArray(array)) {\r\n            throw new Error('parameter must be an array');\r\n        }\r\n        var result = [];\r\n        var numElements = array.length;\r\n        var validationManager = new ValidationManager_1.ValidationManager();\r\n        for (var i = 0; i < numElements; i++) {\r\n            for (var j = i + 1; j < numElements; j++) {\r\n                if (validationManager.isEqualTo(array[i], array[j])) {\r\n                    result.push(array[i]);\r\n                }\r\n            }\r\n        }\r\n        return ArrayUtils.removeDuplicateElements(result);\r\n    };\r\n    return ArrayUtils;\r\n}());\r\nexports.ArrayUtils = ArrayUtils;\r\n//# sourceMappingURL=ArrayUtils.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringUtils_1 = require(\"./StringUtils\");\r\n/**\r\n * Common operations and tools related with numbers\r\n */\r\nvar NumericUtils = /** @class */ (function () {\r\n    function NumericUtils() {\r\n    }\r\n    /**\r\n     * Tells if the given value is numeric or not\r\n     *\r\n     * @param {any} value A value to check\r\n     *\r\n     * @returns {boolean} true if the given value is numeric or represents a numeric value, false otherwise\r\n     */\r\n    NumericUtils.isNumeric = function (value) {\r\n        if (StringUtils_1.StringUtils.isString(value)) {\r\n            value = String(value).trim();\r\n        }\r\n        return !isNaN(parseFloat(value)) && isFinite(value);\r\n    };\r\n    /**\r\n     * Tells if the given value is a numeric integer or not\r\n     *\r\n     * @param value A value to check\r\n     *\r\n     * @returns true if the given value is a numeric integer or represents a a numeric integer value, false otherwise\r\n     */\r\n    NumericUtils.isInteger = function (value) {\r\n        if (!NumericUtils.isNumeric(value)) {\r\n            return false;\r\n        }\r\n        return String(value).indexOf('.') < 0;\r\n    };\r\n    /**\r\n     * Get the number represented by the given value\r\n     *\r\n     * @param any $value A value to convert to a number\r\n     *\r\n     * @returns number The numeric type representation from the given value. For example, a string '0001' will return 1\r\n     */\r\n    NumericUtils.getNumeric = function (value) {\r\n        if (NumericUtils.isNumeric(value)) {\r\n            return Number(value);\r\n        }\r\n        throw new Error('NumericUtils.getNumeric : Provided value is not numeric');\r\n    };\r\n    /**\r\n     * Generate a random integer between the specified range (both extremes are included).\r\n     *\r\n     * @param min lowest possible value (negative values are allowed)\r\n     * @param max highest possible value (negative values are allowed)\r\n     *\r\n     * @return A random integer value between min and max\r\n     *\r\n     * @throws Exception if max is equal or less than min.\r\n     */\r\n    NumericUtils.generateRandomInteger = function (min, max) {\r\n        if (!NumericUtils.isInteger(max) || !NumericUtils.isInteger(min)) {\r\n            throw new Error('Provided max and min must be integers');\r\n        }\r\n        if (max <= min) {\r\n            throw new Error('Provided max must be higher than min');\r\n        }\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    };\r\n    return NumericUtils;\r\n}());\r\nexports.NumericUtils = NumericUtils;\r\n//# sourceMappingURL=NumericUtils.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ArrayUtils_1 = require(\"./ArrayUtils\");\r\nvar StringUtils_1 = require(\"./StringUtils\");\r\nvar ValidationManager_1 = require(\"../managers/ValidationManager\");\r\n/**\r\n * Utilities to perform common object operations\r\n *\r\n * @class\r\n */\r\nvar ObjectUtils = /** @class */ (function () {\r\n    function ObjectUtils() {\r\n    }\r\n    /**\r\n     * Tells if the given value is an object or not\r\n     *\r\n     * @param value A value to check\r\n     *\r\n     * @returns true if the given value is an object, false otherwise\r\n     */\r\n    ObjectUtils.isObject = function (value) {\r\n        return !(ArrayUtils_1.ArrayUtils.isArray(value) || value === null || typeof value !== 'object');\r\n    };\r\n    /**\r\n     * Get the list of literals for a given object. Note that only 1rst depth keys are providen\r\n     *\r\n     * @param object A valid object\r\n     *\r\n     * @returns List of strings with the first level object key names in the same order as defined on the object instance\r\n     */\r\n    ObjectUtils.getKeys = function (object) {\r\n        if (!ObjectUtils.isObject(object)) {\r\n            throw new Error(\"parameter must be an object\");\r\n        }\r\n        return Object.keys(object);\r\n    };\r\n    /**\r\n     * Check if two provided objects are identical.\r\n     * Note that properties order does not alter the comparison. So if two objects\r\n     * have the same properties with exactly the same values, but they appear in a different\r\n     * order on both objects, this method will consider them as equal.\r\n     *\r\n     * @param object1 First object to compare\r\n     * @param object2 Second object to compare\r\n     *\r\n     * @returns true if objects are exactly the same, false if not\r\n     */\r\n    ObjectUtils.isEqualTo = function (object1, object2) {\r\n        var validationManager = new ValidationManager_1.ValidationManager();\r\n        // Both provided values must be objects or an exception will be launched\r\n        if (!ObjectUtils.isObject(object1) || !ObjectUtils.isObject(object2)) {\r\n            throw new Error(\"parameters must be objects\");\r\n        }\r\n        var keys1 = ObjectUtils.getKeys(object1).sort();\r\n        var keys2 = ObjectUtils.getKeys(object2).sort();\r\n        // Compare keys can save a lot of time \r\n        if (!ArrayUtils_1.ArrayUtils.isEqualTo(keys1, keys2)) {\r\n            return false;\r\n        }\r\n        // Loop all the keys and verify values are identical\r\n        for (var i = 0; i < keys1.length; i++) {\r\n            if (!validationManager.isEqualTo(object1[keys1[i]], object2[keys2[i]])) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Check if the provided string is found inside the provided object structure.\r\n     * This method will recursively search inside all the provided object properties and test if the provided string is found.\r\n     * Search will be performed inside any object structures like arrays or other objects. Result will be positive even if\r\n     * any string on the object contains the searched text as a substring.\r\n     *\r\n     * @param object The object where the string will be looked for\r\n     * @param str The string that will be searched on the object\r\n     * @param caseSensitive True (default) to perform a case sensitive search, false otherwise\r\n     *\r\n     * @returns True if the string is found anywhere inside the provided object, false otherwise\r\n     */\r\n    ObjectUtils.isStringFound = function (object, str, caseSensitive) {\r\n        if (caseSensitive === void 0) { caseSensitive = true; }\r\n        if (!ObjectUtils.isObject(object)) {\r\n            throw new Error(\"parameter must be an object\");\r\n        }\r\n        if (!StringUtils_1.StringUtils.isString(str)) {\r\n            throw new Error(\"str is not a string\");\r\n        }\r\n        var keys = ObjectUtils.getKeys(object);\r\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\r\n            var key = keys_1[_i];\r\n            if (StringUtils_1.StringUtils.isString(object[key]) &&\r\n                ((caseSensitive && object[key].indexOf(str) >= 0) ||\r\n                    (!caseSensitive && object[key].toLowerCase().indexOf(str.toLowerCase()) >= 0))) {\r\n                return true;\r\n            }\r\n            if (ArrayUtils_1.ArrayUtils.isArray(object[key]) && ArrayUtils_1.ArrayUtils.isStringFound(object[key], str, caseSensitive)) {\r\n                return true;\r\n            }\r\n            if (ObjectUtils.isObject(object[key]) && ObjectUtils.isStringFound(object[key], str, caseSensitive)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Combine a source object into a destination one by applying a deep merge.\r\n     * All properties from the source will be replaced into the destination object, without altering the\r\n     * destination properties that are not found on source.\r\n     *\r\n     * @param destination The object that will be overriden with the source one. The given instance will be permanently modified.\r\n     * @param source An object to merge into the destination one. This instance will not be modified\r\n     *\r\n     * @returns The destination object instance after being modified by merging the source object into it\r\n     */\r\n    ObjectUtils.merge = function (destination, source) {\r\n        if (!ObjectUtils.isObject(destination) || !ObjectUtils.isObject(source)) {\r\n            throw new Error('destination and source must objects');\r\n        }\r\n        var sourceKeys = ObjectUtils.getKeys(source);\r\n        // Loop all the source object keys and merge them into the destination\r\n        for (var _i = 0, sourceKeys_1 = sourceKeys; _i < sourceKeys_1.length; _i++) {\r\n            var key = sourceKeys_1[_i];\r\n            if (destination.hasOwnProperty(key) &&\r\n                ObjectUtils.isObject(source[key]) &&\r\n                ObjectUtils.isObject(destination[key])) {\r\n                destination[key] = ObjectUtils.merge(destination[key], source[key]);\r\n            }\r\n            else {\r\n                destination[key] = ObjectUtils.clone(source[key]);\r\n            }\r\n        }\r\n        return destination;\r\n    };\r\n    /**\r\n     * Perform a deep copy of the given object.\r\n     *\r\n     * @see https://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript\r\n     *\r\n     * @param object Any language instance like numbers, strings, arrays, objects, etc.. that we want to duplicate.\r\n     *\r\n     * @returns An exact independent copy of the received object, without any shared reference.\r\n     */\r\n    ObjectUtils.clone = function (object) {\r\n        if (object == null || typeof (object) != 'object') {\r\n            return object;\r\n        }\r\n        var result = new object.constructor();\r\n        for (var key in object) {\r\n            if (object.hasOwnProperty(key)) {\r\n                result[key] = ObjectUtils.clone(object[key]);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    return ObjectUtils;\r\n}());\r\nexports.ObjectUtils = ObjectUtils;\r\n//# sourceMappingURL=ObjectUtils.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringUtils_1 = require(\"../utils/StringUtils\");\r\nvar NumericUtils_1 = require(\"../utils/NumericUtils\");\r\nvar ArrayUtils_1 = require(\"../utils/ArrayUtils\");\r\nvar ObjectUtils_1 = require(\"../utils/ObjectUtils\");\r\n/**\r\n * Class that allows us to manage application validation in an encapsulated way.\r\n * We can create as many instances as we want, and each instance will store the validation history and global validation state,\r\n * so we can use this class to validate complex forms or multiple elements globally.\r\n * We can also use tags to sandbox different validation elements or groups togheter.\r\n */\r\nvar ValidationManager = /** @class */ (function () {\r\n    function ValidationManager() {\r\n        /**\r\n         * Stores the current validation state for each one of the defined tags.\r\n         *\r\n         * tag contains the name of the tag for which we are saving the status\r\n         * status can have 3 different values: OK / WARNING / ERROR\r\n         */\r\n        this._validationStatus = [{\r\n                tag: '',\r\n                status: ValidationManager.OK\r\n            }];\r\n        /**\r\n         * Stores a list of all the validation error or warning messages that have happened\r\n         * since the validation manager was created or since the last reset was performed.\r\n         *\r\n         * Each message is stored with its associated tag.\r\n         */\r\n        this._failedMessages = [];\r\n    }\r\n    /**\r\n     * Check the current validation state.\r\n     * Possible return values are ValidationManager.OK, ValidationManager.WARNING or ValidationManager.ERROR\r\n     *\r\n     * @param tags If we want to check the validation state for a specific tag or a list of tags, we can set it here. If we want to\r\n     *        get the global validation state for all the tags we will leave this value empty ''.\r\n     *\r\n     * @returns ValidationManager.OK, ValidationManager.WARNING or ValidationManager.ERROR\r\n     */\r\n    ValidationManager.prototype.getStatus = function (tags) {\r\n        if (tags === void 0) { tags = ''; }\r\n        var maxStatus = 0;\r\n        var tagsList = ArrayUtils_1.ArrayUtils.isArray(tags) ? tags : [tags];\r\n        for (var _i = 0, _a = this._validationStatus; _i < _a.length; _i++) {\r\n            var status_1 = _a[_i];\r\n            if ((tags === '' || tagsList.indexOf(status_1.tag) >= 0) &&\r\n                status_1.status > maxStatus) {\r\n                maxStatus = status_1.status;\r\n            }\r\n        }\r\n        return maxStatus;\r\n    };\r\n    /**\r\n     * Provides a way to perform a fast validation check. Will return true if validation state is ok, or false if validation\r\n     * manager is in a warning or error state.\r\n     *\r\n     * @param tags If we want to check the validation state for a specific tag or a list of tags, we can set it here. If we want to\r\n     *        get the global validation state for all the tags we will leave this value empty ''.\r\n     *\r\n     * @return True if status is ok, false if status is warning or error\r\n     */\r\n    ValidationManager.prototype.ok = function (tags) {\r\n        if (tags === void 0) { tags = ''; }\r\n        return this.getStatus(tags) === ValidationManager.OK;\r\n    };\r\n    /**\r\n     * Provides a way to perform a fast validation check. Will return true if validation manager is in a warning or error state, or false\r\n     * if validation state is ok.\r\n     *\r\n     * @param tags If we want to check the validation state for a specific tag or a list of tags, we can set it here. If we want to\r\n     *        get the global validation state for all the tags we will leave this value empty ''.\r\n     *\r\n     * @return True if status is warning or error, False if status is ok\r\n     */\r\n    ValidationManager.prototype.notOk = function (tags) {\r\n        if (tags === void 0) { tags = ''; }\r\n        return this.getStatus(tags) !== ValidationManager.OK;\r\n    };\r\n    /**\r\n     * Find the first error or warning message that happened since the validation manager was instantiated or\r\n     * since the last reset\r\n     *\r\n     * @param tag If we want to filter only the warning / error messages by tag or list of tags, we can set it here. If we want to\r\n     *        get the first of all messages, no matter which tag was applied, we will leave this value empty ''.\r\n     *\r\n     * @return The first error or warning message or empty string if no message exists\r\n     */\r\n    ValidationManager.prototype.getFirstMessage = function (tags) {\r\n        if (tags === void 0) { tags = ''; }\r\n        var tagsList = ArrayUtils_1.ArrayUtils.isArray(tags) ? tags : [tags];\r\n        for (var _i = 0, _a = this._failedMessages; _i < _a.length; _i++) {\r\n            var message = _a[_i];\r\n            if (tags === '' || tags === null ||\r\n                (ArrayUtils_1.ArrayUtils.isArray(tags) && tags.length === 0) ||\r\n                tagsList.indexOf(message.tag) >= 0) {\r\n                return message.message;\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n    /**\r\n     * Find the latest error or warning message that happened since the validation manager was instantiated or\r\n     * since the last reset\r\n     *\r\n     * @param tag If we want to filter only the warning / error messages by tag or list of tags, we can set it here. If we want to\r\n     *        get the latest of all messages, no matter which tag was applied, we will leave this value empty ''.\r\n     *\r\n     * @return The last error or warning message or empty string if no message exists\r\n     */\r\n    ValidationManager.prototype.getLastMessage = function (tags) {\r\n        if (tags === void 0) { tags = ''; }\r\n        var tagsList = ArrayUtils_1.ArrayUtils.isArray(tags) ? tags : [tags];\r\n        for (var i = this._failedMessages.length - 1; i >= 0; i--) {\r\n            if (tags === '' || tags === null ||\r\n                (ArrayUtils_1.ArrayUtils.isArray(tags) && tags.length === 0) ||\r\n                tagsList.indexOf(this._failedMessages[i].tag) >= 0) {\r\n                return this._failedMessages[i].message;\r\n            }\r\n        }\r\n        return '';\r\n    };\r\n    /**\r\n     * Validation will fail if specified value is not a true boolean value\r\n     *\r\n     * @param value A boolean expression to validate\r\n     * @param errorMessage The error message that will be generated if validation fails\r\n     * @param tags We can define a tag name or list of tags to group the validation results. We can use this tags later to filter validation state\r\n     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning\r\n     *\r\n     * @return False in case the validation fails or true if validation succeeds.\r\n     */\r\n    ValidationManager.prototype.isTrue = function (value, errorMessage, tags, isWarning) {\r\n        if (errorMessage === void 0) { errorMessage = 'value is not true'; }\r\n        if (tags === void 0) { tags = ''; }\r\n        if (isWarning === void 0) { isWarning = false; }\r\n        return this._updateValidationStatus(value === true, errorMessage, tags, isWarning);\r\n    };\r\n    /**\r\n     * Validation will fail if specified value is not a boolean\r\n     *\r\n     * @param value The boolean to validate\r\n     * @param errorMessage The error message that will be generated if validation fails\r\n     * @param tags We can define a tag name or list of tags to group the validation results. We can use this tags later to filter validation state\r\n     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning\r\n     *\r\n     * @return False in case the validation fails or true if validation succeeds.\r\n     */\r\n    ValidationManager.prototype.isBoolean = function (value, errorMessage, tags, isWarning) {\r\n        if (errorMessage === void 0) { errorMessage = 'value is not a boolean'; }\r\n        if (tags === void 0) { tags = ''; }\r\n        if (isWarning === void 0) { isWarning = false; }\r\n        return this._updateValidationStatus((typeof (value) === 'boolean'), errorMessage, tags, isWarning);\r\n    };\r\n    /**\r\n     * Validation will fail if specified value is not numeric\r\n     *\r\n     * @param value The number to validate\r\n     * @param errorMessage The error message that will be generated if validation fails\r\n     * @param tags We can define a tag name or list of tags to group the validation results. We can use this tags later to filter validation state\r\n     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning\r\n     *\r\n     * @return False in case the validation fails or true if validation succeeds.\r\n     */\r\n    ValidationManager.prototype.isNumeric = function (value, errorMessage, tags, isWarning) {\r\n        if (errorMessage === void 0) { errorMessage = 'value is not a number'; }\r\n        if (tags === void 0) { tags = ''; }\r\n        if (isWarning === void 0) { isWarning = false; }\r\n        return this._updateValidationStatus(NumericUtils_1.NumericUtils.isNumeric(value), errorMessage, tags, isWarning);\r\n    };\r\n    /**\r\n     * Validation will fail if specified value is not numeric and between the two provided values.\r\n     *\r\n     * @param value The number to validate\r\n     * @param min The minimum accepted value (included)\r\n     * @param max The maximum accepted value (included)\r\n     * @param errorMessage The error message that will be generated if validation fails\r\n     * @param tags We can define a tag name or list of tags to group the validation results. We can use this tags later to filter validation state\r\n     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning\r\n     *\r\n     * @return False in case the validation fails or true if validation succeeds.\r\n     */\r\n    ValidationManager.prototype.isNumericBetween = function (value, min, max, errorMessage, tags, isWarning) {\r\n        if (errorMessage === void 0) { errorMessage = 'value is not between min and max'; }\r\n        if (tags === void 0) { tags = ''; }\r\n        if (isWarning === void 0) { isWarning = false; }\r\n        return this._updateValidationStatus(NumericUtils_1.NumericUtils.isNumeric(value) && value >= min && value <= max, errorMessage, tags, isWarning);\r\n    };\r\n    /**\r\n     * Validation will fail if specified value is not a string\r\n     *\r\n     * @param $value The element to validate\r\n     * @param errorMessage The error message that will be generated if validation fails\r\n     * @param tags We can define a tag name or list of tags to group the validation results. We can use this tags later to filter validation state\r\n     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning\r\n     *\r\n     * @return False in case the validation fails or true if validation succeeds.\r\n     */\r\n    ValidationManager.prototype.isString = function (value, errorMessage, tags, isWarning) {\r\n        if (errorMessage === void 0) { errorMessage = 'value is not a string'; }\r\n        if (tags === void 0) { tags = ''; }\r\n        if (isWarning === void 0) { isWarning = false; }\r\n        return this._updateValidationStatus(StringUtils_1.StringUtils.isString(value), errorMessage, tags, isWarning);\r\n    };\r\n    /**\r\n     * Validation will fail if specified value is not an url\r\n     *\r\n     * @param value The element to validate\r\n     * @param errorMessage The error message that will be generated if validation fails\r\n     * @param tags We can define a tag name or list of tags to group the validation results. We can use this tags later to filter validation state\r\n     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning\r\n     *\r\n     * @return False in case the validation fails or true if validation succeeds.\r\n     */\r\n    ValidationManager.prototype.isUrl = function (value, errorMessage, tags, isWarning) {\r\n        if (errorMessage === void 0) { errorMessage = 'value is not an URL'; }\r\n        if (tags === void 0) { tags = ''; }\r\n        if (isWarning === void 0) { isWarning = false; }\r\n        return this._updateValidationStatus(StringUtils_1.StringUtils.isUrl(value), errorMessage, tags, isWarning);\r\n    };\r\n    /**\r\n     * Validation will fail if specified value is not an array\r\n     *\r\n     * @param value The array to validate\r\n     * @param errorMessage The error message that will be generated if validation fails\r\n     * @param tags We can define a tag name or list of tags to group the validation results. We can use this tags later to filter validation state\r\n     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning\r\n     *\r\n     * @return False in case the validation fails or true if validation succeeds.\r\n     */\r\n    ValidationManager.prototype.isArray = function (value, errorMessage, tags, isWarning) {\r\n        if (errorMessage === void 0) { errorMessage = 'value is not an array'; }\r\n        if (tags === void 0) { tags = ''; }\r\n        if (isWarning === void 0) { isWarning = false; }\r\n        return this._updateValidationStatus(ArrayUtils_1.ArrayUtils.isArray(value), errorMessage, tags, isWarning);\r\n    };\r\n    /**\r\n     * Validation will fail if specified value is not an object\r\n     *\r\n     * @param value The object to validate\r\n     * @param errorMessage The error message that will be generated if validation fails\r\n     * @param tags We can define a tag name or list of tags to group the validation results. We can use this tags later to filter validation state\r\n     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning\r\n     *\r\n     * @return False in case the validation fails or true if validation succeeds.\r\n     */\r\n    ValidationManager.prototype.isObject = function (value, errorMessage, tags, isWarning) {\r\n        if (errorMessage === void 0) { errorMessage = 'value is not an object'; }\r\n        if (tags === void 0) { tags = ''; }\r\n        if (isWarning === void 0) { isWarning = false; }\r\n        return this._updateValidationStatus(ObjectUtils_1.ObjectUtils.isObject(value), errorMessage, tags, isWarning);\r\n    };\r\n    /**\r\n     * Validation will fail if specified text is empty.<br>\r\n     * See Stringutils.isEmpty to understand what is considered as an empty text\r\n     *\r\n     * @param value A text that must not be empty.\r\n     * @param emptyChars Optional array containing a list of string values that will be considered as empty for the given string. This can be useful in some cases when we want to consider a string like 'NULL' as an empty string.\r\n     * @param errorMessage The error message that will be generated if validation fails\r\n     * @param tags We can define a tag name or list of tags to group the validation results. We can use this tags later to filter validation state\r\n     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning\r\n     *\r\n     * @see Stringutils.isEmpty\r\n     *\r\n     * @return False in case the validation fails or true if validation succeeds.\r\n     */\r\n    ValidationManager.prototype.isFilledIn = function (value, emptyChars, errorMessage, tags, isWarning) {\r\n        if (emptyChars === void 0) { emptyChars = []; }\r\n        if (errorMessage === void 0) { errorMessage = 'value is required'; }\r\n        if (tags === void 0) { tags = ''; }\r\n        if (isWarning === void 0) { isWarning = false; }\r\n        return this._updateValidationStatus(!StringUtils_1.StringUtils.isEmpty(value, emptyChars), errorMessage, tags, isWarning);\r\n    };\r\n    ValidationManager.prototype.isDate = function () {\r\n        // TODO\r\n        return false;\r\n    };\r\n    ValidationManager.prototype.isMail = function () {\r\n        // TODO\r\n        return false;\r\n    };\r\n    /**\r\n     * Validation will fail if specified elements are not identical.\r\n     *\r\n     * @param value First of the two objects to compare. Almost any type can be provided: ints, strings, arrays...\r\n     * @param value2 Second of the two objects to compare. Almost any type can be provided: ints, strings, arrays...\r\n     * @param errorMessage The error message that will be generated if validation fails\r\n     * @param tags We can define a tag name or list of tags to group the validation results. We can use this tags later to filter validation state\r\n     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning\r\n     *\r\n     * @return False in case the validation fails or true if validation succeeds.\r\n     */\r\n    ValidationManager.prototype.isEqualTo = function (value, value2, errorMessage, tags, isWarning) {\r\n        if (errorMessage === void 0) { errorMessage = 'values are not equal'; }\r\n        if (tags === void 0) { tags = ''; }\r\n        if (isWarning === void 0) { isWarning = false; }\r\n        var res = false;\r\n        // Compare elements depending on its type\r\n        if (ArrayUtils_1.ArrayUtils.isArray(value) && ArrayUtils_1.ArrayUtils.isArray(value2)) {\r\n            res = ArrayUtils_1.ArrayUtils.isEqualTo(value, value2);\r\n        }\r\n        else {\r\n            if (ObjectUtils_1.ObjectUtils.isObject(value) && ObjectUtils_1.ObjectUtils.isObject(value2)) {\r\n                res = ObjectUtils_1.ObjectUtils.isEqualTo(value, value2);\r\n            }\r\n            else {\r\n                if (value === value2) {\r\n                    res = true;\r\n                }\r\n            }\r\n        }\r\n        return this._updateValidationStatus(res, errorMessage, tags, isWarning);\r\n    };\r\n    ValidationManager.prototype.isMinimumWords = function (string) {\r\n        // TODO\r\n        return string === '';\r\n    };\r\n    ValidationManager.prototype.isNIF = function (string) {\r\n        // TODO\r\n        return string === '';\r\n    };\r\n    ValidationManager.prototype.isMinimumLength = function (string) {\r\n        // TODO\r\n        return string === '';\r\n    };\r\n    ValidationManager.prototype.isMaximumLength = function (string) {\r\n        // TODO\r\n        return string === '';\r\n    };\r\n    ValidationManager.prototype.isPostalCode = function (string) {\r\n        // TODO\r\n        return string === '';\r\n    };\r\n    ValidationManager.prototype.isPhone = function (string) {\r\n        // TODO\r\n        return string === '';\r\n    };\r\n    ValidationManager.prototype.isHtmlFormValid = function (string) {\r\n        // TODO\r\n        return string === '';\r\n    };\r\n    /**\r\n     * Reinitialize the validation status.\r\n     *\r\n     * This is normally called at the beginning of every global validation we perform. It will reset all the validation\r\n     * errors on this class and for all tags, so we can re validate whatever we need to.\r\n     *\r\n     * @returns void\r\n     */\r\n    ValidationManager.prototype.reset = function () {\r\n        this._validationStatus = [{\r\n                tag: '',\r\n                status: ValidationManager.OK\r\n            }];\r\n        this._failedMessages = [];\r\n    };\r\n    /**\r\n     * Update the class validation Status depending on the provided error message.\r\n     *\r\n     * @param result the result of the validation\r\n     * @param errorMessage The error message that's been generated from a previously executed validation method\r\n     * @param tags The tag or list of tags that have been defiend for the validation value\r\n     * @param isWarning Tells if the validation fail will be processed as a validation error or a validation warning\r\n     *\r\n     * @return True if received errorMessage was '' (validation passed) or false if some error message was received (validation failed)\r\n     */\r\n    ValidationManager.prototype._updateValidationStatus = function (result, errorMessage, tags, isWarning) {\r\n        if (tags === void 0) { tags = ''; }\r\n        if (!result) {\r\n            // If specified tags do not exist, we will create them\r\n            var tagsList = ArrayUtils_1.ArrayUtils.isArray(tags) ? tags : [tags];\r\n            for (var _i = 0, tagsList_1 = tagsList; _i < tagsList_1.length; _i++) {\r\n                var t = tagsList_1[_i];\r\n                var tagFound = false;\r\n                for (var _a = 0, _b = this._validationStatus; _a < _b.length; _a++) {\r\n                    var status_2 = _b[_a];\r\n                    if (status_2.tag === t) {\r\n                        tagFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (!tagFound) {\r\n                    this._validationStatus.push({\r\n                        tag: String(t),\r\n                        status: ValidationManager.OK\r\n                    });\r\n                }\r\n            }\r\n            // We must find the specified tags and change their validation status\r\n            for (var _c = 0, tagsList_2 = tagsList; _c < tagsList_2.length; _c++) {\r\n                var t = tagsList_2[_c];\r\n                for (var i = 0; i < this._validationStatus.length; i++) {\r\n                    if (this._validationStatus[i].tag === t) {\r\n                        this._failedMessages.push({ tag: t, message: errorMessage });\r\n                        this._validationStatus[i].status =\r\n                            (isWarning && this._validationStatus[i].status != ValidationManager.ERROR) ?\r\n                                ValidationManager.WARNING :\r\n                                ValidationManager.ERROR;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Constant that defines the correct validation status\r\n     */\r\n    ValidationManager.OK = 0;\r\n    /**\r\n     * Constant that defines the warning validation status\r\n     */\r\n    ValidationManager.WARNING = 1;\r\n    /**\r\n     * Constant that defines the error validation status\r\n     */\r\n    ValidationManager.ERROR = 2;\r\n    return ValidationManager;\r\n}());\r\nexports.ValidationManager = ValidationManager;\r\n//# sourceMappingURL=ValidationManager.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringUtils_1 = require(\"../utils/StringUtils\");\r\nvar ObjectUtils_1 = require(\"../utils/ObjectUtils\");\r\nvar ArrayUtils_1 = require(\"../utils/ArrayUtils\");\r\nvar NumericUtils_1 = require(\"../utils/NumericUtils\");\r\n/**\r\n * HashMapObject abstraction\r\n */\r\nvar HashMapObject = /** @class */ (function () {\r\n    /**\r\n     * An Object that defines a sorted collection of key/value pairs and all their related operations.\r\n     *\r\n     * @param data A value that will be used to initialize the HashMapObject. It can be an object instance\r\n     * (where each key/value will be directly assigned to the HashMap), or a plain array in which case the keys will be\r\n     * created from each element numeric index\r\n     */\r\n    function HashMapObject(data) {\r\n        if (data === void 0) { data = null; }\r\n        /**\r\n         * Javascript objects specification does not guarantee object keys order. So we must keep\r\n         * a sepparate array with the currently sorted hashmap keys to be sure that sorting is guaranteed\r\n         */\r\n        this._keys = [];\r\n        /**\r\n         * Structure that contains the HashMapObject data\r\n         * Note that javascript objects do not guarantee key order, so we must also keep a\r\n         * sepparate array with the sorted list of keys\r\n         */\r\n        this._data = {};\r\n        /**\r\n         * Stores the number of elements inside the HashMapObject\r\n         */\r\n        this._length = 0;\r\n        if (data == null) {\r\n            return;\r\n        }\r\n        if (ObjectUtils_1.ObjectUtils.isObject(data)) {\r\n            for (var key in data) {\r\n                this.set(String(key), data[key]);\r\n            }\r\n        }\r\n        else {\r\n            if (ArrayUtils_1.ArrayUtils.isArray(data)) {\r\n                var dataCount = data.length;\r\n                for (var i = 0; i < dataCount; i++) {\r\n                    this.set(String(i), data[i]);\r\n                }\r\n            }\r\n            else {\r\n                throw new Error('HashMapObject: invalid data');\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Define a key / value pair and add it to the collection.\r\n     * If the key already exists, value will be replaced.\r\n     *\r\n     * @param key A string that labels the provided value\r\n     * @param value A value to be stored with the provided key\r\n     *\r\n     * @return The value after being stored to the collection\r\n     */\r\n    HashMapObject.prototype.set = function (key, value) {\r\n        // Check if key is a non empty string.\r\n        // We use the same logic as StringUtils.isEmpty but with some simplification for better performance\r\n        // This should be a call to this._validateKeyFormat but we inline it here to get a big performance improvement\r\n        if (StringUtils_1.StringUtils.isString(key) && key.replace(/ |\\n|\\r|\\t/gi, '') !== '') {\r\n            if (!this._data.hasOwnProperty(key)) {\r\n                this._keys.push(key);\r\n                this._length++;\r\n            }\r\n            return this._data[key] = value;\r\n        }\r\n        throw new Error('HashMapObject: key must be a non empty string');\r\n    };\r\n    /**\r\n     * Get the number of key/value pairs that are currently stored on this HashMapObject instance\r\n     *\r\n     * @return integer The number of items inside the collection\r\n     */\r\n    HashMapObject.prototype.length = function () {\r\n        return this._length;\r\n    };\r\n    /**\r\n     * Get the value that is associated to a key from an existing key/value pair\r\n     *\r\n     * @param key The key we are looking for\r\n     *\r\n     * @throws error If key does not exist or is invalid\r\n     * @return The value that is associated to the provided key\r\n     */\r\n    HashMapObject.prototype.get = function (key) {\r\n        if (this._data.hasOwnProperty(key)) {\r\n            return this._data[key];\r\n        }\r\n        throw new Error('HashMapObject->get: key does not exist or is invalid');\r\n    };\r\n    /**\r\n     * Get the value that is located at a certain position at the ordered list of key/pair values\r\n     *\r\n     * @param index The position we are looking for\r\n     *\r\n     * @throws Error If index does not exist or is invalid\r\n     * @return The value that is located at the specified position\r\n     */\r\n    HashMapObject.prototype.getAt = function (index) {\r\n        if (typeof index === 'number' && NumericUtils_1.NumericUtils.isInteger(index) && index >= 0 && index < this._length) {\r\n            return this._data[this._keys[index]];\r\n        }\r\n        throw new Error('HashMapObject->getAt: index does not exist or is invalid');\r\n    };\r\n    /**\r\n     * Get a list with all the keys from the HashMapObject with the same order as they are stored.\r\n     *\r\n     * @return List of strings containing all the HashMapObject sorted keys.\r\n     */\r\n    HashMapObject.prototype.getKeys = function () {\r\n        return this._keys;\r\n    };\r\n    /**\r\n     * Get a list with all the values from the HashMapObject with the same order as they are stored.\r\n     *\r\n     * @return List of elements containing all the HashMapObject sorted values\r\n     */\r\n    HashMapObject.prototype.getValues = function () {\r\n        var result = [];\r\n        // Keys must be strictly converted to strings\r\n        for (var i = 0; i < this._keys.length; i++) {\r\n            result.push(this.get(this._keys[i]));\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Tells if the provided value matches a key that's stored inside the HashMapObject\r\n     *\r\n     * @param A value to find on the currently stored keys.\r\n     *\r\n     * @return True if the provided value is a valid HashMap key, false in any other case\r\n     */\r\n    HashMapObject.prototype.isKey = function (key) {\r\n        return StringUtils_1.StringUtils.isString(key) && this._data.hasOwnProperty(key);\r\n    };\r\n    /**\r\n     * Delete a key/value pair from the HashMapObject, given it's key.\r\n     *\r\n     * @param key The key for the key/value pair we want to delete\r\n     *\r\n     * @throws Error\r\n     * @return The value from the key/value pair that's been deleted.\r\n     */\r\n    HashMapObject.prototype.remove = function (key) {\r\n        if (this._data.hasOwnProperty(key)) {\r\n            var value = this._data[key];\r\n            delete this._data[key];\r\n            delete this._keys[this._keys.indexOf(key)];\r\n            this._length--;\r\n            return value;\r\n        }\r\n        this._validateKeyFormat(key);\r\n        throw new Error('HashMapObject->rename: key does not exist ' + key);\r\n    };\r\n    /**\r\n     * Change the name for an existing key\r\n     *\r\n     * @param key The name we want to change\r\n     * @param newKey The new name that will replace the previous one\r\n     *\r\n     * @throws Error\r\n     * @return True if rename was successful\r\n     */\r\n    HashMapObject.prototype.rename = function (key, newKey) {\r\n        this._validateKeyFormat(key);\r\n        this._validateKeyFormat(newKey);\r\n        if (this.isKey(newKey)) {\r\n            throw new Error('HashMapObject->rename: newKey ' + newKey + ' already exists');\r\n        }\r\n        if (this.isKey(key)) {\r\n            var result = {};\r\n            for (var i = 0; i < this._keys.length; i++) {\r\n                if (this._keys[i] == key) {\r\n                    result[newKey] = this._data[key];\r\n                }\r\n                else {\r\n                    result[this._keys[i]] = this._data[this._keys[i]];\r\n                }\r\n            }\r\n            this._data = result;\r\n            this._keys[this._keys.indexOf(key)] = newKey;\r\n            return true;\r\n        }\r\n        else {\r\n            throw new Error('HashMapObject->rename: key does not exist ' + key);\r\n        }\r\n    };\r\n    /**\r\n     * Exchange the positions for two key/value pairs on the HashMapObject sorted elements list\r\n     *\r\n     * @param key1 The first key to exchange\r\n     * @param key2 The second key to exchange\r\n     *\r\n     * @return True if the two key/value pairs positions were correctly exchanged\r\n     * @throws Error If any of the two provided keys does not exist or is invalid\r\n     */\r\n    HashMapObject.prototype.swap = function (key1, key2) {\r\n        this._validateKeyFormat(key1);\r\n        this._validateKeyFormat(key2);\r\n        if (!this.isKey(key1)) {\r\n            throw new Error('HashMapObject->swap: key1 does not exist ' + key1);\r\n        }\r\n        if (!this.isKey(key2)) {\r\n            throw new Error('HashMapObject->swap: key2 does not exist ' + key2);\r\n        }\r\n        var result = {};\r\n        var key1Value = this.get(key1);\r\n        var key2Value = this.get(key2);\r\n        for (var i = 0; i < this._keys.length; i++) {\r\n            switch (this._keys[i]) {\r\n                case key1:\r\n                    result[key2] = key2Value;\r\n                    break;\r\n                case key2:\r\n                    result[key1] = key1Value;\r\n                    break;\r\n                default:\r\n                    result[this._keys[i]] = this._data[this._keys[i]];\r\n                    break;\r\n            }\r\n        }\r\n        this._data = result;\r\n        // Swap keys\r\n        var key1Index = this._keys.indexOf(key1);\r\n        var key2Index = this._keys.indexOf(key2);\r\n        this._keys[key1Index] = key2;\r\n        this._keys[key2Index] = key1;\r\n        return true;\r\n    };\r\n    /**\r\n     * Sort the key/value pairs inside the HashMapObject by their key values.\r\n     *\r\n     * @param method Defines sort mode: HashMapObject.SORT_STRING or HashMapObject.SORT_NUMERIC\r\n     * @param order Defines the order for the sorted elements: HashMapObject.SORT_ORDER_ASCENDING (default) or HashMapObject.SORT_ORDER_DESCENDING\r\n     *\r\n     * @throws Error\r\n     * @return True if sort was successful false on failure\r\n     */\r\n    HashMapObject.prototype.sortByKey = function (method, order) {\r\n        if (method === void 0) { method = HashMapObject.SORT_METHOD_STRING; }\r\n        if (order === void 0) { order = HashMapObject.SORT_ORDER_ASCENDING; }\r\n        switch (method + order) {\r\n            case HashMapObject.SORT_METHOD_STRING + HashMapObject.SORT_ORDER_ASCENDING:\r\n                this._keys.sort();\r\n                break;\r\n            case HashMapObject.SORT_METHOD_STRING + HashMapObject.SORT_ORDER_DESCENDING:\r\n                this._keys.sort();\r\n                this._keys.reverse();\r\n                break;\r\n            case HashMapObject.SORT_METHOD_NUMERIC + HashMapObject.SORT_ORDER_ASCENDING:\r\n                this._keys.sort(function (a, b) { return a - b; });\r\n                break;\r\n            case HashMapObject.SORT_METHOD_NUMERIC + HashMapObject.SORT_ORDER_DESCENDING:\r\n                this._keys.sort(function (a, b) { return b - a; });\r\n                break;\r\n            default:\r\n                throw new Error('HashMapObject->sortByKey: Unknown sort method or order');\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Remove and get the first element value from the HashMapObject sorted list\r\n     *\r\n     * @throws Error If the HashMapObject is empty\r\n     * @return The value on the first element of the list\r\n     */\r\n    HashMapObject.prototype.shift = function () {\r\n        if (this._length <= 0) {\r\n            throw new Error('HashMapObject->shift: No elements');\r\n        }\r\n        this._length--;\r\n        var result = this._data[this._keys[0]];\r\n        delete this._data[this._keys[0]];\r\n        this._keys.shift();\r\n        return result;\r\n    };\r\n    /**\r\n     * Remove and get the last element value from the HashMapObject sorted list\r\n     *\r\n     * @throws Error If the HashMapObject is empty\r\n     * @return The value on the last element of the list\r\n     */\r\n    HashMapObject.prototype.pop = function () {\r\n        if (this._length <= 0) {\r\n            throw new Error('HashMapObject->pop: No elements');\r\n        }\r\n        this._length--;\r\n        var result = this._data[this._keys[this._length]];\r\n        delete this._data[this._keys[this._length]];\r\n        this._keys.pop();\r\n        return result;\r\n    };\r\n    /**\r\n     * Reverse the order of the HashMapObject elements\r\n     *\r\n     * @return void\r\n     */\r\n    HashMapObject.prototype.reverse = function () {\r\n        this._keys.reverse();\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks that specified key value has a valid format (Non empty string)\r\n     *\r\n     * @param key The key value to test\r\n     *\r\n     * @throws Error\r\n     *\r\n     * @return void\r\n     */\r\n    HashMapObject.prototype._validateKeyFormat = function (key) {\r\n        // Check if key is a non empty string.\r\n        // We use the same logic as StringUtils.isEmpty but with some simplification for better performance\r\n        if (!StringUtils_1.StringUtils.isString(key) || key.replace(/ |\\n|\\r|\\t/gi, '') == '') {\r\n            throw new Error('HashMapObject: key must be a non empty string');\r\n        }\r\n    };\r\n    /**\r\n     * Sort mode that compares values as strings (alphabetically)\r\n     */\r\n    HashMapObject.SORT_METHOD_STRING = 'SORT_METHOD_STRING';\r\n    /**\r\n     * Sort mode that compares values as numbers (Avoid using it with non numeric values)\r\n     */\r\n    HashMapObject.SORT_METHOD_NUMERIC = 'SORT_METHOD_NUMERIC';\r\n    /**\r\n     * Defines that elements will be sorted upward\r\n     */\r\n    HashMapObject.SORT_ORDER_ASCENDING = 'SORT_ORDER_ASCENDING';\r\n    /**\r\n     * Defines that elements will be sorted downward\r\n     */\r\n    HashMapObject.SORT_ORDER_DESCENDING = 'SORT_ORDER_DESCENDING';\r\n    return HashMapObject;\r\n}());\r\nexports.HashMapObject = HashMapObject;\r\n//# sourceMappingURL=HashMapObject.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * Class that defines the base http request to be used with http manager\r\n */\r\nvar HTTPManagerBaseRequest = /** @class */ (function () {\r\n    function HTTPManagerBaseRequest(url, resultFormat, timeout) {\r\n        if (resultFormat === void 0) { resultFormat = 'STRING'; }\r\n        if (timeout === void 0) { timeout = 0; }\r\n        /**\r\n         * Specifies how the result of the request will be transformed. Possible values are:\r\n         * - HTTPManagerBaseRequest.STRING (See the constant docs for more info)\r\n         * - HTTPManagerBaseRequest.JSON (See the constant docs for more info)\r\n         */\r\n        this.resultFormat = HTTPManagerBaseRequest.STRING;\r\n        /**\r\n         * If set to true, any global POST parameters that may be defined by the http manager which executes this request will be ignored.\r\n         * (exclusively for this request only)\r\n         */\r\n        this.ignoreGlobalPostParams = false;\r\n        /**\r\n         * A method to be executed inmediately after the request execution finishes successfully (200 ok code).\r\n         * The callback function must have the following signature:\r\n         * (response) => void\r\n         * Where the response will be formatted according to how resultFormat is defined\r\n         */\r\n        this.successCallback = function () { };\r\n        /**\r\n         * A method to be executed if an error happens to the request execution.\r\n         * The callback function must have the following signature:\r\n         * (errorMsg:string, errorCode:number, response: string) => void\r\n         *\r\n         * errorMsg will contain the error text, errorCode will contain the numeric error http value and response will contain\r\n         * the main request response body\r\n         */\r\n        this.errorCallback = function () { };\r\n        /**\r\n         * A method to be executed always when the request finishes, even successfully or with an error.\r\n         * (This will be the very last method to be executed, allways after success or error callbacks).\r\n         *\r\n         * The callback function must have the following signature:\r\n         * () => void\r\n         */\r\n        this.finallyCallback = function () { };\r\n        this.url = url;\r\n        this.resultFormat = resultFormat;\r\n        this.timeout = timeout;\r\n    }\r\n    /**\r\n     * Defines the string format for the result format property.\r\n     * The result of request with this resultFormat will be returned as a raw string containing the exact request response body.\r\n     */\r\n    HTTPManagerBaseRequest.STRING = 'STRING';\r\n    /**\r\n     * Defines the json format for the result format property.\r\n     * The result of request with this resultFormat will be a native type which will have been decoded from the request response\r\n     * body (expecting it to be a valid json string).\r\n     */\r\n    HTTPManagerBaseRequest.JSON = 'JSON';\r\n    return HTTPManagerBaseRequest;\r\n}());\r\nexports.HTTPManagerBaseRequest = HTTPManagerBaseRequest;\r\n//# sourceMappingURL=HTTPManagerBaseRequest.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HashMapObject_1 = require(\"./HashMapObject\");\r\nvar StringUtils_1 = require(\"../utils/StringUtils\");\r\nvar ArrayUtils_1 = require(\"../utils/ArrayUtils\");\r\nvar ValidationManager_1 = require(\"../managers/ValidationManager\");\r\nvar EncodingUtils_1 = require(\"../utils/EncodingUtils\");\r\n/**\r\n * Object that stores java properties file format data\r\n */\r\nvar JavaPropertiesObject = /** @class */ (function (_super) {\r\n    __extends(JavaPropertiesObject, _super);\r\n    /**\r\n     * Create a JavaPropertiesObject instance. Java properties is a text file format that stores data\r\n     * into text files with information that is arranged as key/value pairs.\r\n     * For example: tag1=value1\r\n     *\r\n     * @param string String containing the contents of a .properties Java file.\r\n     * Note that string must be encoded with ISO-8859-1 and strictly follow the Java\r\n     * properties file format (Otherwise results won't be correct).\r\n     *\r\n     * @see HashMapObject\r\n     * @return The java properties object with data accessible as key/value pairs.\r\n     */\r\n    function JavaPropertiesObject(string) {\r\n        if (string === void 0) { string = ''; }\r\n        var _this = _super.call(this) || this;\r\n        if (!StringUtils_1.StringUtils.isString(string)) {\r\n            throw new Error('value must be a string');\r\n        }\r\n        if (string === '') {\r\n            return _this;\r\n        }\r\n        // Validate received string\r\n        if (string.length < 2 || string.substr(0, 1) === '=' || string.indexOf('=') < 0 && string.indexOf(':') < 0) {\r\n            throw new Error('invalid properties format');\r\n        }\r\n        var key = '';\r\n        var value = '';\r\n        var isWaitingOtherLine = false;\r\n        // Generate an array with the properties lines, ignoring blank lines and comments\r\n        var lines = StringUtils_1.StringUtils.getLines(string, [/\\s+/g, / *#.*| *!.*/g]);\r\n        for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {\r\n            var line = lines_1[_i];\r\n            // Remove all blank spaces at the beginning of the line\r\n            line = StringUtils_1.StringUtils.trimLeft(line);\r\n            if (isWaitingOtherLine) {\r\n                value += EncodingUtils_1.EncodingUtils.unicodeEscapedCharsToUtf8(line);\r\n            }\r\n            else {\r\n                // Find the key/value divider index\r\n                var tmpLine = StringUtils_1.StringUtils.replace(line, ['\\\\=', '\\\\:'], 'xx');\r\n                var keyDividerIndex = Math.min((tmpLine + '=').indexOf('='), (tmpLine + ':').indexOf(':'));\r\n                // Extract the key from the line\r\n                key = line.substring(0, keyDividerIndex).trim();\r\n                // Add a space to the end if the last character is a \\\r\n                if (key.substr(key.length - 1, 1) === '\\\\') {\r\n                    key += ' ';\r\n                }\r\n                key = StringUtils_1.StringUtils.replace(key, ['\\\\\\\\', '\\\\ ', '\\\\#', '\\\\!', '\\\\=', '\\\\:'], ['\\\\', ' ', '#', '!', '=', ':']);\r\n                // Extract the value from the line\r\n                value = StringUtils_1.StringUtils.trimLeft(line.substring(keyDividerIndex + 1, line.length));\r\n            }\r\n            // Unescape escaped slashes and spaces on the value\r\n            value = StringUtils_1.StringUtils.replace(value, ['\\\\\\\\', '\\\\ ', '\\\\r\\\\n', '\\\\n', '\\\\t'], ['\\\\u005C', ' ', \"\\r\\n\", \"\\n\", \"\\t\"]);\r\n            // Check if ends with single '\\'\r\n            if (value.substr(value.length - 1) == '\\\\') {\r\n                // Remove trailing backslash\r\n                value = value.substring(0, value.length - 1);\r\n                isWaitingOtherLine = true;\r\n            }\r\n            else {\r\n                isWaitingOtherLine = false;\r\n                // Decode unicode characters\r\n                value = EncodingUtils_1.EncodingUtils.unicodeEscapedCharsToUtf8(value);\r\n            }\r\n            if (!_this._data.hasOwnProperty(key)) {\r\n                _this._keys.push(key);\r\n            }\r\n            _this._data[key] = value;\r\n        }\r\n        _this._length = _this._keys.length;\r\n        return _this;\r\n    }\r\n    /**\r\n     * Tells if the given value contains valid Java Properties data information or not\r\n     *\r\n     * @param value A value to check (a string or a JavaPropertiesObject instance)\r\n     *\r\n     * @return true if the given value contains valid Java Properties data, false otherwise\r\n     */\r\n    JavaPropertiesObject.isJavaProperties = function (value) {\r\n        // test that received string contains valid properties info\r\n        try {\r\n            var p = new JavaPropertiesObject(value);\r\n            return p.length() >= 0;\r\n        }\r\n        catch (e) {\r\n            try {\r\n                return (value != null) && (value instanceof JavaPropertiesObject);\r\n            }\r\n            catch (e) {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check if the provided java properties is identical to this instance\r\n     * Only data is compared: Any comment that is found on both provided properties will be ignored.\r\n     *\r\n     * @param properties java properties value to compare (a string or a JavaPropertiesObject instance)\r\n     * @param strictOrder If set to true, both properties elements must have the same keys with the same order. Otherwise differences in key sorting will be accepted\r\n     *\r\n     * @return true if both java properties data is exactly the same, false if not\r\n     */\r\n    JavaPropertiesObject.prototype.isEqualTo = function (properties, strictOrder) {\r\n        if (strictOrder === void 0) { strictOrder = false; }\r\n        var objectToCompare = null;\r\n        try {\r\n            objectToCompare = new JavaPropertiesObject(properties);\r\n        }\r\n        catch (e) {\r\n            try {\r\n                if (properties instanceof JavaPropertiesObject) {\r\n                    objectToCompare = properties;\r\n                }\r\n            }\r\n            catch (e) {\r\n                // Nothing to do\r\n            }\r\n        }\r\n        if (objectToCompare == null) {\r\n            throw new Error('properties does not contain valid java properties data');\r\n        }\r\n        var thisKeys = this.getKeys();\r\n        var keysToCompare = objectToCompare.getKeys();\r\n        if (thisKeys.length != keysToCompare.length || (strictOrder && !ArrayUtils_1.ArrayUtils.isEqualTo(thisKeys, keysToCompare))) {\r\n            return false;\r\n        }\r\n        var validationManager = new ValidationManager_1.ValidationManager();\r\n        for (var _i = 0, thisKeys_1 = thisKeys; _i < thisKeys_1.length; _i++) {\r\n            var key = thisKeys_1[_i];\r\n            if (!strictOrder && !objectToCompare.isKey(key)) {\r\n                return false;\r\n            }\r\n            if (!validationManager.isEqualTo(this.get(key), objectToCompare.get(key))) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Generate the textual representation for the java properties data stored on this object.\r\n     * The output of this method is ready to be stored on a physical .properties file.\r\n     *\r\n     * @return A valid Java .properties string ready to be stored on a .properties file\r\n     */\r\n    JavaPropertiesObject.prototype.toString = function () {\r\n        var result = [];\r\n        var keys = this.getKeys();\r\n        var keysCount = keys.length;\r\n        for (var i = 0; i < keysCount; i++) {\r\n            var key = StringUtils_1.StringUtils.replace(keys[i], ['\\\\', ' ', '#', '!', '=', ':'], ['\\\\\\\\', '\\\\ ', '\\\\#', '\\\\!', '\\\\=', '\\\\:']);\r\n            var value = StringUtils_1.StringUtils.replace(this.get(keys[i]), ['\\\\', ' ', \"\\r\\n\", \"\\n\", \"\\t\"], ['\\\\\\\\', '\\\\ ', '\\\\r\\\\n', '\\\\n', '\\\\t']);\r\n            result.push(key + '=' + EncodingUtils_1.EncodingUtils.utf8ToUnicodeEscapedChars(value));\r\n        }\r\n        return result.join(\"\\r\\n\");\r\n    };\r\n    return JavaPropertiesObject;\r\n}(HashMapObject_1.HashMapObject));\r\nexports.JavaPropertiesObject = JavaPropertiesObject;\r\n//# sourceMappingURL=JavaPropertiesObject.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HTTPManagerBaseRequest_1 = require(\"./HTTPManagerBaseRequest\");\r\n/**\r\n * Class that defines a GET http request, to be used by HttpManager\r\n */\r\nvar HTTPManagerGetRequest = /** @class */ (function (_super) {\r\n    __extends(HTTPManagerGetRequest, _super);\r\n    function HTTPManagerGetRequest() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * A list of key / value pairs that will be used as parameters for this request\r\n         */\r\n        _this.parameters = {};\r\n        return _this;\r\n    }\r\n    return HTTPManagerGetRequest;\r\n}(HTTPManagerBaseRequest_1.HTTPManagerBaseRequest));\r\nexports.HTTPManagerGetRequest = HTTPManagerGetRequest;\r\n//# sourceMappingURL=HTTPManagerGetRequest.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringUtils_1 = require(\"./StringUtils\");\r\n/**\r\n * Utilities related to string and text character encoding,\r\n * converting between formats, and perform common encoding operations.\r\n */\r\nvar EncodingUtils = /** @class */ (function () {\r\n    function EncodingUtils() {\r\n    }\r\n    /**\r\n     * Convert a string with unicode escaped sequence of characters (\\u00ed, \\u0110, ....) to an utf8 string.\r\n     *\r\n     * @param string A string containing unicode escaped characters.\r\n     *\r\n     * @returns An utf8 string conversion of the unicode encoded input.\r\n     */\r\n    EncodingUtils.unicodeEscapedCharsToUtf8 = function (string) {\r\n        if (StringUtils_1.StringUtils.isString(string)) {\r\n            return string.replace(/\\\\u([\\d\\w]{4})/gi, function (_match, grp) {\r\n                return String.fromCharCode(parseInt(grp, 16));\r\n            });\r\n        }\r\n        throw new Error('Specified value must be a string');\r\n    };\r\n    /**\r\n     * Convert a utf8 string to a string with unicode escaped sequence of characters (\\u00ed, \\u0110, ...).\r\n     *\r\n     * @param string A string containing an utf8 valid sequence.\r\n     *\r\n     * @return A string containing escaped sequences for all the original utf8 characters\r\n     */\r\n    EncodingUtils.utf8ToUnicodeEscapedChars = function (string) {\r\n        if (!StringUtils_1.StringUtils.isString(string)) {\r\n            throw new Error('Specified value must be a string');\r\n        }\r\n        if (StringUtils_1.StringUtils.isEmpty(string)) {\r\n            return string;\r\n        }\r\n        return string.replace(/[^\\0-~]/g, function (ch) {\r\n            return \"\\\\u\" + (\"0000\" + ch.charCodeAt(0).toString(16)).slice(-4);\r\n        });\r\n    };\r\n    return EncodingUtils;\r\n}());\r\nexports.EncodingUtils = EncodingUtils;\r\n//# sourceMappingURL=EncodingUtils.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringUtils_1 = require(\"../utils/StringUtils\");\r\nvar ArrayUtils_1 = require(\"../utils/ArrayUtils\");\r\nvar NumericUtils_1 = require(\"../utils/NumericUtils\");\r\nvar HashMapObject_1 = require(\"./HashMapObject\");\r\n/**\r\n * A 2D table structure\r\n */\r\nvar TableObject = /** @class */ (function () {\r\n    /**\r\n     * TableObject is an abstraction of a 2D table with X columns and Y rows where each cell can be used to store any kind of data.\r\n     *\r\n     * Columns can be labeled with a textual name which can be used to access them anytime (data can be also accessed via numeric row and column indexes).\r\n     *\r\n     * @param rows The number of rows for the created table (Rows can be added or modified anytime later).\r\n     * @param columns The number of columns to create or an array of strings containing the column labels for all of the columns that will be created (Columns can be added or modified anytime later).\r\n     *\r\n     * @return The constructed TableObject\r\n     */\r\n    function TableObject(rows, columns) {\r\n        if (rows === void 0) { rows = 0; }\r\n        if (columns === void 0) { columns = 0; }\r\n        /**\r\n         * Stores the number of columns on the current table instance\r\n         */\r\n        this._columnsCount = 0;\r\n        /**\r\n         * Stores the number of rows on the current table instance\r\n         */\r\n        this._rowsCount = 0;\r\n        if (NumericUtils_1.NumericUtils.isInteger(rows) && rows >= 0) {\r\n            this._rowsCount = rows;\r\n        }\r\n        else {\r\n            throw new Error('constructor rows must be a positive integer');\r\n        }\r\n        if (NumericUtils_1.NumericUtils.isInteger(columns) && columns >= 0) {\r\n            this._columnsCount = Number(columns);\r\n        }\r\n        else {\r\n            if (ArrayUtils_1.ArrayUtils.isArray(columns)) {\r\n                this._columnsCount = columns.length;\r\n                this.setColumnNames(columns);\r\n            }\r\n            else {\r\n                throw new Error('constructor columns must be an integer or an array of strings');\r\n            }\r\n        }\r\n        if ((this._columnsCount + this._rowsCount > 0) && (this._columnsCount == 0 || this._rowsCount == 0)) {\r\n            throw new Error('constructor columns cannot be empty if rows are positive and vice versa');\r\n        }\r\n        this._columnNames = new HashMapObject_1.HashMapObject();\r\n        this._cells = new HashMapObject_1.HashMapObject();\r\n    }\r\n    /**\r\n     * Set the label to an existing table column.\r\n     *\r\n     * @param column An integer or a string containing the index or label for the column to which we want to assign a label\r\n     * @param name The new label that will be assigned to the specified column\r\n     *\r\n     * @return True if the column name was correctly assigned\r\n     */\r\n    TableObject.prototype.setColumnName = function (column, name) {\r\n        var columnIndex = this._validateColumnIndex(column);\r\n        if (!StringUtils_1.StringUtils.isString(name)) {\r\n            throw new Error('name must be a string');\r\n        }\r\n        this._columnNames.set(String(columnIndex), name);\r\n        return true;\r\n    };\r\n    /**\r\n     * Define the names for the current table columns (Already defined column names will be overriden).\r\n     *\r\n     * @param names List of names that will be applied to the table columns.\r\n     * It must have the same number of items and in the same order as the table columns.\r\n     *\r\n     * @return The list of column names after beign assigned\r\n     */\r\n    TableObject.prototype.setColumnNames = function (names) {\r\n        if (this._columnsCount == names.length) {\r\n            if (ArrayUtils_1.ArrayUtils.hasDuplicateElements(names)) {\r\n                throw new Error('array must not contain duplicate elements');\r\n            }\r\n            var namesCount = names.length;\r\n            this._columnNames = new HashMapObject_1.HashMapObject();\r\n            for (var i = 0; i < namesCount; i++) {\r\n                if (!StringUtils_1.StringUtils.isString(names[i])) {\r\n                    throw new Error('List of names must be an array of strings');\r\n                }\r\n                this._columnNames.set(String(i), names[i]);\r\n            }\r\n            return names;\r\n        }\r\n        throw new Error('List of names must match number of columns');\r\n    };\r\n    /**\r\n     * Get a list with all the currently defined column names in the same order as they are assigned to the table.\r\n     * If the table contains columns but no names are defined, a list with empty strings will be returned\r\n     *\r\n     * @return A list of strings with the column names\r\n     */\r\n    TableObject.prototype.getColumnNames = function () {\r\n        var result = [];\r\n        for (var i = 0; i < this._columnsCount; i++) {\r\n            var key = String(i);\r\n            result.push(this._columnNames.isKey(key) ? this._columnNames.get(key) : '');\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Get the defined column name for a given column index\r\n     *\r\n     * @param columnIndex a numeric column index\r\n     *\r\n     * @return The column label for the specified numeric index\r\n     */\r\n    TableObject.prototype.getColumnName = function (columnIndex) {\r\n        var key = String(this._validateColumnIndex(columnIndex));\r\n        if (this._columnNames.isKey(key)) {\r\n            return this._columnNames.get(key);\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    };\r\n    /**\r\n     * Get the numeric column index from it's label\r\n     *\r\n     * @param name The label for an existing column\r\n     *\r\n     * @return The numeric index that is related to the given column label\r\n     */\r\n    TableObject.prototype.getColumnIndex = function (name) {\r\n        if (!StringUtils_1.StringUtils.isString(name) || name === '') {\r\n            throw new Error('value must be a non empty string');\r\n        }\r\n        var keys = this._columnNames.getKeys();\r\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\r\n            var key = keys_1[_i];\r\n            if (this._columnNames.get(key) === name) {\r\n                return Number(key);\r\n            }\r\n        }\r\n        throw new Error('provided column name does not exist');\r\n    };\r\n    /**\r\n     * Get all the elements that are located at the specified column index or label.\r\n     *\r\n     * @param column An integer or a string containing the index or label for the column that we want to retrieve\r\n     *\r\n     * @return All the table elements that belong to the required column\r\n     */\r\n    TableObject.prototype.getColumn = function (column) {\r\n        var result = [];\r\n        var columnIndex = this._validateColumnIndex(column);\r\n        for (var i = 0; i < this._rowsCount; i++) {\r\n            result.push(this.getCell(i, columnIndex));\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Add the specified amount of columns to the table.\r\n     *\r\n     * @param number The number of columns that will be added to the table\r\n     * @param names Optionally we can list all the labels to define for the new columns that will be added\r\n     * @param at Defines the column index where the new columns will be inserted. Old columns that are located at the insertion point will not be deleted, they will be moved to the Right. By default all the new columns will be appended at the end of the table unless a positive value is specified here.\r\n     *\r\n     * @return True if the operation was successful\r\n     */\r\n    TableObject.prototype.addColumns = function (number, names, at) {\r\n        if (names === void 0) { names = []; }\r\n        if (at === void 0) { at = -1; }\r\n        if (!ArrayUtils_1.ArrayUtils.isArray(names)) {\r\n            throw new Error('names must be an array');\r\n        }\r\n        if (!NumericUtils_1.NumericUtils.isInteger(number) || number <= 0) {\r\n            throw new Error('number must be a positive integer');\r\n        }\r\n        if (!NumericUtils_1.NumericUtils.isInteger(at) || at < -1 || at >= this._columnsCount) {\r\n            throw new Error('at must be a valid column index');\r\n        }\r\n        if (at >= 0) {\r\n            for (var i = this._columnsCount - 1; i >= at; i--) {\r\n                if (this._columnNames.isKey(String(i))) {\r\n                    this._columnNames.rename(String(i), String(i + number));\r\n                }\r\n                for (var j = 0; j < this._rowsCount; j++) {\r\n                    var rowAndCol = String(j) + '-' + String(i);\r\n                    if (this._cells.isKey(rowAndCol)) {\r\n                        this._cells.rename(rowAndCol, String(j) + '-' + String(i + number));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        // Add the new column labels if defined\r\n        var namesCount = names.length;\r\n        if (namesCount > 0) {\r\n            if (namesCount != number) {\r\n                throw new Error('names length must be the same as number');\r\n            }\r\n            var colIndex = at < 0 ? this._columnsCount : at;\r\n            for (var i = 0; i < namesCount; i++) {\r\n                this._columnNames.set(String(colIndex + i), names[i]);\r\n            }\r\n        }\r\n        this._columnsCount += number;\r\n        return true;\r\n    };\r\n    /**\r\n     * Fill the data on all the rows for the given column index or label\r\n     *\r\n     * @param column An integer or a string containing the index or label for the column that we want to fill\r\n     * @param data An array with all the values that will be assigned to the table rows on the specified column. Array length must match rows number\r\n     *\r\n     * @return void\r\n     */\r\n    TableObject.prototype.setColumn = function (column, data) {\r\n        var dataCount = data.length;\r\n        if (dataCount <= 0) {\r\n            throw new Error('data must not be empty');\r\n        }\r\n        if (this._rowsCount != dataCount) {\r\n            throw new Error('data length and number of rows must match');\r\n        }\r\n        var columnIndex = this._validateColumnIndex(column);\r\n        for (var i = 0; i < this._rowsCount; i++) {\r\n            this.setCell(i, columnIndex, data[i]);\r\n        }\r\n    };\r\n    /**\r\n     * Delete a whole column and all its related data from the table\r\n     *\r\n     * @param column An integer or a string containing the index or label for the column that we want to delete\r\n     *\r\n     * @return void\r\n     */\r\n    TableObject.prototype.removeColumn = function (column) {\r\n        var columnIndex = this._validateColumnIndex(column);\r\n        // Remove column name if it exists\r\n        if (this._columnNames.isKey(String(columnIndex))) {\r\n            this._columnNames.remove(String(columnIndex));\r\n        }\r\n        // Remove all column values if they exist\r\n        for (var i = 0; i < this._rowsCount; i++) {\r\n            var rowAndCol = String(i) + '-' + String(columnIndex);\r\n            if (this._cells.isKey(rowAndCol)) {\r\n                this._cells.remove(rowAndCol);\r\n            }\r\n        }\r\n        // Update indices for all columns that are after the removed one\r\n        for (var i = columnIndex + 1; i < this._columnsCount; i++) {\r\n            if (this._columnNames.isKey(String(i))) {\r\n                this._columnNames.rename(String(i), String(i - 1));\r\n            }\r\n            for (var j = 0; j < this._rowsCount; j++) {\r\n                var rowAndCol = String(j) + '-' + String(i);\r\n                if (this._cells.isKey(rowAndCol)) {\r\n                    this._cells.rename(rowAndCol, String(j) + '-' + String(i - 1));\r\n                }\r\n            }\r\n        }\r\n        this._columnsCount--;\r\n        if (this._columnsCount <= 0) {\r\n            this._rowsCount = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Get the value contained at the specified table cell\r\n     *\r\n     * @param row An integer containing the index for the row that we want to retrieve\r\n     * @param column An integer or a string containing the index or label for the column that we want to retrieve\r\n     *\r\n     * @return The value for the cell that is located at the specified row and column\r\n     */\r\n    TableObject.prototype.getCell = function (row, column) {\r\n        var rowIndex = this._validateRowIndex(row);\r\n        var columnIndex = this._validateColumnIndex(column);\r\n        var key = rowIndex + '-' + columnIndex;\r\n        if (this._cells.isKey(key)) {\r\n            return this._cells.get(key);\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    };\r\n    /**\r\n     * Set the value for a table cell\r\n     *\r\n     * @param row An integer containing the index for the row that we want to set\r\n     * @param column An integer or a string containing the index or label for the column that we want to set\r\n     * @param value The value we want to set to the specified cell. Any type is allowed, and different cells can contain values of different types.\r\n     *\r\n     * @return The assigned value after beign stored into the table cell\r\n     */\r\n    TableObject.prototype.setCell = function (row, column, value) {\r\n        var rowIndex = this._validateRowIndex(row);\r\n        var columnIndex = this._validateColumnIndex(column);\r\n        return this._cells.set(rowIndex + '-' + columnIndex, value);\r\n    };\r\n    /**\r\n     * Get all the elements that are located at the specified row index\r\n     *\r\n     * @param row An integer containing the index for the row that we want to retrieve\r\n     *\r\n     * @return All the table elements that belong to the required row\r\n     */\r\n    TableObject.prototype.getRow = function (row) {\r\n        var result = [];\r\n        var rowIndex = this._validateRowIndex(row);\r\n        for (var i = 0; i < this._columnsCount; i++) {\r\n            result.push(this.getCell(rowIndex, i));\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Add the specified amount of rows to the table.\r\n     *\r\n     * @param number The number of rows that will be added to the table\r\n     * @param at Defines the row index where the new rows will be inserted. Old rows that are located at the insertion point will not be deleted, they will be moved down. By default all the new rows will be appended at the bottom of the table unless a positive value is specified here.\r\n     *\r\n     * @return True if the operation was successful\r\n     */\r\n    TableObject.prototype.addRows = function (number, at) {\r\n        if (at === void 0) { at = -1; }\r\n        if (!NumericUtils_1.NumericUtils.isInteger(number) || number <= 0) {\r\n            throw new Error('number must be a positive integer');\r\n        }\r\n        if (!NumericUtils_1.NumericUtils.isInteger(at) || at < -1 || at >= this._rowsCount) {\r\n            throw new Error('at must be a valid row index');\r\n        }\r\n        if (at >= 0) {\r\n            for (var i = this._rowsCount - 1; i >= at; i--) {\r\n                for (var j = 0; j < this._columnsCount; j++) {\r\n                    var rowAndCol = String(i) + '-' + String(j);\r\n                    if (this._cells.isKey(rowAndCol)) {\r\n                        this._cells.rename(rowAndCol, (i + number) + '-' + String(j));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._rowsCount += number;\r\n        return true;\r\n    };\r\n    /**\r\n     * Fill all the data for the specified row\r\n     *\r\n     * @param row An integer containing the index for the row that we want to set\r\n     * @param data An array with all the values that will be assigned to the table row. Array length must match columns number\r\n     *\r\n     * @return void\r\n     */\r\n    TableObject.prototype.setRow = function (row, data) {\r\n        var dataCount = data.length;\r\n        if (dataCount <= 0) {\r\n            throw new Error('data must not be empty');\r\n        }\r\n        if (this._columnsCount != dataCount) {\r\n            throw new Error('data length and number of columns must match');\r\n        }\r\n        var rowIndex = this._validateRowIndex(row);\r\n        for (var i = 0; i < this._columnsCount; i++) {\r\n            this.setCell(rowIndex, i, data[i]);\r\n        }\r\n    };\r\n    /**\r\n     * Delete a whole row and all its related data from the table\r\n     *\r\n     * @param row An integer containing the index for the row that we want to delete\r\n     *\r\n     * @return void\r\n     */\r\n    TableObject.prototype.removeRow = function (row) {\r\n        var rowIndex = this._validateRowIndex(row);\r\n        // Remove all row values if they exist\r\n        for (var i = 0; i < this._columnsCount; i++) {\r\n            var rowAndCol = String(rowIndex) + '-' + String(i);\r\n            if (this._cells.isKey(rowAndCol)) {\r\n                this._cells.remove(rowAndCol);\r\n            }\r\n        }\r\n        // Update indices for all rows that are after the removed one\r\n        for (var i = rowIndex + 1; i < this._rowsCount; i++) {\r\n            for (var j = 0; j < this._columnsCount; j++) {\r\n                var rowAndCol = String(i) + '-' + String(j);\r\n                if (this._cells.isKey(rowAndCol)) {\r\n                    this._cells.rename(rowAndCol, String(i - 1) + '-' + String(j));\r\n                }\r\n            }\r\n        }\r\n        this._rowsCount--;\r\n        if (this._rowsCount <= 0) {\r\n            this._columnsCount = 0;\r\n        }\r\n    };\r\n    /**\r\n     * Get the total number of rows that are currently available on this table\r\n     *\r\n     * @return The total number of rows on the table\r\n     */\r\n    TableObject.prototype.countRows = function () {\r\n        return this._rowsCount;\r\n    };\r\n    /**\r\n     * Get the total number of columns that are currently available on this table\r\n     *\r\n     * @return The total number of columns on the table\r\n     */\r\n    TableObject.prototype.countColumns = function () {\r\n        return this._columnsCount;\r\n    };\r\n    /**\r\n     * Get the total number of cells that are currently available on this table\r\n     *\r\n     * @return The total number of cells on the table\r\n     */\r\n    TableObject.prototype.countCells = function () {\r\n        return this._rowsCount * this._columnsCount;\r\n    };\r\n    /**\r\n     * Auxiliary method to validate that a given column index or label belongs to the current table\r\n     *\r\n     * @param column An integer or a string containing the index or label for the column that we want to validate\r\n     *\r\n     * @return A valid column index based on the specified integer or label.\r\n     */\r\n    TableObject.prototype._validateColumnIndex = function (column) {\r\n        var columnIndex = NumericUtils_1.NumericUtils.isInteger(column) ? Number(column) : -1;\r\n        var columnNames = this._columnNames.getValues();\r\n        var columnNamesKeys = this._columnNames.getKeys();\r\n        var columnNamesCount = columnNames.length;\r\n        if (StringUtils_1.StringUtils.isString(column)) {\r\n            for (var i = 0; i < columnNamesCount; i++) {\r\n                if (column === columnNames[i]) {\r\n                    columnIndex = Number(columnNamesKeys[i]);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (columnIndex < 0 || columnIndex >= this._columnsCount) {\r\n            throw new Error('Invalid column value');\r\n        }\r\n        return columnIndex;\r\n    };\r\n    /**\r\n     * Auxiliary method to validate that a given row index belongs to the current table\r\n     *\r\n     * @param row An integer containing the index for the row that we want to validate\r\n     *\r\n     * @return A valid row index based on the specified integer\r\n     */\r\n    TableObject.prototype._validateRowIndex = function (row) {\r\n        var rowIndex = NumericUtils_1.NumericUtils.isInteger(row) ? row : -1;\r\n        if (rowIndex < 0 || rowIndex >= this._rowsCount) {\r\n            throw new Error('Invalid row value');\r\n        }\r\n        return rowIndex;\r\n    };\r\n    return TableObject;\r\n}());\r\nexports.TableObject = TableObject;\r\n//# sourceMappingURL=TableObject.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n// Managers package\r\nvar BrowserManager_1 = require(\"./managers/BrowserManager\");\r\nexports.BrowserManager = BrowserManager_1.BrowserManager;\r\nvar HTTPManager_1 = require(\"./managers/HTTPManager\");\r\nexports.HTTPManager = HTTPManager_1.HTTPManager;\r\nvar HTTPManagerBaseRequest_1 = require(\"./managers/httpmanager/HTTPManagerBaseRequest\");\r\nexports.HTTPManagerBaseRequest = HTTPManagerBaseRequest_1.HTTPManagerBaseRequest;\r\nvar HTTPManagerGetRequest_1 = require(\"./managers/httpmanager/HTTPManagerGetRequest\");\r\nexports.HTTPManagerGetRequest = HTTPManagerGetRequest_1.HTTPManagerGetRequest;\r\nvar HTTPManagerPostRequest_1 = require(\"./managers/httpmanager/HTTPManagerPostRequest\");\r\nexports.HTTPManagerPostRequest = HTTPManagerPostRequest_1.HTTPManagerPostRequest;\r\nvar LocalizationManager_1 = require(\"./managers/LocalizationManager\");\r\nexports.LocalizationManager = LocalizationManager_1.LocalizationManager;\r\nvar ModelHistoryManager_1 = require(\"./managers/ModelHistoryManager\");\r\nexports.ModelHistoryManager = ModelHistoryManager_1.ModelHistoryManager;\r\nvar SerializationManager_1 = require(\"./managers/SerializationManager\");\r\nexports.SerializationManager = SerializationManager_1.SerializationManager;\r\nvar ValidationManager_1 = require(\"./managers/ValidationManager\");\r\nexports.ValidationManager = ValidationManager_1.ValidationManager;\r\n// Model package\r\nvar BaseStrictClass_1 = require(\"./model/BaseStrictClass\");\r\nexports.BaseStrictClass = BaseStrictClass_1.BaseStrictClass;\r\nvar CSVObject_1 = require(\"./model/CSVObject\");\r\nexports.CSVObject = CSVObject_1.CSVObject;\r\nvar DateTimeObject_1 = require(\"./model/DateTimeObject\");\r\nexports.DateTimeObject = DateTimeObject_1.DateTimeObject;\r\nvar HashMapObject_1 = require(\"./model/HashMapObject\");\r\nexports.HashMapObject = HashMapObject_1.HashMapObject;\r\nvar JavaPropertiesObject_1 = require(\"./model/JavaPropertiesObject\");\r\nexports.JavaPropertiesObject = JavaPropertiesObject_1.JavaPropertiesObject;\r\nvar TableObject_1 = require(\"./model/TableObject\");\r\nexports.TableObject = TableObject_1.TableObject;\r\n// Utils package\r\nvar ArrayUtils_1 = require(\"./utils/ArrayUtils\");\r\nexports.ArrayUtils = ArrayUtils_1.ArrayUtils;\r\nvar ConversionUtils_1 = require(\"./utils/ConversionUtils\");\r\nexports.ConversionUtils = ConversionUtils_1.ConversionUtils;\r\nvar EncodingUtils_1 = require(\"./utils/EncodingUtils\");\r\nexports.EncodingUtils = EncodingUtils_1.EncodingUtils;\r\nvar NumericUtils_1 = require(\"./utils/NumericUtils\");\r\nexports.NumericUtils = NumericUtils_1.NumericUtils;\r\nvar ObjectUtils_1 = require(\"./utils/ObjectUtils\");\r\nexports.ObjectUtils = ObjectUtils_1.ObjectUtils;\r\nvar StringUtils_1 = require(\"./utils/StringUtils\");\r\nexports.StringUtils = StringUtils_1.StringUtils;\r\n//# sourceMappingURL=index.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringUtils_1 = require(\"../utils/StringUtils\");\r\nvar NumericUtils_1 = require(\"../utils/NumericUtils\");\r\nvar ArrayUtils_1 = require(\"../utils/ArrayUtils\");\r\n/**\r\n * An abstraction of the browser entity an all its related operations and properties\r\n * Browser entity is normally available only on client side or front end view applications,\r\n * but some of its features can also make sense on a server side app. So depending on the\r\n * implementation language, this class may or may not have some of its methods implemented.\r\n */\r\nvar BrowserManager = /** @class */ (function () {\r\n    function BrowserManager() {\r\n    }\r\n    /**\r\n     * Get the current page full url, including 'https://', domain and any uri get parameters\r\n     *\r\n     * @return A well formed url\r\n     */\r\n    BrowserManager.prototype.getCurrentUrl = function () {\r\n        return window.location.href;\r\n    };\r\n    /**\r\n     * Tells if the current html document is fully loaded or not.\r\n     *\r\n     * @returns True if the current html document is fully loaded (including all frames, objects and images) or false otherwise.\r\n     */\r\n    BrowserManager.prototype.isDocumentLoaded = function () {\r\n        return (document.readyState === \"complete\");\r\n    };\r\n    /**\r\n     * Check if the specified cookie exists\r\n     *\r\n     * @param key the name for the cookie we want to find\r\n     *\r\n     * @returns True if cookie with specified name exists, false otherwise\r\n     */\r\n    BrowserManager.prototype.isCookie = function (key) {\r\n        return (this.getCookie(key) !== undefined);\r\n    };\r\n    /**\r\n     * Set the value for a cookie or create it if not exist\r\n     *\r\n     * Adapted from the jquery.cookie plugin by Klaus Hartl: https://github.com/carhartl/jquery-cookie\r\n     *\r\n     * @param key the name for the cookie we want to create\r\n     * @param value the value we want to set to the new cookie.\r\n     * @param expires The lifetime of the cookie. Value can be a `Number` which will be interpreted as days from time of creation or a `Date` object. If omitted or '' string, the cookie becomes a session cookie.\r\n     * @param path Define the path where the cookie is valid. By default it is the whole domain: '/'. A specific path can be passed (/ca/Home/) or a '' string to set it as the current site http path.\r\n     * @param domain Define the domain where the cookie is valid. Default: domain of page where the cookie was created.\r\n     * @param secure If true, the cookie transmission requires a secure protocol (https). Default: false.\r\n     *\r\n     * @returns True if cookie was created, false otherwise. An exception may be thrown if invalid parameters are specified\r\n     */\r\n    BrowserManager.prototype.setCookie = function (key, value, expires, path, domain, secure) {\r\n        // TODO: Should be interesting to detect if we are going to exceed the total available space for \r\n        // cookies storage before storing the data, to prevent it from silently failing     \r\n        if (expires === void 0) { expires = ''; }\r\n        if (path === void 0) { path = \"/\"; }\r\n        if (domain === void 0) { domain = ''; }\r\n        if (secure === void 0) { secure = false; }\r\n        // Empty key means an exception\r\n        if (!StringUtils_1.StringUtils.isString(key) || StringUtils_1.StringUtils.isEmpty(key)) {\r\n            throw new Error(\"key must be defined\");\r\n        }\r\n        // Empty values mean cookie will be created empty\r\n        if (value === undefined || value === null) {\r\n            value = '';\r\n        }\r\n        // Reaching here, non string value means an exception\r\n        if (!StringUtils_1.StringUtils.isString(value)) {\r\n            throw new Error(\"value must be a string\");\r\n        }\r\n        // If the expires parameter is numeric, we will generate the correct date value\r\n        if (NumericUtils_1.NumericUtils.isNumeric(expires)) {\r\n            var days = expires;\r\n            expires = new Date();\r\n            expires.setDate(expires.getDate() + days);\r\n        }\r\n        // Generate the cookie value\r\n        var res = encodeURIComponent(key) + '=' + encodeURIComponent(value);\r\n        res += expires ? '; expires=' + expires.toUTCString() : '';\r\n        res += path ? '; path=' + path : '';\r\n        res += domain ? '; domain=' + domain : '';\r\n        res += secure ? '; secure' : '';\r\n        document.cookie = res;\r\n        return true;\r\n    };\r\n    /**\r\n     * Get the value for an existing cookie.\r\n     *\r\n     * Adapted from the jquery.cookie plugin by Klaus Hartl: https://github.com/carhartl/jquery-cookie\r\n     *\r\n     * @param key the name of the cookie we want to get\r\n     *\r\n     * @returns Cookie value or null if cookie does not exist\r\n     */\r\n    BrowserManager.prototype.getCookie = function (key) {\r\n        // Empty key means an exception\r\n        if (!StringUtils_1.StringUtils.isString(key) || StringUtils_1.StringUtils.isEmpty(key)) {\r\n            throw new Error(\"key must be defined\");\r\n        }\r\n        // Get an array with all the page cookies\r\n        var cookies = document.cookie.split('; ');\r\n        var pluses = /\\+/g;\r\n        for (var i = 0, l = cookies.length; i < l; i++) {\r\n            var parts = cookies[i].split('=');\r\n            var part = parts.shift() || '';\r\n            if (decodeURIComponent(part.replace(pluses, ' ')) === key) {\r\n                return decodeURIComponent(parts.join('=').replace(pluses, ' '));\r\n            }\r\n        }\r\n        return undefined;\r\n    };\r\n    /**\r\n     * Deletes the specified cookie from browser. Note that the cookie will only be deleted if belongs to the same path as specified.\r\n     *\r\n     * @param key The name of the cookie we want to delete\r\n     * @param path Define the path where the cookie is set. By default it is the whole domain: '/'. If the cookie is not set on this path, we must pass the right one or the delete will fail.\r\n     *\r\n     * @returns True if cookie was deleted or false if cookie could not be deleted or was not found.\r\n     */\r\n    BrowserManager.prototype.deleteCookie = function (key, path) {\r\n        if (path === void 0) { path = '/'; }\r\n        // Empty key means an exception\r\n        if (!StringUtils_1.StringUtils.isString(key) || StringUtils_1.StringUtils.isEmpty(key)) {\r\n            throw new Error(\"key must be defined\");\r\n        }\r\n        if (this.getCookie(key) !== undefined) {\r\n            this.setCookie(key, '', -1, path);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Reloads the current url. This will make the browser load all the current html document again\r\n     * and all page state will be lost.\r\n     *\r\n     * @returns void\r\n     */\r\n    BrowserManager.prototype.reload = function () {\r\n        location.reload();\r\n    };\r\n    /**\r\n     * Tries to detect the language that is set as preferred by the user on the current browser.\r\n     * NOTE: Getting browser language is not accurate. It is always better to use server side language detection\r\n     *\r\n     * @returns A two digits string containing the detected browser language. For example 'es', 'en', ...\r\n     */\r\n    BrowserManager.prototype.getPreferredLanguage = function () {\r\n        var language = '';\r\n        // Try to get the language on modern browsers support for HTML 5.1 \"navigator.languages\"\r\n        if (ArrayUtils_1.ArrayUtils.isArray(window.navigator['languages'])) {\r\n            for (var i = 0; i < window.navigator['languages'].length; i++) {\r\n                if (window.navigator['languages'][i].length >= 2) {\r\n                    language = window.navigator['languages'][i];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            // support for older browsers\r\n            language = window.navigator['userLanguage'] || window.navigator.language;\r\n            language = language.split(',')[0];\r\n        }\r\n        return language.trim().substr(0, 2).toLowerCase();\r\n    };\r\n    /**\r\n     * Opens the specified url on the browser's current tab or in a new one.\r\n     *\r\n     * @param url The url that will be loaded\r\n     * @param newWindow Setting it to true will open the url on a new browser tab. False by default\r\n     * @param postData If we want to send POST data to the url, we can set this parameter to an object where\r\n     *        each property will be translated to a POST variable name, and each property value to the POST variable value\r\n     *\r\n     * @returns void\r\n     */\r\n    BrowserManager.prototype.goToUrl = function (url, newWindow, postData) {\r\n        if (newWindow === void 0) { newWindow = false; }\r\n        if (postData === void 0) { postData = null; }\r\n        if (postData == null) {\r\n            // Check if same or new window is required\r\n            if (newWindow) {\r\n                window.open(url, '_blank');\r\n            }\r\n            else {\r\n                window.location.href = url;\r\n            }\r\n        }\r\n        else {\r\n            // We create a dynamic form that will be used to load the url and also send the required POST data\r\n            var form = document.createElement('form');\r\n            form.action = url;\r\n            form.method = \"POST\";\r\n            form.style.display = \"none\";\r\n            if (newWindow) {\r\n                form.target = \"_blank\";\r\n            }\r\n            var props = Object.getOwnPropertyNames(postData);\r\n            for (var i = 0; i < props.length; i++) {\r\n                var input = document.createElement(\"input\");\r\n                input.type = \"hidden\";\r\n                input.name = props[i];\r\n                input.value = postData[props[i]];\r\n                form.appendChild(input);\r\n            }\r\n            document.body.appendChild(form);\r\n            form.submit();\r\n            if (newWindow) {\r\n                document.body.removeChild(form);\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Disable the hability for the user to navigate back on browser history. This method does not disable the\r\n     * browser back button, but it prevents it from leaving the current page.\r\n     *\r\n     * @returns void\r\n     */\r\n    BrowserManager.prototype.disableBackButton = function () {\r\n        history.pushState(null, '', document.URL);\r\n        window.addEventListener('popstate', this._onPopStatePreventBackButton);\r\n    };\r\n    /**\r\n     * Event listener that will prevent the back button when disableBackButton is enabled\r\n     */\r\n    BrowserManager.prototype._onPopStatePreventBackButton = function () {\r\n        history.pushState(null, '', document.URL);\r\n    };\r\n    /**\r\n     * Restore the back button normal behaviour which was blocked by calling disableBackButton()\r\n     *\r\n     * @returns void\r\n     */\r\n    BrowserManager.prototype.enableBackButton = function () {\r\n        window.removeEventListener('popstate', this._onPopStatePreventBackButton);\r\n    };\r\n    /**\r\n     * Totally disables the current page scrolling. Useful when creating popups or elements that have an internal scroll,\r\n     * and we don't want it to interfere with the main document scroll.<br><br>\r\n     * Can be enabled again with enableScroll.<br><br>\r\n     *\r\n     * @returns void\r\n     */\r\n    BrowserManager.prototype.disableScroll = function () {\r\n        // TODO - find a good crossbrowser non jquery solution\r\n    };\r\n    /**\r\n     * Restores main document scrolling if has been disabled with HtmlUtils.disableScroll<br><br>\r\n     *\r\n     * @returns void\r\n     */\r\n    BrowserManager.prototype.enableScroll = function () {\r\n        // TODO - find a good crossbrowser non jquery solution\r\n    };\r\n    /**\r\n     * Gives the current position for the browser scroll\r\n     *\r\n     * @returns Array with the current x,y position based on the top left corner of the current document\r\n     */\r\n    BrowserManager.prototype.getScrollPosition = function () {\r\n        return [window.pageXOffset, window.pageYOffset];\r\n    };\r\n    /**\r\n     * Obtain the current viewport browser window width value\r\n     *\r\n     * @see https://stackoverflow.com/questions/1248081/get-the-browser-viewport-dimensions-with-javascript\r\n     *\r\n     * @returns A numeric value representing the window width in pixels\r\n     */\r\n    BrowserManager.prototype.getWindowWidth = function () {\r\n        return window.innerWidth ||\r\n            document.documentElement.clientWidth ||\r\n            document.getElementsByTagName('body')[0].clientWidth || -1;\r\n    };\r\n    /**\r\n     * Obtain the current viewport browser window height value\r\n     *\r\n     * @see https://stackoverflow.com/questions/1248081/get-the-browser-viewport-dimensions-with-javascript\r\n     *\r\n     * @returns A numeric value representing the window height in pixels\r\n     */\r\n    BrowserManager.prototype.getWindowHeight = function () {\r\n        return window.innerHeight ||\r\n            document.documentElement.clientHeight ||\r\n            document.getElementsByTagName('body')[0].clientHeight || -1;\r\n    };\r\n    /**\r\n     * Obtain the current html document width in pixels\r\n     *\r\n     * @returns Numeric value representing the document width in pixels\r\n     */\r\n    BrowserManager.prototype.getDocumentWidth = function () {\r\n        return Math.max(document.body.scrollWidth, document.body.offsetWidth, document.documentElement.clientWidth, document.documentElement.scrollWidth, document.documentElement.offsetWidth);\r\n    };\r\n    /**\r\n     * Obtain the current html document height in pixels\r\n     *\r\n     * @returns Numeric value representing the document height in pixels\r\n     */\r\n    BrowserManager.prototype.getDocumentHeight = function () {\r\n        return Math.max(document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight);\r\n    };\r\n    /**\r\n     * Moves the browser scroll to the specified X,Y axis position or DOM element.\r\n     *\r\n     * @example browserManager.scrollTo(document.querySelector('#myId'), 800);\r\n     * @example browserManager.scrollTo([100,200], 1000);\r\n     *\r\n     * @see https://pawelgrzybek.com/page-scroll-in-vanilla-javascript/\r\n     *\r\n     * @param destination The location where the scroll must be moved to. It can be an HTML element instance or an array of two numbers with the [x,y] destination coordinates\r\n     * @param duration The animation duration in miliseconds. Set it to 0 to perform a direct scroll change.\r\n     * @param callback A method that will be executed right after the scroll finishes\r\n     *\r\n     * @returns void\r\n      */\r\n    BrowserManager.prototype.scrollTo = function (destination, duration, callback) {\r\n        if (duration === void 0) { duration = 600; }\r\n        if (callback === void 0) { callback = null; }\r\n        // Define an easeOutCubic function for the scroll movement\r\n        var easingFunction = function (t) { return (--t) * t * t + 1; };\r\n        // Get the current scrollbar positions and system miliseconds\r\n        var startX = window.pageXOffset;\r\n        var startY = window.pageYOffset;\r\n        var startTime = ('now' in window.performance) ? performance.now() : (new Date()).getTime();\r\n        // Obtain the viewport and document dimensions\r\n        var documentWidth = this.getDocumentWidth();\r\n        var documentHeight = this.getDocumentHeight();\r\n        var windowWidth = this.getWindowWidth();\r\n        var windowHeight = this.getWindowHeight();\r\n        // Find the requested destination coordinates depending on the type of the parameter\r\n        var destinationValueX = ArrayUtils_1.ArrayUtils.isArray(destination) ? destination[0] : destination.offsetLeft;\r\n        var destinationValueY = ArrayUtils_1.ArrayUtils.isArray(destination) ? destination[1] : destination.offsetTop;\r\n        // Calculate the real value where scrollbars must move\r\n        var destinationX = startX;\r\n        var destinationY = startY;\r\n        if (documentWidth > windowWidth) {\r\n            destinationX = Math.round(documentWidth - destinationValueX < windowWidth ? documentWidth - windowWidth : destinationValueX);\r\n        }\r\n        if (documentHeight > windowHeight) {\r\n            destinationY = Math.round(documentHeight - destinationValueY < windowHeight ? documentHeight - windowHeight : destinationValueY);\r\n        }\r\n        // If requestAnimationFrame is not available, we will simply perform the scroll without any animation\r\n        if ('requestAnimationFrame' in window === false) {\r\n            window.scroll(destinationX, destinationY);\r\n            if (callback) {\r\n                callback();\r\n            }\r\n            return;\r\n        }\r\n        // Define a method that will perform the scroll animation\r\n        function animate() {\r\n            var now = ('now' in window.performance) ? performance.now() : (new Date()).getTime();\r\n            var time = Math.min(1, ((now - startTime) / duration));\r\n            var x = Math.ceil(easingFunction(time) * (destinationX - startX) + startX);\r\n            var y = Math.ceil(easingFunction(time) * (destinationY - startY) + startY);\r\n            window.scroll(x, y);\r\n            if (Math.ceil(window.pageXOffset) === destinationX && Math.ceil(window.pageYOffset) === destinationY) {\r\n                if (callback !== null) {\r\n                    callback();\r\n                }\r\n                return;\r\n            }\r\n            requestAnimationFrame(animate);\r\n        }\r\n        animate();\r\n    };\r\n    return BrowserManager;\r\n}());\r\nexports.BrowserManager = BrowserManager;\r\n//# sourceMappingURL=BrowserManager.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringUtils_1 = require(\"../utils/StringUtils\");\r\nvar ObjectUtils_1 = require(\"../utils/ObjectUtils\");\r\nvar ArrayUtils_1 = require(\"../utils/ArrayUtils\");\r\nvar HashMapObject_1 = require(\"../model/HashMapObject\");\r\nvar HTTPManagerGetRequest_1 = require(\"./httpmanager/HTTPManagerGetRequest\");\r\nvar HTTPManagerBaseRequest_1 = require(\"./httpmanager/HTTPManagerBaseRequest\");\r\n/**\r\n * Class that contains functionalities related to the HTTP protocol and its most common requests\r\n */\r\nvar HTTPManager = /** @class */ (function () {\r\n    /**\r\n     * Class that contains functionalities related to the HTTP protocol and its most common requests\r\n     *\r\n     * @param asynchronous Specify if the HTTP manager instance will work in asynchronous or synchronous mode.\r\n     * (Synchronous mode is NOT recommended on client side languages)\r\n     */\r\n    function HTTPManager(asynchronous) {\r\n        if (asynchronous === void 0) { asynchronous = true; }\r\n        /**\r\n         * If we want to use relative urls on all the requests that are executed by this class, we can define here a root\r\n         * url. All the request urls will then be composed as baseUrl + requestUrl.\r\n         *\r\n         * This property is useful when all the requests in our application share the same root url, which can be defined here.\r\n         */\r\n        this.baseUrl = '';\r\n        /**\r\n         * Defines if the http comunications made by this class will be synchronous (code execution will be stopped while\r\n         * waiting for the response) or asynchronous (execution flow will continue and response will be processed once received)\r\n         * Note: Synchronous requests are normally NOT, NOT a good idea on client side languages\r\n         */\r\n        this.asynchronous = true;\r\n        /**\r\n         * Defines how much miliseconds will the http requests wait before failing with a timeout.\r\n         * If set to 0, no value will be specifically defined, so the platform default will be used.\r\n         */\r\n        this.timeout = 0;\r\n        /**\r\n         * If this flag is enabled, any request that is made by this service which uses http:// instead of https:// will throw\r\n         * an exception. When disabled, non secure http:// requests will be allowed\r\n         */\r\n        this.isOnlyHttps = true;\r\n        /**\r\n         * Defines a list with internet urls that will be used to test network availability by the\r\n         * isInternetAvailable() method. We mainly use globally available CDN urls, cause these are\r\n         * not blocked by cross-orining policies on the browsers and are widely available and replicated.\r\n         * It may be interesting to add your own server side url at the bengining of this list, so it will\r\n         * be the first one to be tested, and you will also check that your server is correctly responding.\r\n         * Note that when an url request is successful, process ends and internet connection is considered\r\n         * to be working.\r\n         */\r\n        this.internetCheckLocations = ['https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js',\r\n            'https://ajax.aspnetcdn.com/ajax/modernizr/modernizr-2.8.3.js',\r\n            'https://code.jquery.com/jquery-3.2.1.slim.min.js'];\r\n        /**\r\n         * Structure containing all the created request queues and their status\r\n         */\r\n        this._queues = [];\r\n        /**\r\n         * A list of key value pairs that define post parameters that will be sent ALWAYS with all the requests that are\r\n         * performed by this class. We can use this feature for example to always send a token to web services, or other\r\n         * globally sent post values\r\n         */\r\n        this._globalPostParams = {};\r\n        if (typeof asynchronous !== 'boolean') {\r\n            throw new Error('asynchronous is not boolean');\r\n        }\r\n        this.asynchronous = asynchronous;\r\n    }\r\n    /**\r\n     * Set the value for a POST parameter that will be stored as a global POST parameter which will be always\r\n     * sent with all the http manager requests\r\n     *\r\n     * @param parameterName The name of the POST parameter that will be always sent to all the http requests\r\n     * @param value The value that the POST parameter will have\r\n     */\r\n    HTTPManager.prototype.setGlobalPostParam = function (parameterName, value) {\r\n        if (StringUtils_1.StringUtils.isEmpty(parameterName) || StringUtils_1.StringUtils.isEmpty(value)) {\r\n            throw new Error('parameterName and value must be non empty strings');\r\n        }\r\n        this._globalPostParams[parameterName] = value;\r\n    };\r\n    /**\r\n     * Check if the specified parameter name is defined as a global POST parameter\r\n     *\r\n     * @param parameterName The name of the POST parameter that we want to check\r\n     *\r\n     * @return True if the parameter exists, false otherwise\r\n     */\r\n    HTTPManager.prototype.isGlobalPostParam = function (parameterName) {\r\n        if (StringUtils_1.StringUtils.isEmpty(parameterName)) {\r\n            throw new Error('parameterName must be a non empty string');\r\n        }\r\n        return Object.keys(this._globalPostParams).indexOf(parameterName) >= 0;\r\n    };\r\n    /**\r\n     * Get the value for a previously defined global POST parameter\r\n     *\r\n     * @param parameterName The name of the POST parameter that we want to read\r\n     *\r\n     * @return The parameter value\r\n     */\r\n    HTTPManager.prototype.getGlobalPostParam = function (parameterName) {\r\n        if (!this.isGlobalPostParam(parameterName)) {\r\n            throw new Error('parameterName does not exist: ' + parameterName);\r\n        }\r\n        return this._globalPostParams[parameterName];\r\n    };\r\n    /**\r\n     * Delete a previously created global POST parameter so it is not sent with all the http manager requests anymore\r\n     *\r\n     * @param parameterName The name of the POST parameter that will be deleted\r\n     */\r\n    HTTPManager.prototype.deleteGlobalPostParam = function (parameterName) {\r\n        if (this.getGlobalPostParam(parameterName) !== '') {\r\n            delete this._globalPostParams[parameterName];\r\n        }\r\n    };\r\n    /**\r\n     * Create a new http queue. Requests can then be added to this queue with the queue() method.\r\n     *\r\n     * @param name The name we want to define for this queue\r\n     *\r\n     * @see this.queue()\r\n     *\r\n     * @returns void\r\n     */\r\n    HTTPManager.prototype.createQueue = function (name) {\r\n        if (StringUtils_1.StringUtils.isEmpty(name)) {\r\n            throw new Error('name must be a non empty string');\r\n        }\r\n        for (var _i = 0, _a = this._queues; _i < _a.length; _i++) {\r\n            var queue = _a[_i];\r\n            if (queue.name === name) {\r\n                throw new Error(\"queue \" + name + \" already exists\");\r\n            }\r\n        }\r\n        this._queues.push({ name: name, isRunning: false, pendingRequests: [] });\r\n    };\r\n    /**\r\n     * Get the number of created queues. Some may be running and some may be not\r\n     *\r\n     * @see this.queue()\r\n     *\r\n     * @return The number of existing queues\r\n     */\r\n    HTTPManager.prototype.countQueues = function () {\r\n        return this._queues.length;\r\n    };\r\n    /**\r\n     * Check if the specified queue is currently executing http requests\r\n     *\r\n     * @param name The name for the queue we want to check\r\n     *\r\n     * @see this.queue()\r\n     *\r\n     * @return boolean True if the specified queue is actually running its http requests\r\n     */\r\n    HTTPManager.prototype.isQueueRunning = function (name) {\r\n        if (StringUtils_1.StringUtils.isEmpty(name)) {\r\n            throw new Error('name must be a non empty string');\r\n        }\r\n        for (var _i = 0, _a = this._queues; _i < _a.length; _i++) {\r\n            var queue = _a[_i];\r\n            if (queue.name === name) {\r\n                return queue.isRunning;\r\n            }\r\n        }\r\n        throw new Error(\"queue \" + name + \" does not exist\");\r\n    };\r\n    /**\r\n     * Remove the specified queue from this manager.\r\n     * Make sure the queue is not running when calling this method, or an exception will happen\r\n     *\r\n     * @param name The name for the queue we want to remove\r\n     *\r\n     * @see this.queue()\r\n     *\r\n     * @return void\r\n     */\r\n    HTTPManager.prototype.deleteQueue = function (name) {\r\n        if (StringUtils_1.StringUtils.isEmpty(name)) {\r\n            throw new Error('name must be a non empty string');\r\n        }\r\n        for (var i = 0; i < this._queues.length; i++) {\r\n            if (this._queues[i].name === name) {\r\n                if (this._queues[i].isRunning) {\r\n                    throw new Error(\"queue \" + name + \" is currently running\");\r\n                }\r\n                this._queues.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n        throw new Error(\"queue \" + name + \" does not exist\");\r\n    };\r\n    /**\r\n     * This method generates a GET url query from a set of key/value pairs\r\n     *\r\n     * A query string is the part of an url that contains the GET parameters. It is placed after\r\n     * the ? symbol and contains a list of parameters and values that are sent to the url.\r\n     *\r\n     * @param keyValuePairs An object or a HashMapObject containing key/value pairs that will be used to construct the query string.\r\n     *        Note that when a value is an object or array, it will be encoded as a JSON string on the resulting query\r\n     *\r\n     * @see https://en.wikipedia.org/wiki/Query_string\r\n     * @see HashMapObject\r\n     *\r\n     * @return A valid query string that can be used with any url: http://www.url.com?query_string (Note that ? symbol is not included)\r\n     */\r\n    HTTPManager.prototype.generateUrlQueryString = function (keyValuePairs) {\r\n        var result = '';\r\n        var keys = [];\r\n        var values = [];\r\n        if (ObjectUtils_1.ObjectUtils.isObject(keyValuePairs) && ObjectUtils_1.ObjectUtils.getKeys(keyValuePairs).length > 0) {\r\n            if (keyValuePairs instanceof HashMapObject_1.HashMapObject) {\r\n                keys = keyValuePairs.getKeys();\r\n                values = keyValuePairs.getValues();\r\n            }\r\n            else {\r\n                keys = Object.getOwnPropertyNames(keyValuePairs);\r\n                for (var i = 0; i < keys.length; i++) {\r\n                    values.push(keyValuePairs[keys[i]]);\r\n                }\r\n            }\r\n            for (var i = 0; i < keys.length; i++) {\r\n                result += '&' + encodeURIComponent(keys[i]) + '=' + encodeURIComponent(StringUtils_1.StringUtils.isString(values[i]) ? values[i] : JSON.stringify(values[i]));\r\n            }\r\n            return result.substring(1, result.length);\r\n        }\r\n        throw new Error('keyValuePairs must be a HashMapObject or a non empty Object');\r\n    };\r\n    /**\r\n     * Tells if there's currently a working internet connection available or not.\r\n     *\r\n     * @param yesCallback Executed if the internet connection is available and working\r\n     * @param noCallback Executed if the internet connection is NOT available\r\n     *\r\n     * @return void\r\n     */\r\n    HTTPManager.prototype.isInternetAvailable = function (yesCallback, noCallback) {\r\n        var _this = this;\r\n        if (typeof yesCallback !== 'function' || typeof noCallback !== 'function') {\r\n            throw new Error('params must be functions');\r\n        }\r\n        if (this.internetCheckLocations.length <= 0) {\r\n            throw new Error('no check locations specified');\r\n        }\r\n        // A recursive function that will loop all the defined list of urls to check\r\n        // And execute the appropiate result callback\r\n        var recursiveUrlTest = function (urls) {\r\n            if (urls.length <= 0) {\r\n                return noCallback();\r\n            }\r\n            var url = urls.shift();\r\n            if (!StringUtils_1.StringUtils.isUrl(url)) {\r\n                throw new Error(\"invalid check url : \" + url);\r\n            }\r\n            // We must prevent the browser cache from giving false positives, so we generate\r\n            // an url containing a random GET parameter\r\n            _this.urlExists(String(url + '?r=' + StringUtils_1.StringUtils.generateRandom(15, 15)), yesCallback, function () { return recursiveUrlTest(urls); });\r\n        };\r\n        if (navigator.onLine === false) {\r\n            // Navigator.online is only fiable when it returns false. If it returns true, we still need to\r\n            // test the internet connectivity by performing a real check via recursiveUrlTest\r\n            noCallback();\r\n        }\r\n        else {\r\n            // Note that we use slice to create a clone of the array to prevent it from being modified\r\n            // by the recursive method\r\n            recursiveUrlTest(this.internetCheckLocations.slice(0));\r\n        }\r\n    };\r\n    /**\r\n     * Test if the specified url exists by trying to connect to it.\r\n     * Note that crossdomain security rules may prevent this method from working correctly if you try\r\n     * to check the existence of an url that does not allow CORS outside your application domain.\r\n     *\r\n     * @param url A full valid internet address to check\r\n     * @param yesCallback Executed if the url exists\r\n     * @param noCallback Executed if the url does not exist (or is not accessible).\r\n     *\r\n     * @return void\r\n     */\r\n    HTTPManager.prototype.urlExists = function (url, yesCallback, noCallback) {\r\n        if (!StringUtils_1.StringUtils.isString(url)) {\r\n            throw new Error('url must be a string');\r\n        }\r\n        if (typeof yesCallback !== 'function' || typeof noCallback !== 'function') {\r\n            throw new Error('params must be functions');\r\n        }\r\n        var composedUrl = this._composeUrl(this.baseUrl, url);\r\n        if (!StringUtils_1.StringUtils.isUrl(composedUrl)) {\r\n            noCallback();\r\n            return;\r\n        }\r\n        var request = new HTTPManagerGetRequest_1.HTTPManagerGetRequest(composedUrl);\r\n        request.successCallback = function () { return yesCallback(); };\r\n        request.errorCallback = function () { return noCallback(); };\r\n        this.execute(request);\r\n    };\r\n    /**\r\n     * Get the Http headers for a given url.\r\n     * Note that crossdomain security rules may prevent this method from working correctly\r\n     *\r\n     * @param url The url for which we want to get the http headers.\r\n     * @param successCallback Executed when headers are read. An array of strings will be passed to this method\r\n     *        containing all the read headers with each header line as an array element.\r\n     * @param errorCallback Executed if headers cannot be read. A string containing the error description and the error\r\n     *        code will be passed to this method.\r\n     *\r\n     * @return void\r\n     */\r\n    HTTPManager.prototype.getUrlHeaders = function (url, successCallback, errorCallback) {\r\n        var _this = this;\r\n        var composedUrl = this._composeUrl(this.baseUrl, url);\r\n        if (!StringUtils_1.StringUtils.isString(composedUrl)) {\r\n            throw new Error('url must be a string');\r\n        }\r\n        if (typeof successCallback !== 'function' || typeof errorCallback !== 'function') {\r\n            throw new Error('params must be functions');\r\n        }\r\n        if (!StringUtils_1.StringUtils.isUrl(composedUrl)) {\r\n            throw new Error('invalid url ' + composedUrl);\r\n        }\r\n        var xmlHttprequest = new XMLHttpRequest();\r\n        if (this.timeout > 0) {\r\n            xmlHttprequest.timeout = this.timeout;\r\n        }\r\n        xmlHttprequest.open('GET', composedUrl, this.asynchronous);\r\n        xmlHttprequest.onload = function () { return successCallback(xmlHttprequest.getAllResponseHeaders().split(\"\\n\")); };\r\n        xmlHttprequest.onerror = function () { return errorCallback(xmlHttprequest.statusText, xmlHttprequest.status); };\r\n        xmlHttprequest.ontimeout = function () { return errorCallback(_this.timeout + HTTPManager.ERROR_TIMEOUT, 408); };\r\n        this._executeXmlHttprequestSend(xmlHttprequest, composedUrl);\r\n    };\r\n    /**\r\n     * Launch one or more http requests without caring about their execution order.\r\n     *\r\n     * @param requests One or more requests to be inmediately launched (at the same time if possible). Each request can be defined as a string\r\n     *        that will be used as a GET request url, or as an HTTPManagerBaseRequest instance in case we want to define parameters and callbacks.\r\n     * @param finishedCallback A method to be executed once all the http requests have finished (either succesfully or with errors). The callback will\r\n     *        receive two parameters: results (an array with information about each request result in the same order as provided to this method) and\r\n     *        anyError (true if any of the requests has failed)\r\n     * @param progressCallback Executed after each one of the urls finishes (either successfully or with an error). A string with the requested url and\r\n     *        the total requests to perform will be passed to this method.\r\n     *\r\n     * @return void\r\n     */\r\n    HTTPManager.prototype.execute = function (requests, finishedCallback, progressCallback) {\r\n        var _this = this;\r\n        if (finishedCallback === void 0) { finishedCallback = null; }\r\n        if (progressCallback === void 0) { progressCallback = null; }\r\n        var requestsList = this._generateValidRequestsList(requests);\r\n        // Validate callbacks are ok\r\n        if ((finishedCallback !== null && !(finishedCallback instanceof Function)) ||\r\n            (progressCallback !== null && !(progressCallback instanceof Function))) {\r\n            throw new Error('finishedCallback and progressCallback must be functions');\r\n        }\r\n        var finishedCount = 0;\r\n        var finishedAnyError = false;\r\n        var finishedResults = [];\r\n        // A method that will be executed every time a request is finished (even successfully or with errors)\r\n        var processFinishedRequest = function (requestWithIndex, response, isError, errorMsg, code) {\r\n            var request = requestWithIndex.request;\r\n            var composedUrl = _this._composeUrl(_this.baseUrl, request.url);\r\n            var formattedResponse = response;\r\n            if (request.resultFormat === HTTPManagerBaseRequest_1.HTTPManagerBaseRequest.JSON) {\r\n                try {\r\n                    formattedResponse = JSON.parse(response);\r\n                }\r\n                catch (e) {\r\n                    if (!isError) {\r\n                        isError = true;\r\n                        errorMsg = 'Could not parse request result as a json string';\r\n                    }\r\n                }\r\n            }\r\n            finishedCount++;\r\n            finishedResults[requestWithIndex.index] = { url: composedUrl,\r\n                response: formattedResponse,\r\n                isError: isError,\r\n                errorMsg: errorMsg,\r\n                code: code };\r\n            if (isError) {\r\n                finishedAnyError = true;\r\n                request.errorCallback(errorMsg, code, response);\r\n            }\r\n            else {\r\n                request.successCallback(formattedResponse);\r\n            }\r\n            request.finallyCallback();\r\n            if (progressCallback !== null) {\r\n                progressCallback(composedUrl, requestsList.length);\r\n            }\r\n            if (finishedCount >= requestsList.length && finishedCallback !== null) {\r\n                finishedCallback(finishedResults, finishedAnyError);\r\n            }\r\n        };\r\n        var _loop_1 = function (i) {\r\n            var requestWithIndex = { index: i, request: requestsList[i] };\r\n            if (!StringUtils_1.StringUtils.isString(requestsList[i].url) || StringUtils_1.StringUtils.isEmpty(requestsList[i].url)) {\r\n                throw new Error(\"url \" + i + \" must be a non empty string\");\r\n            }\r\n            var xmlHttprequest;\r\n            try {\r\n                xmlHttprequest = new XMLHttpRequest();\r\n            }\r\n            catch (e) {\r\n                throw new Error(\"Could not initialize XMLHttpRequest. If running node, it is not natively available. We recommend npm xhr2 library that emulates XMLHttpRequest on node apps (global.XMLHttpRequest = require('xhr2'))\");\r\n            }\r\n            // Define the request timeout if specified on the request or the httpmanager class\r\n            if (requestsList[i].timeout > 0 || this_1.timeout > 0) {\r\n                xmlHttprequest.timeout = requestsList[i].timeout > 0 ? requestsList[i].timeout : this_1.timeout;\r\n            }\r\n            // Detect the request type\r\n            var composedUrl = this_1._composeUrl(this_1.baseUrl, requestsList[i].url);\r\n            var requestType = requestsList[i] instanceof HTTPManagerGetRequest_1.HTTPManagerGetRequest ? 'GET' : 'POST';\r\n            xmlHttprequest.open(requestType, composedUrl, this_1.asynchronous);\r\n            xmlHttprequest.onload = function () {\r\n                if (xmlHttprequest.status >= 200 && xmlHttprequest.status < 400) {\r\n                    processFinishedRequest(requestWithIndex, xmlHttprequest.responseText, false, '', xmlHttprequest.status);\r\n                }\r\n                else {\r\n                    processFinishedRequest(requestWithIndex, xmlHttprequest.responseText, true, xmlHttprequest.statusText, xmlHttprequest.status);\r\n                }\r\n            };\r\n            xmlHttprequest.onerror = function () {\r\n                processFinishedRequest(requestWithIndex, xmlHttprequest.responseText, true, xmlHttprequest.statusText, xmlHttprequest.status);\r\n            };\r\n            xmlHttprequest.ontimeout = function () {\r\n                processFinishedRequest(requestWithIndex, xmlHttprequest.responseText, true, _this.timeout + HTTPManager.ERROR_TIMEOUT, 408);\r\n            };\r\n            // Encode the GET request parameters if any and run the request\r\n            if (requestType === 'GET') {\r\n                // TODO - implement the GET request params\r\n                this_1._executeXmlHttprequestSend(xmlHttprequest, composedUrl);\r\n            }\r\n            // Encode the POST request parameters if any and run the request\r\n            if (requestType === 'POST' || Object.keys(this_1._globalPostParams).length > 0) {\r\n                try {\r\n                    var postParamsToSend = (requestType === 'POST') ? requestsList[i].parameters : {};\r\n                    // Add the global post parameters if any has been defined\r\n                    if (requestsList[i].ignoreGlobalPostParams === false) {\r\n                        for (var _i = 0, _a = Object.keys(this_1._globalPostParams); _i < _a.length; _i++) {\r\n                            var globalPostParam = _a[_i];\r\n                            if (postParamsToSend instanceof HashMapObject_1.HashMapObject) {\r\n                                postParamsToSend.set(globalPostParam, this_1._globalPostParams[globalPostParam]);\r\n                            }\r\n                            else {\r\n                                postParamsToSend[globalPostParam] = this_1._globalPostParams[globalPostParam];\r\n                            }\r\n                        }\r\n                    }\r\n                    xmlHttprequest.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\r\n                    xmlHttprequest.send(this_1.generateUrlQueryString(postParamsToSend));\r\n                }\r\n                catch (e) {\r\n                    this_1._executeXmlHttprequestSend(xmlHttprequest, composedUrl);\r\n                }\r\n            }\r\n        };\r\n        var this_1 = this;\r\n        // Execute each one of the received requests and process their results\r\n        for (var i = 0; i < requestsList.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n    };\r\n    /**\r\n     * Auxiliary method to call the send method for an XMLHttpRequest with more explanatory error checking\r\n     *\r\n     * NOTE: this method is exclusive for the typescript / javascript versions of turbocommons\r\n     */\r\n    HTTPManager.prototype._executeXmlHttprequestSend = function (xmlHttprequest, url) {\r\n        try {\r\n            xmlHttprequest.send();\r\n        }\r\n        catch (e) {\r\n            throw new Error('HTTPManager could not execute request to ' + url + '\\n' + e.toString());\r\n        }\r\n    };\r\n    /**\r\n     * Auxiliary method to generate a valid list of HTTPManagerBaseRequest instances from multiple sources\r\n     */\r\n    HTTPManager.prototype._generateValidRequestsList = function (requests) {\r\n        // Convert the received requests to a standarized array of HTTPManagerBaseRequest instances\r\n        var requestsList = [];\r\n        if (ArrayUtils_1.ArrayUtils.isArray(requests)) {\r\n            if (requests.length <= 0) {\r\n                throw new Error('No requests to execute');\r\n            }\r\n            for (var _i = 0, _a = requests; _i < _a.length; _i++) {\r\n                var requestItem = _a[_i];\r\n                if (StringUtils_1.StringUtils.isString(requestItem)) {\r\n                    requestsList.push(new HTTPManagerGetRequest_1.HTTPManagerGetRequest(requestItem));\r\n                }\r\n                else {\r\n                    requestsList.push(requestItem);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (StringUtils_1.StringUtils.isString(requests) && !StringUtils_1.StringUtils.isEmpty(requests)) {\r\n                requestsList = [new HTTPManagerGetRequest_1.HTTPManagerGetRequest(requests)];\r\n            }\r\n            else if (requests instanceof HTTPManagerBaseRequest_1.HTTPManagerBaseRequest) {\r\n                requestsList = [requests];\r\n            }\r\n            else {\r\n                throw new Error('Invalid requests value');\r\n            }\r\n        }\r\n        return requestsList;\r\n    };\r\n    /**\r\n     * Sequentially launch one or more http requests to the specified queue, one after the other.\r\n     * Each request will start inmediately after the previous one is finished (either succesfully or with an error).\r\n     * We can have several independent queues that run their requests at the same time.\r\n     *\r\n     * @param requests One or more requests that must be added to the specified queue. Each request can be defined as a string\r\n     *        that will be used as a GET request url, or as an HTTPManagerBaseRequest instance in case we want to define parameters and callbacks.\r\n     *        Requests will be sequentially executed one after the other in the same order. If the specified queue contains requests\r\n     *        that have not finished yet, they will be executed before the ones provided here.\r\n     * @param queueName The name for an existing queue (created with this.createQueue()) where the specified requests will be added\r\n     * @param finishedAllCallback A method that will be executed once all the queued requests by this method have finished. Note that\r\n     *        if the specified queue already contains running requests, the current ones will be added to be executed after and\r\n     *        when all have finished, this method will be called.\r\n     *\r\n     * @returns void\r\n     */\r\n    HTTPManager.prototype.queue = function (requests, queueName, finishedCallback) {\r\n        // TODO - this method is almost finished, but some things are pending:\r\n        // 1- FinishedCallback should work the same way as the execute method, and give us the results data and info\r\n        // 2- There should be a progressCallback method\r\n        // 3- Extensive tests must be written: verify requests are sequentially executed one after the other, and all\r\n        //    the rest of the expected behaviour\r\n        if (finishedCallback === void 0) { finishedCallback = null; }\r\n        var requestsList = this._generateValidRequestsList(requests);\r\n        // Validate callbacks are ok\r\n        if ((finishedCallback !== null && !(finishedCallback instanceof Function))) {\r\n            throw new Error('finishedCallback and progressCallback must be functions');\r\n        }\r\n        for (var _i = 0, _a = this._queues; _i < _a.length; _i++) {\r\n            var queue = _a[_i];\r\n            if (queue.name === queueName) {\r\n                // Add all the received requests to the beginning of the queue pending array\r\n                for (var i = 0; i < requestsList.length; i++) {\r\n                    queue.pendingRequests.unshift(requestsList[i]);\r\n                }\r\n                // Add a dummy request with a special url, containing the finished callback method\r\n                // to be executed after all the requests are done\r\n                if (finishedCallback !== null) {\r\n                    var dummyRequest = new HTTPManagerGetRequest_1.HTTPManagerGetRequest('FINISHED_REQUEST_CALLBACK');\r\n                    dummyRequest.finallyCallback = finishedCallback;\r\n                    queue.pendingRequests.unshift(dummyRequest);\r\n                }\r\n                // Run the queue if it is not already processing requests\r\n                if (!this.isQueueRunning(queueName)) {\r\n                    this._startQueue(queueName);\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        throw new Error(\"queue \" + queueName + \" does not exist. Create it with createQueue()\");\r\n    };\r\n    /**\r\n     * Auxiliary method that is used to begin executing the http requests that are pending on the specified queue.\r\n     * A recursive operation will be used to launch the next http request once the previous has totally finished.\r\n     *\r\n     * @param name The name for the queue we want to start\r\n     *\r\n     * @returns void\r\n     */\r\n    HTTPManager.prototype._startQueue = function (name) {\r\n        var _this = this;\r\n        // Recursive method that will perform the calls to the queue requests\r\n        var runRequests = function (queue) {\r\n            if (queue.pendingRequests.length <= 0) {\r\n                queue.isRunning = false;\r\n            }\r\n            else {\r\n                // Check if a finished queue callback must be called\r\n                if (queue.pendingRequests[queue.pendingRequests.length - 1].url === 'FINISHED_REQUEST_CALLBACK') {\r\n                    var finallyCallback = queue.pendingRequests.pop();\r\n                    if (queue.pendingRequests.length <= 0) {\r\n                        queue.isRunning = false;\r\n                    }\r\n                    finallyCallback.finallyCallback();\r\n                }\r\n                if (queue.pendingRequests.length > 0) {\r\n                    queue.isRunning = true;\r\n                    _this.execute(queue.pendingRequests.pop(), function () { return runRequests(queue); });\r\n                }\r\n            }\r\n        };\r\n        // Find the requested queue and start the recursive execution on it\r\n        for (var _i = 0, _a = this._queues; _i < _a.length; _i++) {\r\n            var queue = _a[_i];\r\n            if (queue.name === name) {\r\n                runRequests(queue);\r\n                return;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Given a url with a list of resources (normally files), this method will perform a request for each one of them and\r\n     * store the whole file contents as an element of a result array. After all the process completes, the array containing all the loaded\r\n     * data will be available by the successCallback method.\r\n     *\r\n     * This is a technique that allows us to read a big list of files from an http server without needing to\r\n     * write much code. We simply put the files on the server, create a list with all the file names, provide the base url for all the files,\r\n     * and call this method. When the process succeeds, we will have all the files data loaded and ready to be used. We have also a progress callback\r\n     * that will notify us when each one of the files is correctly loaded.\r\n     *\r\n     * @param urlToListOfResources An url that gives us the list of resources to be loaded (normally a plain list of file names)\r\n     * @param baseUrl A url that will be used as the root for all the files of the list when the load is performed. This usually is the path\r\n     *                 to the url folder that contains the files. Each request to a file will be composed with this baseUrl + the respective entry of the file\r\n     *                 on urlToListOfResources\r\n     * @param successCallback Executed once all the resources have been loaded. Two parameters will be passed to this method: An array with\r\n     *                        The list of resources as they are defined on the urlToListOfResources, and an array containing all the data for each\r\n     *                        one of these resources.\r\n     * @param errorCallback Executed if a failure happens on any of the requests. The url that caused the error,\r\n     *                      the error description and the error code will be passed to this method.\r\n     * @param progressCallback Executed after each one of the resources is correctly loaded. A string with the correctly\r\n     *                         requested url will be passed to this method.\r\n     *\r\n     * @returns void\r\n     */\r\n    HTTPManager.prototype.loadResourcesFromList = function (urlToListOfResources, baseUrl, successCallback, errorCallback, progressCallback) {\r\n        var _this = this;\r\n        if (progressCallback === void 0) { progressCallback = null; }\r\n        if (!StringUtils_1.StringUtils.isString(urlToListOfResources) || StringUtils_1.StringUtils.isEmpty(urlToListOfResources)) {\r\n            throw new Error('urlToListOfResources must be a non empty string');\r\n        }\r\n        if (!StringUtils_1.StringUtils.isString(baseUrl) || StringUtils_1.StringUtils.isEmpty(baseUrl)) {\r\n            throw new Error('baseUrl must be a non empty string');\r\n        }\r\n        this.execute(urlToListOfResources, function (results, _anyError) {\r\n            if (results[0].isError) {\r\n                return errorCallback(urlToListOfResources, results[0].errorMsg, results[0].code);\r\n            }\r\n            var resourcesFullUrls = [];\r\n            var resourcesList = StringUtils_1.StringUtils.getLines(results[0].response);\r\n            for (var _i = 0, resourcesList_1 = resourcesList; _i < resourcesList_1.length; _i++) {\r\n                var resource = resourcesList_1[_i];\r\n                resourcesFullUrls.push(StringUtils_1.StringUtils.formatPath(_this._composeUrl(baseUrl, resource), '/'));\r\n            }\r\n            _this.execute(resourcesFullUrls, function (results, _anyError) {\r\n                var resultsData = [];\r\n                for (var _i = 0, results_1 = results; _i < results_1.length; _i++) {\r\n                    var result = results_1[_i];\r\n                    if (result.isError) {\r\n                        return errorCallback(result.url, result.errorMsg, result.code);\r\n                    }\r\n                    resultsData.push(result.response);\r\n                }\r\n                successCallback(resourcesList, resultsData);\r\n            }, progressCallback);\r\n        });\r\n    };\r\n    /**\r\n     * Auxiliary method to join two urls: A base one, and a relative one\r\n     *\r\n     * If a full absolute url is passed to the relativeUrl variable, the result of this method will be the relative one, ignoring\r\n     * any possible value on baseUrl.\r\n     */\r\n    HTTPManager.prototype._composeUrl = function (baseUrl, relativeUrl) {\r\n        var composedUrl = '';\r\n        if (StringUtils_1.StringUtils.isEmpty(baseUrl) ||\r\n            relativeUrl.substr(0, 5) === 'http:' ||\r\n            relativeUrl.substr(0, 6) === 'https:') {\r\n            composedUrl = relativeUrl;\r\n        }\r\n        else {\r\n            composedUrl = StringUtils_1.StringUtils.replace(StringUtils_1.StringUtils.formatPath(baseUrl + '/' + relativeUrl, '/'), ['http:/', 'https:/'], ['http://', 'https://'], 1);\r\n        }\r\n        if (this.isOnlyHttps && composedUrl.substr(0, 5).toLowerCase() === 'http:') {\r\n            throw new Error('Non secure http requests are forbidden. Set isOnlyHttps=false to allow ' + composedUrl);\r\n        }\r\n        return composedUrl;\r\n    };\r\n    /**\r\n     * Error message that is used when a timeout happens\r\n     */\r\n    HTTPManager.ERROR_TIMEOUT = ' ms Timeout reached';\r\n    return HTTPManager;\r\n}());\r\nexports.HTTPManager = HTTPManager;\r\n//# sourceMappingURL=HTTPManager.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar HTTPManagerBaseRequest_1 = require(\"./HTTPManagerBaseRequest\");\r\n/**\r\n * Class that defines a POST http request, to be used by HttpManager\r\n */\r\nvar HTTPManagerPostRequest = /** @class */ (function (_super) {\r\n    __extends(HTTPManagerPostRequest, _super);\r\n    function HTTPManagerPostRequest() {\r\n        var _this = _super !== null && _super.apply(this, arguments) || this;\r\n        /**\r\n         * A list of key / value pairs that will be sent as POST parameters for the request.\r\n         *\r\n         * String is the default format for these values, so if any of the parameters specified here is not a string, it will be\r\n         * passed through a JSON encoder to obtaion the string that will be sent to the request.\r\n         */\r\n        _this.parameters = {};\r\n        return _this;\r\n    }\r\n    return HTTPManagerPostRequest;\r\n}(HTTPManagerBaseRequest_1.HTTPManagerBaseRequest));\r\nexports.HTTPManagerPostRequest = HTTPManagerPostRequest;\r\n//# sourceMappingURL=HTTPManagerPostRequest.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringUtils_1 = require(\"../utils/StringUtils\");\r\nvar ArrayUtils_1 = require(\"../utils/ArrayUtils\");\r\nvar JavaPropertiesObject_1 = require(\"../model/JavaPropertiesObject\");\r\n/**\r\n * Fully featured translation manager to be used with any application that requires text internationalization.\r\n */\r\nvar LocalizationManager = /** @class */ (function () {\r\n    function LocalizationManager() {\r\n        /**\r\n         * Defines the behaviour for get(), getStartCase(), etc... methods when a key is not found on\r\n         * a bundle or the bundle does not exist\r\n         *\r\n         * If this value is empty, all missing keys will return an empty value\r\n         * If this value contains a string, all missing keys will return that string\r\n         * If this value contains a string with some of the following wildcards:\r\n         *    - $key will be replaced with the key name. For example: get(\"NAME\") will output [NAME] if the key is not found and missingKeyFormat = '[$key]'\r\n         *    - $exception (This is the default value) will throw an exception with the problem cause description.\r\n         */\r\n        this.missingKeyFormat = '$exception';\r\n        /**\r\n         * Wildcards are string fragments that are placed inside the translated texts. Their main purpose is to be replaced at\r\n         * runtime by custom values like for example a user name, a date, a numeric value, etc..\r\n         *\r\n         * This class helps with this process by including a parameter called 'toReplace' on all .get methods which allows us\r\n         * to specify a string or list of strings that will replace the respective wildcards on the translated text. Each wildcard\r\n         * must follow the format specified here, and contain a numeric digit that will be used to find the replacement text at the\r\n         * 'toReplace' list. For example, if we define $N as the wildcard format, and we have a translation that contains $0, $1, $2,\r\n         * $0 will be replaced with the first element on toReplace, $1 with the second and so.\r\n         *\r\n         * Note that N is mandayory on the wildcards format and the first index value is 0.\r\n         */\r\n        this.wildCardsFormat = '{N}';\r\n        /**\r\n         * If set to true, when we call any get method from this class to retrieve a translated text, we will be forced\r\n         * to provide the bundle for the key we are looking for. If set to false, only the key parameter will be required.\r\n         */\r\n        this.isBundleMandatory = false;\r\n        /**\r\n         * Tells if the class has been initialized or not\r\n         */\r\n        this._initialized = false;\r\n        /**\r\n         * @see this.locales()\r\n         */\r\n        this._locales = [];\r\n        /**\r\n         * @see this.languages()\r\n         */\r\n        this._languages = [];\r\n        /**\r\n         * Stores the latest resource bundle that's been used to read a localized value.\r\n         * This is used by default when calling get without a bundle value\r\n         */\r\n        this._activeBundle = '';\r\n        /**\r\n         * Stores the label for the latest location that's been used to read a localized value\r\n         * This is used by default when calling get without a location value\r\n         */\r\n        this._activeLocation = '';\r\n        /**\r\n         * Stores all the provided location definitions\r\n         */\r\n        this._definedLocations = [];\r\n        /**\r\n         * Stores all the loaded localization data by location name, locales, bundle and key\r\n         */\r\n        this._loadedTranslations = {};\r\n        /**\r\n         * A files manager instance used to load the data when paths are from file system.\r\n         *\r\n         * (Note that FilesManager class is part of the TurboDepot library)\r\n         */\r\n        this._filesManager = null;\r\n        /**\r\n         * An http manager instance used to load the data when paths are urls\r\n         */\r\n        this._httpManager = null;\r\n    }\r\n    /**\r\n     * Check if the class has been correctly initialized\r\n     */\r\n    LocalizationManager.prototype.isInitialized = function () {\r\n        return this._initialized;\r\n    };\r\n    /**\r\n     * Checks if the specified locale is currently loaded for the currently defined bundles and paths.\r\n     *\r\n     * @param locale A locale to check. For example 'en_US'\r\n     *\r\n     * @return True if the locale is currently loaded on the class, false if not.\r\n     */\r\n    LocalizationManager.prototype.isLocaleLoaded = function (locale) {\r\n        return (this._locales.indexOf(locale) >= 0);\r\n    };\r\n    /**\r\n     * Checks if the specified 2 digit language is currently loaded for the currently defined bundles and paths.\r\n     *\r\n     * @param language A language to check. For example 'en'\r\n     *\r\n     * @return True if the language is currently loaded on the class, false if not.\r\n     */\r\n    LocalizationManager.prototype.isLanguageLoaded = function (language) {\r\n        if (language.length !== 2) {\r\n            throw new Error('language must be a valid 2 digit value');\r\n        }\r\n        return (this._languages.indexOf(language) >= 0);\r\n    };\r\n    /**\r\n     * Performs the initial data load by looking for resource bundles on all the specified locations.\r\n     * All the translations will be loaded for each of the specified locales.\r\n     *\r\n     * Calling this method is mandatory before starting to use this class.\r\n     *\r\n     * @param locationsLoader An instance of HTTPManager or FilesManager that will be used to load the provided locations. If we are working\r\n     *        with paths that are urls, we will pass here an HTTPManager. If we are working with file system paths, we will pass a FilesManager.\r\n     *        (Note that FilesManager class is part of the TurboDepot library)\r\n     * @param locales List of languages for which we want to load the translations. The list also defines the preferred\r\n     *        translation order when a specified key is not found for a locale.\r\n     * @param locations A list (sorted by preference) where each item defines a translations location and must have three properties:\r\n     *        - label: A name that will be used to reference the location\r\n     *        - path: A relative or absolute string that defines a location where resourcebundles reside. It must contain some wildcards:\r\n     *          - $locale wildcard will be replaced by each specific locale when trying to reach a path\r\n     *          - $bundle wildcard will be replaced by each specific bundle name when trying to reach a path\r\n     *              Example1: 'myFolder/$locale/$bundle.txt' will resolve to\r\n     *                        'myFolder/en_US/Customers.txt' when trying to load the Customers bundle for US english locale.\r\n     *              Example2: 'myFolder/$bundle_$locale.properties' will resolve to\r\n     *                        'myFolder/Customers_en_US.properties' when trying to load the Customers bundle for US english locale.\r\n     *        - bundles: The list of bundles to be loaded from the specified path\r\n     * @param finishedCallback A method that will be executed once the initialization ends. An errors variable will be passed\r\n     *        to this method containing an array with information on errors that may have happened while loading the data.\r\n     * @param progressCallback A method that can be used to track the loading progress when lots of bundles and locales are used.\r\n     *\r\n     * @return void\r\n     */\r\n    LocalizationManager.prototype.initialize = function (locationsLoader, locales, locations, finishedCallback, progressCallback) {\r\n        var _this = this;\r\n        if (finishedCallback === void 0) { finishedCallback = null; }\r\n        if (progressCallback === void 0) { progressCallback = null; }\r\n        if (locationsLoader) {\r\n            this._httpManager = locationsLoader;\r\n        }\r\n        else {\r\n            this._filesManager = locationsLoader;\r\n        }\r\n        this._locales = [];\r\n        this._languages = [];\r\n        this._activeBundle = '';\r\n        this._activeLocation = '';\r\n        this._definedLocations = locations;\r\n        this._loadedTranslations = {};\r\n        // Validate the locations are correctly defined\r\n        if (!ArrayUtils_1.ArrayUtils.isArray(locations) || locations.length <= 0) {\r\n            throw new Error('Locations must be an array of objects');\r\n        }\r\n        for (var _i = 0, locations_1 = locations; _i < locations_1.length; _i++) {\r\n            var location_1 = locations_1[_i];\r\n            if (!location_1.label || StringUtils_1.StringUtils.isEmpty(location_1.label) ||\r\n                !location_1.path || StringUtils_1.StringUtils.isEmpty(location_1.path) ||\r\n                !location_1.bundles || !ArrayUtils_1.ArrayUtils.isArray(location_1.bundles)) {\r\n                throw new Error('Invalid locations specified');\r\n            }\r\n        }\r\n        this._loadData(locales, locations.map(function (l) { return { label: l.label, bundles: l.bundles }; }), function (errors) {\r\n            _this._initialized = true;\r\n            if (finishedCallback !== null) {\r\n                finishedCallback(errors);\r\n            }\r\n        }, progressCallback);\r\n    };\r\n    /**\r\n     * Adds extra locales to the end of the list of currently active locales and load its related translation data.\r\n     *\r\n     * This method can only be called after the class has been initialized in case we need to load the translations for more languages.\r\n     * If any of the provided new locales is already loaded, its translation data will be refreshed\r\n     *\r\n     * @param locales List of languages for which we want to load the translations. The list will be appended at the end of any previously\r\n     *        loaded locales and included in the preferred translation order. The translation data will be loaded from all the currently defined locations.\r\n     * @param finishedCallback A method that will be executed once the load ends. An errors variable will be passed\r\n     *        to this method containing an array with information on errors that may have happened while loading the data.\r\n     * @param progressCallback A method that can be used to track the loading progress when lots of bundles and locales are used.\r\n     *\r\n     * @return void\r\n     */\r\n    LocalizationManager.prototype.loadLocales = function (locales, finishedCallback, progressCallback) {\r\n        if (finishedCallback === void 0) { finishedCallback = null; }\r\n        if (progressCallback === void 0) { progressCallback = null; }\r\n        if (!this._initialized) {\r\n            throw new Error('LocalizationManager not initialized. Call initialize() before loading more locales');\r\n        }\r\n        this._loadData(locales, this._definedLocations.map(function (l) { return { label: l.label, bundles: l.bundles }; }), finishedCallback, progressCallback);\r\n    };\r\n    /**\r\n     * Loads on the specified location the translation data for the specified bundles.\r\n     * This method can only be called after the class has been initialized in case we need to refresh or add more bundles to an already loaded location.\r\n     *\r\n     * @param bundles List of bundles to load from the specified location\r\n     * @param location The label for an already defined location. The extra bundles translation data will be added to the already loaded ones. If not defined,\r\n     *        the current active location will be used.\r\n     * @param finishedCallback A method that will be executed once the load ends. An errors variable will be passed\r\n     *        to this method containing an array with information on errors that may have happened while loading the data.\r\n     * @param progressCallback A method that can be used to track the loading progress when lots of bundles and locales are used.\r\n     *\r\n     * @see this.initialize()\r\n     *\r\n     * @return void\r\n     */\r\n    LocalizationManager.prototype.loadBundles = function (bundles, location, finishedCallback, progressCallback) {\r\n        if (location === void 0) { location = ''; }\r\n        if (finishedCallback === void 0) { finishedCallback = null; }\r\n        if (progressCallback === void 0) { progressCallback = null; }\r\n        if (!ArrayUtils_1.ArrayUtils.isArray(bundles) || bundles.length === 0) {\r\n            throw new Error('no bundles specified to load on ' + location + ' location');\r\n        }\r\n        if (!this._initialized) {\r\n            throw new Error('LocalizationManager not initialized. Call initialize() before loading more bundles to a location');\r\n        }\r\n        // If no location specified, use the active one\r\n        if (location === '') {\r\n            location = this._activeLocation;\r\n        }\r\n        this._loadData(this._locales, [{ label: location, bundles: bundles }], finishedCallback, progressCallback);\r\n    };\r\n    /**\r\n     * Auxiliary method used to perform the translation data load\r\n     *\r\n     * @see this.initialize()\r\n     *\r\n     * @param locales List of locales to load\r\n     * @param locations A list of locations and respective bundles to be loaded\r\n     * @param finishedCallback A method that will be executed once the load ends. An errors variable will be passed\r\n     *        to this method containing an array with information on errors that may have happened while loading the data.\r\n     * @param progressCallback Executed after each request is performed\r\n     */\r\n    LocalizationManager.prototype._loadData = function (locales, locations, finishedCallback, progressCallback) {\r\n        if (finishedCallback === void 0) { finishedCallback = null; }\r\n        if (progressCallback === void 0) { progressCallback = null; }\r\n        if (!ArrayUtils_1.ArrayUtils.isArray(locales) || locales.length <= 0) {\r\n            throw new Error('no locales defined');\r\n        }\r\n        // Generate the list of paths to be loaded\r\n        var pathsToLoad = [];\r\n        var pathsToLoadInfo = [];\r\n        for (var _i = 0, locations_2 = locations; _i < locations_2.length; _i++) {\r\n            var location_2 = locations_2[_i];\r\n            for (var _a = 0, _b = location_2.bundles; _a < _b.length; _a++) {\r\n                var bundle = _b[_a];\r\n                for (var _c = 0, locales_1 = locales; _c < locales_1.length; _c++) {\r\n                    var locale = locales_1[_c];\r\n                    var locationFound = false;\r\n                    for (var _d = 0, _e = this._definedLocations; _d < _e.length; _d++) {\r\n                        var definedLocation = _e[_d];\r\n                        if (definedLocation.label === location_2.label) {\r\n                            locationFound = true;\r\n                            pathsToLoadInfo.push({ locale: locale, bundle: bundle, location: location_2.label });\r\n                            pathsToLoad.push(StringUtils_1.StringUtils.replace(definedLocation.path, ['$locale', '$bundle'], [locale, bundle]));\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!locationFound) {\r\n                        throw new Error('Undefined location: ' + location_2.label);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._locales = this._locales.concat(locales);\r\n        this._locales = ArrayUtils_1.ArrayUtils.removeDuplicateElements(this._locales);\r\n        this._languages = this._locales.map(function (l) { return l.substr(0, 2); });\r\n        if (this._activeLocation === '') {\r\n            this._activeLocation = locations[locations.length - 1].label;\r\n        }\r\n        if (this._filesManager !== null) {\r\n            // TODO this._loadDataFromFiles(pathsToLoad, pathsToLoadInfo, finishedCallback, progressCallback);\r\n        }\r\n        else {\r\n            this._loadDataFromUrls(pathsToLoad, pathsToLoadInfo, finishedCallback, progressCallback);\r\n        }\r\n    };\r\n    /**\r\n     * Perform the paths load from file system\r\n     *\r\n     * @param pathsToLoad list of paths that need to be loaded\r\n     * @param pathsToLoadInfo original info about the paths to load\r\n     * @param finishedCallback method to execute once finished\r\n     * @param progressCallback method to execute after each path is loaded\r\n     */\r\n    //    private _loadDataFromFiles(pathsToLoad: string[],\r\n    //                               pathsToLoadInfo: any[],\r\n    //                               finishedCallback: ((errors: {path:string, errorMsg:string, errorCode:number}[]) => void) | null = null,\r\n    //                               progressCallback: ((completedUrl: string, totalUrls: number) => void) | null = null){\r\n    //        \r\n    //        // TODO\r\n    //        // Use the filesManager instance to load all the locales from the specified paths\r\n    //    }\r\n    /**\r\n     * Perform the paths load from urls\r\n     *\r\n     * @param pathsToLoad list of paths that need to be loaded\r\n     * @param pathsToLoadInfo original info about the paths to load\r\n     * @param finishedCallback method to execute once finished\r\n     * @param progressCallback method to execute after each path is loaded\r\n     */\r\n    LocalizationManager.prototype._loadDataFromUrls = function (pathsToLoad, pathsToLoadInfo, finishedCallback, progressCallback) {\r\n        var _this = this;\r\n        if (finishedCallback === void 0) { finishedCallback = null; }\r\n        if (progressCallback === void 0) { progressCallback = null; }\r\n        // Aux method to execute when data load is done\r\n        var processWhenDone = function (errors) {\r\n            if (errors === void 0) { errors = []; }\r\n            if (pathsToLoadInfo.length > 0) {\r\n                _this._activeBundle = pathsToLoadInfo[pathsToLoadInfo.length - 1].bundle;\r\n            }\r\n            if (finishedCallback !== null) {\r\n                finishedCallback(errors);\r\n            }\r\n        };\r\n        if (pathsToLoad.length <= 0) {\r\n            processWhenDone();\r\n            return;\r\n        }\r\n        this._httpManager.execute(pathsToLoad, function (results, _anyError) {\r\n            var errors = [];\r\n            for (var i = 0; i < results.length; i++) {\r\n                if (results[i].isError) {\r\n                    errors.push({\r\n                        path: results[i].url,\r\n                        errorMsg: results[i].errorMsg,\r\n                        errorCode: results[i].code\r\n                    });\r\n                }\r\n                else {\r\n                    var locale = pathsToLoadInfo[i].locale;\r\n                    var bundle = pathsToLoadInfo[i].bundle;\r\n                    var location_3 = pathsToLoadInfo[i].location;\r\n                    var bundleFormat = StringUtils_1.StringUtils.getPathExtension(pathsToLoad[i]);\r\n                    if (!_this._loadedTranslations.hasOwnProperty(location_3)) {\r\n                        _this._loadedTranslations[location_3] = {};\r\n                    }\r\n                    if (!_this._loadedTranslations[location_3].hasOwnProperty(locale)) {\r\n                        _this._loadedTranslations[location_3][locale] = {};\r\n                    }\r\n                    _this._loadedTranslations[location_3][locale][bundle] = bundleFormat === 'json' ?\r\n                        _this.parseJson(results[i].response) :\r\n                        _this.parseProperties(results[i].response);\r\n                }\r\n            }\r\n            processWhenDone(errors);\r\n        }, function (completedUrl, totalRequests) {\r\n            if (progressCallback !== null) {\r\n                progressCallback(completedUrl, totalRequests);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * A list of strings containing the locales that are used by this class to translate the given keys, sorted by preference.\r\n     * Each string is formatted as a standard locale code with language and country joined by an underscore, like: en_US, fr_FR\r\n     *\r\n     * When a key and bundle are requested for translation, the class will check on the first language of this\r\n     * list for a translated text. If missing, the next one will be used, and so. This list is constructed after the initialize\r\n     * or loadLocales methods are called.\r\n     *\r\n     * @example: After loading the following list of locales ['en_US', 'es_ES', 'fr_FR'] if we call localizationManager.get('HELLO', 'Greetings')\r\n     * the localization manager will try to locate the en_US value for the HELLO tag on the Greetings bundle. If the tag is not found for the\r\n     * specified locale and bundle, the same search will be performed for the es_ES locale, and so, till a value is found or no more locales\r\n     * are defined.\r\n     */\r\n    LocalizationManager.prototype.locales = function () {\r\n        return this._locales;\r\n    };\r\n    /**\r\n     * A list of strings containing the languages that are used by this class to translate the given keys, sorted by preference.\r\n     * Each string is formatted as a 2 digit language code, like: en, fr\r\n     *\r\n     * This list is the same as the locales() one, but containing only the language part of each locale (the first two digits)\r\n     *\r\n     * @see this.locales()\r\n     */\r\n    LocalizationManager.prototype.languages = function () {\r\n        return this._languages;\r\n    };\r\n    /**\r\n     * Get the bundle that is currently being used by default when traslating texts\r\n     *\r\n     * @return The name for the currently active bundle\r\n     */\r\n    LocalizationManager.prototype.activeBundle = function () {\r\n        return this._activeBundle;\r\n    };\r\n    /**\r\n     * Get the first locale from the list of loaded locales, which is the currently used to search for translated texts.\r\n     *\r\n     * @return The locale that is defined as the primary one. For example: en_US, es_ES, ..\r\n     */\r\n    LocalizationManager.prototype.primaryLocale = function () {\r\n        if (!this._initialized) {\r\n            throw new Error('LocalizationManager not initialized');\r\n        }\r\n        return this._locales[0];\r\n    };\r\n    /**\r\n     * Get the first language from the list of loaded locales, which is the currently used to search for translated texts.\r\n     *\r\n     * @return The 2 digit language code that is defined as the primary one. For example: en, es, ..\r\n     */\r\n    LocalizationManager.prototype.primaryLanguage = function () {\r\n        if (!this._initialized) {\r\n            throw new Error('LocalizationManager not initialized');\r\n        }\r\n        return this._languages[0];\r\n    };\r\n    /**\r\n     * Define the bundle that is used by default when no bundle is specified on the get methods\r\n     *\r\n     * @param bundle A currently loaded bundle to be used as the active one\r\n     *\r\n     * @return void\r\n     */\r\n    LocalizationManager.prototype.setActiveBundle = function (bundle) {\r\n        for (var _i = 0, _a = Object.keys(this._loadedTranslations); _i < _a.length; _i++) {\r\n            var location_4 = _a[_i];\r\n            for (var _b = 0, _c = Object.keys(this._loadedTranslations[location_4]); _b < _c.length; _b++) {\r\n                var locale = _c[_b];\r\n                if (Object.keys(this._loadedTranslations[location_4][locale]).indexOf(bundle) >= 0) {\r\n                    this._activeBundle = bundle;\r\n                    this._activeLocation = location_4;\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        throw new Error('Bundle <' + bundle + '> not loaded');\r\n    };\r\n    /**\r\n     * Define the locale that will be placed at the front of the currently loaded locales list (moving all the others one position to the right).\r\n     *\r\n     * This will be the first locale to use when trying to get a translation.\r\n     *\r\n     * @param locale A currently loaded locale that will be moved to the first position of the loaded locales list. If the specified locale\r\n     *        is not currently loaded, an exception will happen.\r\n     *\r\n     * @return void\r\n     */\r\n    LocalizationManager.prototype.setPrimaryLocale = function (locale) {\r\n        if (!StringUtils_1.StringUtils.isString(locale)) {\r\n            throw new Error('Invalid locale value');\r\n        }\r\n        if (!this.isLocaleLoaded(locale)) {\r\n            throw new Error(locale + ' not loaded');\r\n        }\r\n        var result = [locale];\r\n        for (var _i = 0, _a = this._locales; _i < _a.length; _i++) {\r\n            var l = _a[_i];\r\n            if (l !== locale) {\r\n                result.push(l);\r\n            }\r\n        }\r\n        this._locales = result;\r\n        this._languages = this._locales.map(function (l) { return l.substr(0, 2); });\r\n    };\r\n    /**\r\n     * Moves the specified locales to the beginning of the locales list. This also alters the translation priority by setting the first\r\n     * provided locale as the most prioritary, the second as the next one and so.\r\n     *\r\n     * This method basically works exactly the same way as setPrimaryLocale but letting us add many locales at once.\r\n     *\r\n     * @see LocalizationManager.setPrimaryLocale()\r\n     *\r\n     * @param locales A list of locales to be moved to the beginning of the translation priority. First locales item will be the prefered\r\n     *        locale for translation, second will be the next one in case some key is not translated for the first one and so. If any of the\r\n     *        specified locales is not currently loaded, an exception will happen.\r\n     *\r\n     * @return void\r\n     */\r\n    LocalizationManager.prototype.setPrimaryLocales = function (locales) {\r\n        if (!ArrayUtils_1.ArrayUtils.isArray(locales) ||\r\n            ArrayUtils_1.ArrayUtils.hasDuplicateElements(locales) ||\r\n            locales.length <= 0) {\r\n            throw new Error('locales must be non empty string array with no duplicate elements');\r\n        }\r\n        for (var i = locales.length - 1; i >= 0; i--) {\r\n            this.setPrimaryLocale(locales[i]);\r\n        }\r\n    };\r\n    /**\r\n     * Define the 2 digit language that will be placed at the front of the currently loaded locales list (moving all the others one position to the right).\r\n     *\r\n     * This will be the first language to use when trying to get a translation.\r\n     *\r\n     * @param language A 2 digit language code that matches with any of the currently loaded locales, which will\r\n     *        be moved to the first position of the loaded locales list. If the specified language does not match with\r\n     *        a locale that is currently loaded, an exception will happen.\r\n     *\r\n     * @return void\r\n     */\r\n    LocalizationManager.prototype.setPrimaryLanguage = function (language) {\r\n        for (var _i = 0, _a = this._locales; _i < _a.length; _i++) {\r\n            var locale = _a[_i];\r\n            if (locale.substr(0, 2) === language) {\r\n                return this.setPrimaryLocale(locale);\r\n            }\r\n        }\r\n        throw new Error(language + ' not loaded');\r\n    };\r\n    /**\r\n     * Moves the locales that match the specified languages to the beginning of the locales list.\r\n     * Works the same as setPrimaryLocales() but with a list of the 2 digit language codes that match the respective locales.\r\n     *\r\n     * @see LocalizationManager.setPrimaryLocale()\r\n     * @see LocalizationManager.setPrimaryLanguage()\r\n     *\r\n     * @param languages A list of 2 digit language codes to be moved to the beginning of the translation priority. If any of the\r\n     *        specified languages does not match with a locale that is currently loaded, an exception will happen.\r\n     *\r\n     * @return void\r\n     */\r\n    LocalizationManager.prototype.setPrimaryLanguages = function (languages) {\r\n        if (!ArrayUtils_1.ArrayUtils.isArray(languages) ||\r\n            ArrayUtils_1.ArrayUtils.hasDuplicateElements(languages) ||\r\n            languages.length <= 0) {\r\n            throw new Error('languages must be non empty string array with no duplicate elements');\r\n        }\r\n        for (var i = languages.length - 1; i >= 0; i--) {\r\n            this.setPrimaryLanguage(languages[i]);\r\n        }\r\n    };\r\n    /**\r\n     * Change the loaded locales translation preference order. The same locales that are currently loaded must be passed\r\n     * but with a different order to change the translation priority.\r\n     *\r\n     * @param locales A list with the new locales translation priority\r\n     *\r\n     * @return void\r\n     */\r\n    LocalizationManager.prototype.setLocalesOrder = function (locales) {\r\n        if (!ArrayUtils_1.ArrayUtils.isArray(locales)) {\r\n            throw new Error('locales must be an array');\r\n        }\r\n        if (locales.length !== this._locales.length) {\r\n            throw new Error('locales must contain all the currently loaded locales');\r\n        }\r\n        for (var _i = 0, locales_2 = locales; _i < locales_2.length; _i++) {\r\n            var locale = locales_2[_i];\r\n            if (!this.isLocaleLoaded(locale)) {\r\n                throw new Error(locale + ' not loaded');\r\n            }\r\n        }\r\n        this._locales = locales;\r\n        this._languages = this._locales.map(function (l) { return l.substr(0, 2); });\r\n    };\r\n    /**\r\n     * Get the translation for the given key, bundle and location\r\n     *\r\n     * @param key The key we want to read from the specified resource bundle and path\r\n     * @param bundle The name for the resource bundle file. If not specified, the value\r\n     *        that was used on the inmediate previous call of this method will be used. This can save us lots of typing\r\n     *        if we are reading multiple consecutive keys from the same bundle.\r\n     * @param location In case we have multiple bundles with the same name on different locations, we can set this parameter with\r\n     *        the location label to uniquely reference the bundle and resolve the conflict. If all of our bundles have different\r\n     *        names, this parameter can be ignored. Just like the bundle parameter, this one is remembered between get() calls.\r\n     * @param toReplace A list of values that will replace the wildcards that are found on the translated text. Each wildcard\r\n     *        will be replaced with the element whose index on the list matches it. Check the documentation for this.wildCardsFormat\r\n     *        property to know more about how to setup wildcards.\r\n     *\r\n     * @returns The localized text\r\n     */\r\n    LocalizationManager.prototype.get = function (key, bundle, location, toReplace) {\r\n        if (bundle === void 0) { bundle = ''; }\r\n        if (location === void 0) { location = ''; }\r\n        if (toReplace === void 0) { toReplace = []; }\r\n        if (!this._initialized) {\r\n            throw new Error('LocalizationManager not initialized. Call initialize() before requesting translated texts');\r\n        }\r\n        // If no location specified, use the active one\r\n        if (location === '') {\r\n            if (bundle !== '' && bundle !== this._activeBundle) {\r\n                this.setActiveBundle(bundle);\r\n            }\r\n            location = this._activeLocation;\r\n        }\r\n        // If no bundle is specified, the last one will be used\r\n        if (bundle === '') {\r\n            if (this.isBundleMandatory) {\r\n                throw new Error('bundle is mandatory for key ' + key);\r\n            }\r\n            bundle = this._activeBundle;\r\n        }\r\n        if (Object.keys(this._loadedTranslations).indexOf(location) === -1) {\r\n            throw new Error('Location <' + location + '> not loaded');\r\n        }\r\n        // Loop all the locales to find the first one with a value for the specified key\r\n        for (var _i = 0, _a = this._locales; _i < _a.length; _i++) {\r\n            var locale = _a[_i];\r\n            if (Object.keys(this._loadedTranslations[location]).indexOf(locale) >= 0) {\r\n                if (Object.keys(this._loadedTranslations[location][locale]).indexOf(bundle) === -1) {\r\n                    throw new Error('Bundle <' + bundle + '> not loaded');\r\n                }\r\n                if (Object.keys(this._loadedTranslations[location][locale][bundle]).indexOf(key) >= 0) {\r\n                    // Store the specified bundle name and location as the lasts that have been used till now\r\n                    this._activeBundle = bundle;\r\n                    this._activeLocation = location;\r\n                    var result = this._loadedTranslations[location][locale][bundle][key];\r\n                    // Replace all wildcards on the text with the specified replacements if any\r\n                    var replacements = StringUtils_1.StringUtils.isString(toReplace) ? [String(toReplace)] : toReplace;\r\n                    for (var i = 0; i < replacements.length; i++) {\r\n                        result = StringUtils_1.StringUtils.replace(result, StringUtils_1.StringUtils.replace(this.wildCardsFormat, 'N', String(i)), replacements[i]);\r\n                    }\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        if (this.missingKeyFormat.indexOf('$exception') >= 0) {\r\n            throw new Error('key <' + key + '> not found on ' + bundle + ' - ' + location);\r\n        }\r\n        return this.missingKeyFormat.replace('$key', key);\r\n    };\r\n    /**\r\n     * Get the translation for the given key and bundle as a string with all words first character capitalized\r\n     * and all the rest of the word with lower case\r\n     *\r\n     * @see LocalizationManager.get\r\n     * @see StringUtils.formatCase\r\n     *\r\n     * @returns The localized and case formatted text\r\n     */\r\n    LocalizationManager.prototype.getStartCase = function (key, bundle, location, toReplace) {\r\n        if (bundle === void 0) { bundle = ''; }\r\n        if (location === void 0) { location = ''; }\r\n        if (toReplace === void 0) { toReplace = []; }\r\n        return StringUtils_1.StringUtils.formatCase(this.get(key, bundle, location, toReplace), StringUtils_1.StringUtils.FORMAT_START_CASE);\r\n    };\r\n    /**\r\n     * Get the translation for the given key and bundle as an all upper case string\r\n     *\r\n     * @see LocalizationManager.get\r\n     * @see StringUtils.formatCase\r\n     *\r\n     * @returns The localized and case formatted text\r\n     */\r\n    LocalizationManager.prototype.getAllUpperCase = function (key, bundle, location, toReplace) {\r\n        if (bundle === void 0) { bundle = ''; }\r\n        if (location === void 0) { location = ''; }\r\n        if (toReplace === void 0) { toReplace = []; }\r\n        return StringUtils_1.StringUtils.formatCase(this.get(key, bundle, location, toReplace), StringUtils_1.StringUtils.FORMAT_ALL_UPPER_CASE);\r\n    };\r\n    /**\r\n     * Get the translation for the given key and bundle as an all lower case string\r\n     *\r\n     * @see LocalizationManager.get\r\n     * @see StringUtils.formatCase\r\n     *\r\n     * @returns The localized and case formatted text\r\n     */\r\n    LocalizationManager.prototype.getAllLowerCase = function (key, bundle, location, toReplace) {\r\n        if (bundle === void 0) { bundle = ''; }\r\n        if (location === void 0) { location = ''; }\r\n        if (toReplace === void 0) { toReplace = []; }\r\n        return StringUtils_1.StringUtils.formatCase(this.get(key, bundle, location, toReplace), StringUtils_1.StringUtils.FORMAT_ALL_LOWER_CASE);\r\n    };\r\n    /**\r\n     * Get the translation for the given key and bundle as a string with the first character as Upper case\r\n     * and all the rest as lower case\r\n     *\r\n     * @see LocalizationManager.get\r\n     * @see StringUtils.formatCase\r\n     *\r\n     * @returns The localized and case formatted text\r\n     */\r\n    LocalizationManager.prototype.getFirstUpperRestLower = function (key, bundle, location, toReplace) {\r\n        if (bundle === void 0) { bundle = ''; }\r\n        if (location === void 0) { location = ''; }\r\n        if (toReplace === void 0) { toReplace = []; }\r\n        return StringUtils_1.StringUtils.formatCase(this.get(key, bundle, location, toReplace), StringUtils_1.StringUtils.FORMAT_FIRST_UPPER_REST_LOWER);\r\n    };\r\n    /**\r\n     * Auxiliary method that can be overriden when extending this class to customize the parsing of Json formatted\r\n     * resource bundles\r\n     *\r\n     * @param jsonString An object with the read resourcebundle json string\r\n     */\r\n    LocalizationManager.prototype.parseJson = function (jsonString) {\r\n        return JSON.parse(jsonString);\r\n    };\r\n    /**\r\n     * Auxiliary method that can be overriden when extending this class to customize the parsing of Java properties\r\n     * formatted resource bundles\r\n     *\r\n     * @param propertiesString A string containing the read resourcebundle java properties format string\r\n     */\r\n    LocalizationManager.prototype.parseProperties = function (propertiesString) {\r\n        var result = {};\r\n        var javaPropertiesObject = new JavaPropertiesObject_1.JavaPropertiesObject(propertiesString);\r\n        for (var _i = 0, _a = javaPropertiesObject.getKeys(); _i < _a.length; _i++) {\r\n            var key = _a[_i];\r\n            result[key] = javaPropertiesObject.get(key);\r\n        }\r\n        return result;\r\n    };\r\n    return LocalizationManager;\r\n}());\r\nexports.LocalizationManager = LocalizationManager;\r\n//# sourceMappingURL=LocalizationManager.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar ObjectUtils_1 = require(\"../utils/ObjectUtils\");\r\nvar ArrayUtils_1 = require(\"../utils/ArrayUtils\");\r\nvar StringUtils_1 = require(\"../utils/StringUtils\");\r\n/**\r\n * Model history management class\r\n *\r\n * @see constructor()\r\n */\r\nvar ModelHistoryManager = /** @class */ (function () {\r\n    /**\r\n     * This is a fully featured undo / redo manager.\r\n     * It works with any class but is normally used with those that contain your application model data.\r\n     *\r\n     * The first thing we need to do is to create a ModelHistoryManager and pass a model class instance which will be\r\n     * used as the starting point of the history management. We can redefine the starting point at any time by calling\r\n     * setInitialState() so if we need to perform some changes to the instance values, we can do it an mark it later as the\r\n     * initial state.\r\n     *\r\n     * After defining the initial state, we will be able to save snapshots to track the changes on the instance,\r\n     * and perform undo / redo operations at any time to restore the state to any of the previously saved snapshots.\r\n     *\r\n     * We can get the instance at the current time by using the 'get' property.\r\n     *\r\n     * @param instance An instance of the class model type to be used by the history manager as the starting point.\r\n     */\r\n    function ModelHistoryManager(instance) {\r\n        /**\r\n         * Specifies the maximum amount of snapshots that will be saved.\r\n         * If we try to save a snapshot and there are more than the ones specified here, the oldest one\r\n         * will be deleted and the next will be defined as the initial state.\r\n         *\r\n         * Setting it to -1 (default) means infinite snapshots are possible.\r\n         *\r\n         * Basically this property configures the maximun number of 'undo' that are possible.\r\n         */\r\n        this.maxSnapshots = -1;\r\n        /**\r\n         * A list with all the model instances that have been saved as snapshots and the tag that was\r\n         * used to save them\r\n         */\r\n        this._snapshots = [];\r\n        this._currentState = instance;\r\n        this._initialState = ObjectUtils_1.ObjectUtils.clone(this._currentState);\r\n    }\r\n    /**\r\n     * Defines the current model state as the origin of the history management.\r\n     * This means the current moment is considered as the starting point, and the last possible\r\n     * undo operation will leave the model state as it was just when this method was called.\r\n     *\r\n     * Note that calling this method also cleans any possible saved snapshots or history. We can define it as a\r\n     * 'reset to the current moment' method and set it as the starting point.\r\n     */\r\n    ModelHistoryManager.prototype.setInitialState = function () {\r\n        this._initialState = ObjectUtils_1.ObjectUtils.clone(this._currentState);\r\n        this._snapshots = [];\r\n    };\r\n    Object.defineProperty(ModelHistoryManager.prototype, \"get\", {\r\n        /**\r\n         * The model class instance as it is right now\r\n         */\r\n        get: function () {\r\n            return this._currentState;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ModelHistoryManager.prototype, \"tags\", {\r\n        /**\r\n         * Array containing all the snapshot tags that have been saved to the current\r\n         * moment. Each one of the array elements is a string containing the name that was assigned\r\n         * to the respective snapshot\r\n         */\r\n        get: function () {\r\n            return this._snapshots.map(function (snapshot) { return snapshot.tag; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(ModelHistoryManager.prototype, \"snapshots\", {\r\n        /**\r\n         * Array containing all the snapshot states that have been saved to the current\r\n         * moment. Each one of the array elements is a model class instance containing all\r\n         * the information that was available at the moment of taking the snapshot\r\n         *\r\n         * WARNING !! - This value must be used only to read data. Any direct modification of\r\n         * the returned array will result in unwanted behaviours\r\n         */\r\n        get: function () {\r\n            return this._snapshots.map(function (snapshot) { return snapshot.state; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Obtain a list with all the snapshots that where saved under a specific tag or tags.\r\n     *\r\n     * Only the snapshots that match the given tag or tags will be returned, in the same order as they\r\n     * were saved.\r\n     *\r\n     * Each one of the array elements is a model class instance containing all\r\n     * the information that was available at the moment of taking the snapshot\r\n     *\r\n     * WARNING !! - This value must be used only to read data. Any direct modification of\r\n     * the returned array will result in unwanted behaviours\r\n     *\r\n     * @param tags A list with all the tags for which we want to obtain the related snapshots\r\n     */\r\n    ModelHistoryManager.prototype.getSnapshotsByTag = function (tags) {\r\n        var errorMessage = 'tags must be a non empty string array. To get the full list of snapshots, use the <snapshots> property';\r\n        if (!ArrayUtils_1.ArrayUtils.isArray(tags)) {\r\n            throw new Error(errorMessage);\r\n        }\r\n        if (tags.length <= 0) {\r\n            throw new Error(errorMessage);\r\n        }\r\n        var result = [];\r\n        for (var i = 0; i < this._snapshots.length; i++) {\r\n            if (tags.indexOf(this._snapshots[i].tag) >= 0) {\r\n                result.push(this._snapshots[i].state);\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Save a copy of the current model class instance state so it can be retrieved later.\r\n     *\r\n     * @param tag A string we can use as 'label' or 'name' for the saved snapshot. This is useful if\r\n     * we later want to get a filtered list of snapshots\r\n     *\r\n     * @returns true if a snapshot was saved, false if no snapshot saved (model has not changed)\r\n     */\r\n    ModelHistoryManager.prototype.saveSnapshot = function (tag) {\r\n        if (tag === void 0) { tag = ''; }\r\n        if (!StringUtils_1.StringUtils.isString(tag)) {\r\n            throw new Error('tag must be a string');\r\n        }\r\n        // If current model state is the same as the latest snapshot and the tag we want to store\r\n        // is the same, a new copy won't be created\r\n        if (this._snapshots.length > 0 &&\r\n            this._snapshots[this._snapshots.length - 1].tag === tag &&\r\n            ObjectUtils_1.ObjectUtils.isEqualTo(this._currentState, this._snapshots[this._snapshots.length - 1].state)) {\r\n            return false;\r\n        }\r\n        // If we are at the initial state, snapshot won't also be saved\r\n        if (this._snapshots.length <= 0 &&\r\n            ObjectUtils_1.ObjectUtils.isEqualTo(this._currentState, this._initialState)) {\r\n            return false;\r\n        }\r\n        // If max undo limit is reached, remove first snapshot and set it as the initial state\r\n        if (this.maxSnapshots > 0 &&\r\n            this._snapshots.length >= this.maxSnapshots) {\r\n            var firstSnapshot = this._snapshots.shift();\r\n            this._initialState = firstSnapshot.state;\r\n        }\r\n        this._snapshots.push({\r\n            state: ObjectUtils_1.ObjectUtils.clone(this._currentState),\r\n            tag: tag\r\n        });\r\n        return true;\r\n    };\r\n    Object.defineProperty(ModelHistoryManager.prototype, \"isUndoPossible\", {\r\n        /**\r\n         * True if the current instance can be reverted to a previous state, false otherwise\r\n         */\r\n        get: function () {\r\n            if (this._snapshots.length > 0 ||\r\n                !ObjectUtils_1.ObjectUtils.isEqualTo(this._currentState, this._initialState)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Revert the current model class state to the most recent of the saved snapshots or to the initial state\r\n     * if no snapshots are available.\r\n     *\r\n     * If current state is the same as the initial state, undo will do nothing\r\n     *\r\n     * @param tagsFilter Defines which tags we are looking for. If enpty list (default) , undo will be performed to the latest snapshot.\r\n     *        If a list of strings (tags) is provided, undo will be performed to the youngest snapshot that was saved with any\r\n     *        of the specified tags\r\n     *\r\n     * @returns True if the undo operation resulted in a current state change, false otherwise\r\n     */\r\n    ModelHistoryManager.prototype.undo = function (tagsFilter) {\r\n        if (tagsFilter === void 0) { tagsFilter = []; }\r\n        // If there are no snapshots left and the current model state is different\r\n        // than the initial state, we will restore the initial state\r\n        if (this._snapshots.length === 0 &&\r\n            !ObjectUtils_1.ObjectUtils.isEqualTo(this._currentState, this._initialState)) {\r\n            this._currentState = ObjectUtils_1.ObjectUtils.clone(this._initialState);\r\n            return true;\r\n        }\r\n        // If any snapshot is available, check if we should restore it\r\n        if (this._snapshots.length > 0) {\r\n            var latestSnapshot = this._snapshots[this._snapshots.length - 1];\r\n            // If the current state is identical to the latest snapshot, or the latest\r\n            // snapshot tag is not on the tags filter list, we will discard the latest snapshot\r\n            // and call undo to check the next\r\n            if (ObjectUtils_1.ObjectUtils.isEqualTo(this._currentState, latestSnapshot.state) ||\r\n                (tagsFilter.length > 0 && tagsFilter.indexOf(latestSnapshot.tag) < 0)) {\r\n                this._snapshots.pop();\r\n                return this.undo(tagsFilter);\r\n            }\r\n            // Clone the latest snapshot to the current model state\r\n            this._currentState = ObjectUtils_1.ObjectUtils.clone(latestSnapshot.state);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Clear all the snapshots, and reset the model class instance to the initial state.\r\n     *\r\n     * This operation is definitive. After this method is called, all history and the current state\r\n     * will be lost forever. No redo will be possible\r\n     *\r\n     * @returns True if the current state changed, false otherwise\r\n     */\r\n    ModelHistoryManager.prototype.undoAll = function () {\r\n        if (this.isUndoPossible) {\r\n            this._currentState = ObjectUtils_1.ObjectUtils.clone(this._initialState);\r\n            this._snapshots = [];\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * TODO - This method must be designed\r\n     */\r\n    ModelHistoryManager.prototype.redo = function () {\r\n        // TODO\r\n        // It seems that Proxy feature of ES6 allows us to detect object chages\r\n        // so we will be able to disable the redo after current state is modified.\r\n        // http://blog.revathskumar.com/2016/02/es6-observe-change-in-object-using-proxy.html\r\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\r\n    };\r\n    return ModelHistoryManager;\r\n}());\r\nexports.ModelHistoryManager = ModelHistoryManager;\r\n//# sourceMappingURL=ModelHistoryManager.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar JavaPropertiesObject_1 = require(\"../model/JavaPropertiesObject\");\r\nvar ArrayUtils_1 = require(\"../utils/ArrayUtils\");\r\nvar ObjectUtils_1 = require(\"../utils/ObjectUtils\");\r\n/**\r\n * Contains methods that allow us to convert data from one complex data structure\r\n * format to another complex data structure format\r\n */\r\nvar SerializationManager = /** @class */ (function () {\r\n    function SerializationManager() {\r\n        /**\r\n         * When set to true, the structures that are passed as serialization sources must match the structures\r\n         * that are passed as serialization targets: All keys or properties that are defined on the serialization sources\r\n         * must exist on the serialization targets, otherwise an exception will be thrown\r\n         */\r\n        this.strictMode = true;\r\n    }\r\n    /**\r\n     * Generate a valid JSON string from a given class instance\r\n     *\r\n     * @param classInstance A class instance\r\n     *\r\n     * @returns A valid JSON string containing all the data on the provided class\r\n     */\r\n    SerializationManager.prototype.classToJson = function (classInstance) {\r\n        return JSON.stringify(classInstance);\r\n    };\r\n    // TODO\r\n    SerializationManager.prototype.classToObject = function () {\r\n        // TODO\r\n    };\r\n    /**\r\n     * Copy data from a HashMapObject instance to an arbitrary class instance which contains\r\n     * the same properties as the hashmap keys. Class property values will be set to the same value of the hash map key\r\n     *\r\n     * @param hashMap An object that contains data which is organized as a hash map. For example: An associative array or an object with key / value pairs\r\n     * @param classInstance A class instance that will be filled with all the values that are found on the hashmap (the instance is modified by this method and all values erased).\r\n     *\r\n     * @return The provided class instance with all its properties filled with the corresponding hashmap values\r\n     */\r\n    //    hashMapObjectToClass<T>(hashMap:HashMapObject, classInstance:T): T{\r\n    //\r\n    //        TODO - implement this and translate it to PHP\r\n    //        let keys = hashMap.getKeys(); \r\n    //        \r\n    //        for (let key of keys) {\r\n    //\r\n    //            if(property_exists($classInstance, $key)){\r\n    //\r\n    //                $classInstance->{$key} = $value;\r\n    //            }\r\n    //        }\r\n    //\r\n    //        return classInstance;\r\n    //    }\r\n    /**\r\n     * Convert a JavaPropertiesObject instance to a string that is valid so it can be saved to a .properties file.\r\n     *\r\n     * @param javaProperties An instance of a JavaPropertiesObject\r\n     *\r\n     * @return An ISO-8859-1 string containing valid properties data, ready to be stored as a .properties java format file.\r\n     */\r\n    SerializationManager.prototype.javaPropertiesObjectToString = function (javaProperties) {\r\n        return javaProperties.toString();\r\n    };\r\n    /**\r\n     * Copy data from a json string to a class instance. All class properties will be filled with the values from the json\r\n     * For more information on how the conversion is performed, see this class objectToClass method\r\n     *\r\n     * @see SerializationUtils.objectToClass\r\n     *\r\n     * @param string A string containing valid json data\r\n     * @param classInstance A class instance that will be filled with all the json data (the instance is modified by this method and all values erased).\r\n     *\r\n     * @return The provided class instance with all its properties filled with the corresponding json values\r\n     */\r\n    SerializationManager.prototype.jsonToClass = function (string, classInstance) {\r\n        return this.objectToClass(JSON.parse(string), classInstance);\r\n    };\r\n    /**\r\n     * Copy data from an object instance to a class instance. All class properties will be filled with the values\r\n     * from the object.\r\n     *\r\n     * If a property from the class instance contains a default value, it will be used as a reference to restrict\r\n     * the value type. If the same key on the object has a different type value, an exception will happen.\r\n     * Null values on the source object keys will leave the same destination class properties untouched.\r\n     *\r\n     * Typed arrays can be forced by setting a class property as an array with a single default item. That item type\r\n     * will be used as the reference for all the array values on the object property.\r\n     *\r\n     * @param object An object containing the source data to serialize\r\n     * @param classInstance An empty class instance that will be filled with all the values from the object\r\n     *\r\n     * @return The provided class instance with all its properties filled with the corresponding object values\r\n     */\r\n    SerializationManager.prototype.objectToClass = function (object, classInstance) {\r\n        var objectKeys = ObjectUtils_1.ObjectUtils.getKeys(object);\r\n        var classInstanceName = classInstance.constructor.name;\r\n        var classInstanceKeys = ObjectUtils_1.ObjectUtils.getKeys(classInstance);\r\n        // On strict mode, verify that both objects have the same number of keys\r\n        if (this.strictMode && objectKeys.length !== classInstanceKeys.length) {\r\n            throw new Error(\"(strict mode): [\" + objectKeys.join(',') + \"] keys do not match \" + classInstanceName + \" props: [\" + classInstanceKeys.join(',') + \"]\");\r\n        }\r\n        // Loop all the received object keys and store each value on the respective class property\r\n        for (var _i = 0, objectKeys_1 = objectKeys; _i < objectKeys_1.length; _i++) {\r\n            var key = objectKeys_1[_i];\r\n            // Check if key exists on class instance\r\n            if (!classInstance.hasOwnProperty(key)) {\r\n                if (this.strictMode) {\r\n                    throw new Error(\"(strict mode): <\" + key + \"> not found in \" + classInstanceName);\r\n                }\r\n                continue;\r\n            }\r\n            var value = object[key];\r\n            // A null key value will leave the property value untouched\r\n            if (value === null) {\r\n                continue;\r\n            }\r\n            // If property has an explicit null or undefined default value, any type is allowed.\r\n            if (classInstance[key] !== null && classInstance[key] !== undefined) {\r\n                var typeErrorMessage = '<' + classInstanceName + '.' + key + '> was ' + (typeof value) + ' but expected to be ';\r\n                if (ArrayUtils_1.ArrayUtils.isArray(classInstance[key])) {\r\n                    if (!ArrayUtils_1.ArrayUtils.isArray(value)) {\r\n                        throw new Error(typeErrorMessage + 'array');\r\n                    }\r\n                    if (classInstance[key].length > 0) {\r\n                        if (classInstance[key].length !== 1) {\r\n                            throw new Error('To define a typed list, <' + classInstanceName + '.' + key + '> must contain only 1 default typed element');\r\n                        }\r\n                        var defaultElement = classInstance[key][0];\r\n                        var isDefaultElementAClass = (ObjectUtils_1.ObjectUtils.isObject(defaultElement) && defaultElement.constructor.name !== 'Object');\r\n                        classInstance[key] = [];\r\n                        for (var _a = 0, value_1 = value; _a < value_1.length; _a++) {\r\n                            var o = value_1[_a];\r\n                            if (isDefaultElementAClass) {\r\n                                o = this.objectToClass(o, ObjectUtils_1.ObjectUtils.clone(defaultElement));\r\n                            }\r\n                            else {\r\n                                // Type of array elements must match the default value\r\n                                if (typeof o !== typeof defaultElement) {\r\n                                    throw new Error('<' + classInstanceName + '.' + key + '> is defined as array of ' + (typeof defaultElement) + ' but received ' + typeof o);\r\n                                }\r\n                            }\r\n                            classInstance[key].push(o);\r\n                        }\r\n                        continue;\r\n                    }\r\n                }\r\n                if (ObjectUtils_1.ObjectUtils.isObject(classInstance[key])) {\r\n                    if (!ObjectUtils_1.ObjectUtils.isObject(value)) {\r\n                        throw new Error(typeErrorMessage + classInstance[key].constructor.name);\r\n                    }\r\n                    if (classInstance[key].constructor.name !== 'Object') {\r\n                        value = this.objectToClass(value, classInstance[key]);\r\n                    }\r\n                }\r\n                // Type of both object key and class property must match\r\n                if (typeof classInstance[key] !== typeof value) {\r\n                    throw new Error(typeErrorMessage + typeof classInstance[key]);\r\n                }\r\n            }\r\n            classInstance[key] = value;\r\n        }\r\n        return classInstance;\r\n    };\r\n    /**\r\n     * Convert a string containing the contents of a Java properties file to a JavaPropertiesObject instance\r\n     * Note that the input string must be encoded with ISO-8859-1 and strictly follow the Java\r\n     * properties file format (Otherwise results may not be correct).\r\n     *\r\n     * @param string String containing the contents of a .properties Java file\r\n     *\r\n     * @return The properties format parsed as an object\r\n     */\r\n    SerializationManager.prototype.stringToJavaPropertiesObject = function (string) {\r\n        return new JavaPropertiesObject_1.JavaPropertiesObject(string);\r\n    };\r\n    return SerializationManager;\r\n}());\r\nexports.SerializationManager = SerializationManager;\r\n//# sourceMappingURL=SerializationManager.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\n/**\r\n * A base class that can be extended to protect created objects from access/read to undefined properties, and all other defensive OOP best practices\r\n */\r\nvar BaseStrictClass = /** @class */ (function () {\r\n    function BaseStrictClass() {\r\n    }\r\n    return BaseStrictClass;\r\n}());\r\nexports.BaseStrictClass = BaseStrictClass;\r\n//# sourceMappingURL=BaseStrictClass.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nvar __extends = (this && this.__extends) || (function () {\r\n    var extendStatics = function (d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n    return function (d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    };\r\n})();\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar TableObject_1 = require(\"./TableObject\");\r\nvar StringUtils_1 = require(\"../utils/StringUtils\");\r\nvar ArrayUtils_1 = require(\"../utils/ArrayUtils\");\r\n/**\r\n * CSV data abstraction\r\n */\r\nvar CSVObject = /** @class */ (function (_super) {\r\n    __extends(CSVObject, _super);\r\n    /**\r\n     * CSVObject stores all the information for a CSV document and provides easy access to all the\r\n     * columns and values and allows us to operate with it's data easily.\r\n     *\r\n     * @param string A string containing valid csv data\r\n     * @param headers Specifies if the first row of the provided csv data contains the column names or not. It is important to correctly set this value to avoid invalid data\r\n     * @param delimiter The character that is used as the csv delimiter. ',' is set by default\r\n     * @param enclosure The character that is used to escape fields when special characters are found\r\n     *\r\n     * @return The constructed CSVObject\r\n     */\r\n    function CSVObject(string, headers, delimiter, enclosure) {\r\n        if (string === void 0) { string = ''; }\r\n        if (headers === void 0) { headers = false; }\r\n        if (delimiter === void 0) { delimiter = ','; }\r\n        if (enclosure === void 0) { enclosure = '\"'; }\r\n        var _this = _super.call(this) || this;\r\n        /**\r\n         * True if the CSV data was loaded with headers enabled or false if not\r\n         */\r\n        _this._hasHeaders = false;\r\n        if (!StringUtils_1.StringUtils.isString(string)) {\r\n            throw new Error('constructor expects a string value');\r\n        }\r\n        if (StringUtils_1.StringUtils.isEmpty(string)) {\r\n            return _this;\r\n        }\r\n        var currentRow = 0;\r\n        var currentColumn = 0;\r\n        var enclosureFound = false;\r\n        var fieldValue = '';\r\n        var stringLen = string.length;\r\n        for (var i = 0; i < stringLen; i++) {\r\n            var character = string.charAt(i);\r\n            if (character === delimiter && !enclosureFound) {\r\n                _this._insertField(currentRow, currentColumn, fieldValue);\r\n                fieldValue = '';\r\n                currentColumn++;\r\n                continue;\r\n            }\r\n            if (character === enclosure) {\r\n                if (enclosureFound && string.substr(i + 1, 1) === enclosure) {\r\n                    fieldValue += character;\r\n                    i++;\r\n                }\r\n                else {\r\n                    enclosureFound = !enclosureFound;\r\n                    if (enclosureFound) {\r\n                        fieldValue = '';\r\n                    }\r\n                    else {\r\n                        i = _this._findNextDelimiterIndex(string, i, delimiter, stringLen) - 1;\r\n                    }\r\n                }\r\n                continue;\r\n            }\r\n            if (character === \"\\r\" || character === \"\\n\") {\r\n                if (enclosureFound) {\r\n                    fieldValue += character;\r\n                }\r\n                else {\r\n                    if (currentColumn > 0) {\r\n                        _this._insertField(currentRow, currentColumn, fieldValue);\r\n                        currentRow++;\r\n                        fieldValue = '';\r\n                        currentColumn = 0;\r\n                    }\r\n                }\r\n                if (character === \"\\r\" && string.substr(i + 1, 1) === \"\\n\") {\r\n                    if (enclosureFound) {\r\n                        fieldValue += \"\\n\";\r\n                    }\r\n                    i++;\r\n                }\r\n                continue;\r\n            }\r\n            fieldValue += character;\r\n        }\r\n        if (fieldValue != '' || currentColumn >= _this._columnsCount) {\r\n            _this._insertField(currentRow, currentColumn, fieldValue);\r\n        }\r\n        if (headers) {\r\n            _this._defineHeaders();\r\n        }\r\n        return _this;\r\n    }\r\n    /**\r\n     * Get the value contained at the specified csv cell\r\n     *\r\n     * @param row An integer containing the index for the row that we want to retrieve\r\n     * @param column An integer or a string containing the index or label for the column that we want to retrieve\r\n     *\r\n     * @return The value for the cell that is located at the specified row and column\r\n     */\r\n    CSVObject.prototype.getCell = function (row, column) {\r\n        var result = _super.prototype.getCell.call(this, row, column);\r\n        return result === null ? '' : result;\r\n    };\r\n    /**\r\n     * Set the value for a csv cell\r\n     *\r\n     * @param row An integer containing the index for the row that we want to set\r\n     * @param column An integer or a string containing the index or label for the column that we want to set\r\n     * @param value The value we want to set to the specified cell. Only string values are allowed\r\n     *\r\n     * @see TableObject.setCell\r\n     *\r\n     * @return The assigned value after beign stored into the csv cell\r\n     */\r\n    CSVObject.prototype.setCell = function (row, column, value) {\r\n        if (!StringUtils_1.StringUtils.isString(value)) {\r\n            throw new Error('value must be a string');\r\n        }\r\n        return _super.prototype.setCell.call(this, row, column, value);\r\n    };\r\n    /**\r\n     * Check if the provided value contains valid CSV information.\r\n     *\r\n     * @param value Object to test for valid CSV data. Accepted values are: Strings containing CSV data or CSVObject elements\r\n     *\r\n     * @return True if the received object represent valid CSV data. False otherwise.\r\n     */\r\n    CSVObject.isCSV = function (value) {\r\n        try {\r\n            var c = new CSVObject(value);\r\n            return c.countCells() >= 0;\r\n        }\r\n        catch (e) {\r\n            try {\r\n                return (value !== null) && (value instanceof CSVObject);\r\n            }\r\n            catch (e) {\r\n                return false;\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Check if two provided CSV structures represent the same data\r\n     *\r\n     * @param csv A valid string or CSVObject to compare with the current one\r\n     *\r\n     * @return true if the two CSV elements are considered equal, false if not\r\n     */\r\n    CSVObject.prototype.isEqualTo = function (csv) {\r\n        var objectToCompare = null;\r\n        try {\r\n            objectToCompare = new CSVObject(csv, this._hasHeaders);\r\n        }\r\n        catch (e) {\r\n            try {\r\n                if (csv instanceof CSVObject) {\r\n                    objectToCompare = csv;\r\n                }\r\n            }\r\n            catch (e) {\r\n                // Nothing to do\r\n            }\r\n        }\r\n        if (objectToCompare == null) {\r\n            throw new Error('csv does not contain valid csv data');\r\n        }\r\n        var thisRows = this.countRows();\r\n        var thisColumns = this.countColumns();\r\n        if (this.countCells() === 0 && objectToCompare.countCells() === 0) {\r\n            return true;\r\n        }\r\n        if (this._hasHeaders && !ArrayUtils_1.ArrayUtils.isEqualTo(this.getColumnNames(), objectToCompare.getColumnNames())) {\r\n            return false;\r\n        }\r\n        if (thisRows !== objectToCompare.countRows() || thisColumns !== objectToCompare.countColumns()) {\r\n            return false;\r\n        }\r\n        for (var i = 0; i < thisRows; i++) {\r\n            for (var j = 0; j < thisColumns; j++) {\r\n                var thisCell = this.getCell(i, j);\r\n                if (thisCell === null) {\r\n                    thisCell = '';\r\n                }\r\n                var cellToCompare = objectToCompare.getCell(i, j);\r\n                if (cellToCompare === null) {\r\n                    cellToCompare = '';\r\n                }\r\n                if (thisCell !== cellToCompare) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Generate the textual representation for the csv data stored on this object.\r\n     * The output of this method is ready to be stored on a physical .csv file.\r\n     *\r\n     * @param delimiter The character that is used as the csv delimiter. ',' is set by default\r\n     * @param enclosure The character that is used to escape fields when special characters are found\r\n     *\r\n     * @return A valid csv string ready to be stored on a .csv file\r\n     */\r\n    CSVObject.prototype.toString = function (delimiter, enclosure) {\r\n        if (delimiter === void 0) { delimiter = ','; }\r\n        if (enclosure === void 0) { enclosure = '\"'; }\r\n        var result = '';\r\n        if (this._hasHeaders) {\r\n            var row = [];\r\n            for (var _i = 0, _a = this.getColumnNames(); _i < _a.length; _i++) {\r\n                var columnValue = _a[_i];\r\n                row.push(this._escapeField(columnValue, delimiter, enclosure));\r\n            }\r\n            result += row.join(delimiter) + \"\\r\\n\";\r\n        }\r\n        var rowsCount = this.countRows();\r\n        var columnsCount = this.countColumns();\r\n        for (var i = 0; i < rowsCount; i++) {\r\n            var row = [];\r\n            for (var j = 0; j < columnsCount; j++) {\r\n                var cell = '';\r\n                try {\r\n                    cell = this._escapeField(this._cells.get(i + '-' + j), delimiter, enclosure);\r\n                }\r\n                catch (e) {\r\n                    // Nothing necessary.\r\n                    // This try chatch is used only to improve performance over $this->_cells->isKey($i.'-'.$j)\r\n                }\r\n                row.push(cell);\r\n            }\r\n            result += row.join(delimiter) + \"\\r\\n\";\r\n        }\r\n        return rowsCount > 0 ? result.substring(0, result.length - 2) : result;\r\n    };\r\n    /**\r\n     * Auxiliary method that is used to add a new field to the table at the specified position\r\n     *\r\n     * @param currentRow The row where we want to add the field\r\n     * @param currentColumn The column where we want to add the field\r\n     * @param fieldValue The value we want to add to the field\r\n     *\r\n     * @return void\r\n     */\r\n    CSVObject.prototype._insertField = function (currentRow, currentColumn, fieldValue) {\r\n        if (currentRow >= this._rowsCount) {\r\n            this._rowsCount++;\r\n        }\r\n        if (currentColumn >= this._columnsCount) {\r\n            this._columnsCount++;\r\n        }\r\n        this._cells.set(currentRow + '-' + currentColumn, fieldValue);\r\n    };\r\n    /**\r\n     * Auxiliary method to correctly format a csv field so it can be stored as a string\r\n     *\r\n     * @param field The field that has to be formatted\r\n     * @param delimiter The character that is used as the csv delimiter. ',' is set by default\r\n     * @param enclosure The character that is used to escape fields when special characters are found\r\n     *\r\n     * @return The field correctly scaped and ready to be stored on a string\r\n     */\r\n    CSVObject.prototype._escapeField = function (field, delimiter, enclosure) {\r\n        if (field.indexOf(\"\\r\") >= 0 || field.indexOf(\"\\n\") >= 0 || field.indexOf(enclosure) >= 0 || field.indexOf(delimiter) >= 0) {\r\n            field = StringUtils_1.StringUtils.replace(field, [enclosure], [enclosure + enclosure]);\r\n            field = enclosure + field + enclosure;\r\n        }\r\n        return field;\r\n    };\r\n    /**\r\n     * Auxiliary method that looks for the next delimiter or newline characters on the csv string starting at the specified position.\r\n     *\r\n     * @param string The full csv string to search in.\r\n     * @param currentIndex The csv string starting point for the search\r\n     * @param delimiter The character that is used as the csv delimiter\r\n     *\r\n     * @return The index where the next delimiter or newline character is found\r\n     */\r\n    CSVObject.prototype._findNextDelimiterIndex = function (string, currentIndex, delimiter, stringLen) {\r\n        for (var i = currentIndex + 1; i < stringLen; i++) {\r\n            var char = string.charAt(i);\r\n            if (char === delimiter || char === \"\\r\" || char === \"\\n\") {\r\n                return i;\r\n            }\r\n        }\r\n        return stringLen;\r\n    };\r\n    /**\r\n     * Auxiliary method to load the first csv row as the column names and avoid duplicate column names\r\n     *\r\n     * @return void\r\n     */\r\n    CSVObject.prototype._defineHeaders = function () {\r\n        var columnNames = this.getRow(0);\r\n        if (ArrayUtils_1.ArrayUtils.hasDuplicateElements(columnNames)) {\r\n            var i = 0;\r\n            var result = [];\r\n            var duplicateColumnNames = ArrayUtils_1.ArrayUtils.getDuplicateElements(columnNames);\r\n            for (var _i = 0, columnNames_1 = columnNames; _i < columnNames_1.length; _i++) {\r\n                var columnName = columnNames_1[_i];\r\n                if (columnName === null || columnName === '') {\r\n                    i++;\r\n                    columnName = '(' + i + ')';\r\n                }\r\n                else {\r\n                    for (var _a = 0, duplicateColumnNames_1 = duplicateColumnNames; _a < duplicateColumnNames_1.length; _a++) {\r\n                        var duplicateColumnName = duplicateColumnNames_1[_a];\r\n                        if (columnName === duplicateColumnName) {\r\n                            i++;\r\n                            columnName = columnName + '(' + i + ')';\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                result.push(columnName);\r\n            }\r\n            this.setColumnNames(result);\r\n        }\r\n        else {\r\n            this.setColumnNames(columnNames);\r\n        }\r\n        this.removeRow(0);\r\n        this._hasHeaders = true;\r\n    };\r\n    return CSVObject;\r\n}(TableObject_1.TableObject));\r\nexports.CSVObject = CSVObject;\r\n//# sourceMappingURL=CSVObject.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringUtils_1 = require(\"../utils/StringUtils\");\r\nvar NumericUtils_1 = require(\"../utils/NumericUtils\");\r\n/**\r\n * date and time format object abstraction based on ISO 8601 standard\r\n * TODO - This is a first implementation of this class which must be strictly tested and completed by taking the php version as a reference\r\n */\r\nvar DateTimeObject = /** @class */ (function () {\r\n    /**\r\n     * Object that represents a date and time value with timezone and its related operations.\r\n     *\r\n     * All the class methods are based and expect values that follow the ISO 8601 format, which is the international standard for the\r\n     * representation of dates and times. Any other date/time format will be considered as invalid.<br><br>\r\n     * Following is an example of a valid ISO 8601 dateTime value:<br><br>yyyy-mm-ddTHH:MM:SS.UUU+TT:TT<br><br>where:<br>\r\n     * - yyyy is a four digits year value<br>\r\n     * - mm is a two digits month value<br>\r\n     * - dd is a two digits day value<br>\r\n     * - HH is a two digits hour value<br>\r\n     * - MM is a two digits minutes value<br>\r\n     * - SS is a two digits seconds value<br>\r\n     * - UUU is an arbitrary number of digits decimal seconds fraction value<br>\r\n     * - +TT:TT is the timezone offset value, like +03:00\r\n     *\r\n     * IMPORTANT: It is highly recommended to always physically store your datetime values as UTC (aka 00 timezone offset).\r\n     * The local timezone offset should be applied only when showing the datetime values to the user. All the other date and time usages of your application\r\n     * should be performed with UTC values.\r\n     *\r\n     * @param dateTimeString A string containing a valid ISO 8601 date/time value that will be used to initialize this instance.\r\n     * If string is empty, the current system date/time WITH UTC TIMEZONE will be used. If string is incomplete, all missing parts will be filled\r\n     * with the lowest possible value. If timezone offset is missing, UTC will be used.\r\n     *\r\n     * @example '1996' Will create a DateTimeObject with the value '1996-01-01T00:00:00.000000+00:00' based on the UTC 00 timezone\r\n     * @example '1996-12' Will create a DateTimeObject with the value '1996-12-01T00:00:00.000000+00:00' based on the UTC 00 timezone\r\n     * @example This is a fully valid ISO 8601 string value: '2017-10-14T17:55:25.163583+02:00'\r\n     *\r\n     * @see https://es.wikipedia.org/wiki/ISO_8601\r\n     *\r\n     * @return The created instance\r\n     */\r\n    function DateTimeObject(dateTimeString) {\r\n        if (dateTimeString === void 0) { dateTimeString = ''; }\r\n        /**\r\n         * String that defines the ISO 8601 format to be used internally when calling the format method on DateTime Php class.\r\n         */\r\n        //    private _iso8601FormatString = 'Y-m-d\\\\TH:i:s.uP';\r\n        /**\r\n         * The date and time values that are stored on this instance are saved as an ISO 8601 string\r\n         */\r\n        this._dateTimeString = '';\r\n        /**\r\n         * An exploded version of this instance _dateTimeString ISO string, that is used to improve performance when reading\r\n         * some of the date values\r\n         */\r\n        this._dateTimeStringExploded = [];\r\n        if (StringUtils_1.StringUtils.isEmpty(dateTimeString)) {\r\n            this._dateTimeStringExploded = this._explodeISO8601String((new Date()).toISOString());\r\n            return;\r\n        }\r\n        //\r\n        //        if(!DateTimeObject::isValidDateTime($dateTimeString)){\r\n        //\r\n        //            throw new UnexpectedValueException('Provided value is not a valid ISO 8601 date time format');\r\n        //        }\r\n        //\r\n        //        $v = this._explodeISO8601String($dateTimeString);\r\n        //\r\n        //        $string = $v[0].'-'.$v[1].'-'.$v[2].'T'.$v[3].':'.$v[4].':'.$v[5].'.'.$v[6].$v[7];\r\n        //\r\n        //        this._dateTimeString = (new DateTime($string, $v[7] === '' ? new DateTimeZone('UTC') : null))->format(this._iso8601FormatString);\r\n        //\r\n        this._dateTimeStringExploded = this._explodeISO8601String(this._dateTimeString);\r\n    }\r\n    /**\r\n     * DateTimeObject class operates only with ISO 8601 strings, which is the international standard for the representation of dates and times.\r\n     * Therefore, this method considers a dateTime string value to be valid only if it is a string that follows that standard or a DateTimeObject instance.\r\n     *\r\n     * @param dateTime A string containing a valid ISO 8601 date/time value or a valid DateTimeObject instance.\r\n     *\r\n     * @see DateTimeObject.constructor()\r\n     *\r\n     * @return true if the specified value is ISO 8601 or a DateTimeObject instance, false if value contains invalid information.\r\n     */\r\n    DateTimeObject.isValidDateTime = function (dateTime) {\r\n        // Validate that is a string and ends only with alphanumeric values\r\n        if (StringUtils_1.StringUtils.isString(dateTime) && dateTime.substr(-1).match(/^[a-z0-9]+$/i)) {\r\n            var regex = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\r\n            if (dateTime.match(regex)) {\r\n                // We must also validate that the day, month and year are a correct date value\r\n                var parsedDate = dateTime.split('-');\r\n                if (parsedDate.length >= 3) {\r\n                    var testDate = new Date(Number(parsedDate[0]), Number(parsedDate[1]), Number(parsedDate[2].substr(0, 2)));\r\n                    return (testDate.getMonth() + 1 === Number(parsedDate[1])) &&\r\n                        (testDate.getDate() === Number(parsedDate[2].substr(0, 2))) &&\r\n                        (testDate.getFullYear() === Number(parsedDate[0]));\r\n                }\r\n                else {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return typeof dateTime === typeof DateTimeObject;\r\n    };\r\n    /**\r\n     * Given two valid dateTime values, this method will check if they represent the same date and time value\r\n     *\r\n     * @param dateTime1 A valid ISO 8601 dateTime string or a DateTimeObject instance.\r\n     * @param dateTime2 A valid ISO 8601 dateTime string or a DateTimeObject instance.\r\n     *\r\n     * @see DateTimeObject.__constructor()\r\n     *\r\n     * @return True if the date and time values on both elements are the same\r\n     */\r\n    DateTimeObject.isEqual = function (dateTime1, dateTime2) {\r\n        return DateTimeObject.compare(dateTime1, dateTime2) === 0;\r\n    };\r\n    /**\r\n     * Returns the month name from a numeric month value\r\n     *\r\n     * @param month A month number between 1 and 12\r\n     *\r\n     * @return the month name in english and with capital letters, like: JANUARY, FEBRUARY, ...\r\n     */\r\n    DateTimeObject.getMonthName = function (month) {\r\n        if (!NumericUtils_1.NumericUtils.isNumeric(month) || month > 12 || month < 1) {\r\n            throw new Error('Provided value is not a valid month number between 1 and 12');\r\n        }\r\n        var months = ['JANUARY', 'FEBRUARY', 'MARCH', 'APRIL', 'MAY', 'JUNE', 'JULY', 'AUGUST', 'SEPTEMBER', 'OCTOBER', 'NOVEMBER', 'DECEMBER'];\r\n        return months[month - 1];\r\n    };\r\n    /**\r\n     * Get the english name representing the given numeric value of a week day (between 1 and 7), where\r\n     * Sunday is considered to be the first one: 1 = Sunday, 2 = Monday, 3 = Tuesday, etc ...\r\n     *\r\n     * @param day A day number between 1 and 7\r\n     *\r\n     * @return The day name in english and with capital letters, like for example: MONDAY, SATURDAY...\r\n     */\r\n    DateTimeObject.getDayName = function (day) {\r\n        if (!NumericUtils_1.NumericUtils.isNumeric(day) || day > 7 || day < 1) {\r\n            throw new Error('Provided value is not a valid day number between 1 and 7');\r\n        }\r\n        var days = ['SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY'];\r\n        return days[day - 1];\r\n    };\r\n    /**\r\n     * Get the year based on current system date and timezone\r\n     *\r\n     * @return A numeric value representing the current year\r\n     */\r\n    DateTimeObject.getCurrentYear = function () {\r\n        return (new Date()).getFullYear();\r\n    };\r\n    /**\r\n     * Get the month based on current system date and timezone as a numeric value from 1 to 12\r\n     *\r\n     * @return A value between 1 and 12\r\n     */\r\n    DateTimeObject.getCurrentMonth = function () {\r\n        return (new Date()).getMonth() + 1;\r\n    };\r\n    /**\r\n     * Get the day based on current system date and timezone as a numeric value from 1 to 31\r\n     *\r\n     * @return The day of month as a value between 1 and 31\r\n     */\r\n    DateTimeObject.getCurrentDay = function () {\r\n        return (new Date()).getDate();\r\n    };\r\n    /**\r\n     * Get the numeric day of week (between 1 and 7) based on current system time, where Sunday is considered\r\n     * to be the first one:<br>\r\n     * 1 = Sunday, 2 = Monday, 3 = Tuesday, etc ...\r\n     *\r\n     * @return A numeric value between 1 and 7  (where Sunday is 1, Monday is 2, ...)\r\n     */\r\n    DateTimeObject.getCurrentDayOfWeek = function () {\r\n        //        return (int) ((new DateTime())->format('w') + 1);\r\n    };\r\n    /**\r\n     * Get the hour based on current system date and timezone as a numeric value from 0 to 23\r\n     *\r\n     * @return The hour as a value between 0 and 23\r\n     */\r\n    DateTimeObject.getCurrentHour = function () {\r\n        return (new Date()).getHours();\r\n    };\r\n    /**\r\n     * Get the minute based on current system date and timezone as a numeric value from 0 to 59\r\n     *\r\n     * @return The minute as a value between 0 and 59\r\n     */\r\n    DateTimeObject.getCurrentMinute = function () {\r\n        return (new Date()).getMinutes();\r\n    };\r\n    /**\r\n     * Get the seconds based on current system date and timezone as a numeric value from 0 to 59\r\n     *\r\n     * @return The seconds as a value between 0 and 59\r\n     */\r\n    DateTimeObject.getCurrentSecond = function () {\r\n        return (new Date()).getSeconds();\r\n    };\r\n    /**\r\n     * Get the miliseconds based on current system date and timezone as a numeric value up to 3 digits\r\n     *\r\n     * @return The miliseconds as a value up to 3 digits\r\n     */\r\n    DateTimeObject.getCurrentMiliSecond = function () {\r\n        return Math.round((new Date()).getMilliseconds() / 1000);\r\n    };\r\n    /**\r\n     * Get the microseconds based on current system date and timezone as a numeric value up to 6 digits\r\n     *\r\n     * @return The microseconds as a value up to 6 digits\r\n     */\r\n    DateTimeObject.getCurrentMicroSecond = function () {\r\n        // TODO\r\n        // return (new Date()).getm->format('u');\r\n    };\r\n    /**\r\n     * Get the timezone offset based on current system date and timezone as a numeric value (in seconds)\r\n     *\r\n     * @return The timezone offset as a numeric value in seconds\r\n     */\r\n    DateTimeObject.getCurrentTimeZoneOffset = function () {\r\n        return (new Date()).getTimezoneOffset();\r\n    };\r\n    /**\r\n     * This method compares two dateTime values and tells if they are exactly the same or\r\n     * which one represents a later time value than the other.\r\n     * Timezones from the specified dateTime values are taken into consideration for the comparison.\r\n     *\r\n     * @param dateTime1 A valid ISO 8601 dateTime value or a DateTimeObject instance.\r\n     * @param dateTime2 A valid ISO 8601 dateTime value or a DateTimeObject instance.\r\n     *\r\n     * @throws UnexpectedValueException\r\n     *\r\n     * @return 0 If the two dateTime values represent the exact same time, 1 if dateTime1 > dateTime2 or 2 if dateTime2 > dateTime1\r\n     */\r\n    DateTimeObject.compare = function (dateTime1, dateTime2) {\r\n        if (DateTimeObject.isValidDateTime(dateTime1) && DateTimeObject.isValidDateTime(dateTime2)) {\r\n            if (StringUtils_1.StringUtils.isString(dateTime1)) {\r\n                dateTime1 = new DateTimeObject(dateTime1);\r\n            }\r\n            if (StringUtils_1.StringUtils.isString(dateTime2)) {\r\n                dateTime2 = new DateTimeObject(dateTime2);\r\n            }\r\n            dateTime1.setUTC();\r\n            dateTime2.setUTC();\r\n            var date1 = dateTime1.toString();\r\n            var date2 = dateTime2.toString();\r\n            if (date1 === date2) {\r\n                return 0;\r\n            }\r\n            var sortedDates = [date1, date2];\r\n            sortedDates.sort();\r\n            return (sortedDates[0] === date1) ? 2 : 1;\r\n        }\r\n        throw new Error('Provided value is not a valid ISO 8601 date time format');\r\n    };\r\n    /**\r\n     * Get this instance's defined year as a numeric value\r\n     *\r\n     * @return A 4 digits numeric value\r\n     */\r\n    DateTimeObject.prototype.getYear = function () {\r\n        return Number(this._dateTimeStringExploded[0]);\r\n    };\r\n    /**\r\n     * Get this instance's defined month as a numeric value from 1 to 12\r\n     *\r\n     * @return A value between 1 and 12\r\n     */\r\n    DateTimeObject.prototype.getMonth = function () {\r\n        return Number(this._dateTimeStringExploded[1]);\r\n    };\r\n    /**\r\n     * Get this instance's defined day as a numeric value from 1 to 31\r\n     *\r\n     * @return A value between 1 and 31\r\n     */\r\n    DateTimeObject.prototype.getDay = function () {\r\n        return Number(this._dateTimeStringExploded[2]);\r\n    };\r\n    /**\r\n     * Get this instance's defined day of week as a numeric value from 1 to 7, where Sunday is considered\r\n     * to be the first one:<br>\r\n     * 1 = Sunday, 2 = Monday, 3 = Tuesday, etc ...\r\n     *\r\n     * @return A numeric value between 1 and 7\r\n     */\r\n    DateTimeObject.prototype.getDayOfWeek = function () {\r\n        // TODO\r\n        //        let v = this._dateTimeStringExploded;\r\n        //\r\n        //        let dateTimeInstance = new DateTime();\r\n        //\r\n        //        $dateTimeInstance->setDate($v[0], $v[1], $v[2]);\r\n        //\r\n        //        return $dateTimeInstance->format('w') + 1;\r\n    };\r\n    /**\r\n     * Get this instance's defined hour as a numeric value from 0 to 23\r\n     *\r\n     * @return A value between 0 and 23\r\n     */\r\n    DateTimeObject.prototype.getHour = function () {\r\n        return Number(this._dateTimeStringExploded[3]);\r\n    };\r\n    /**\r\n     * Get this instance's defined minute as a numeric value from 0 to 59\r\n     *\r\n     * @return A value between 0 and 59\r\n     */\r\n    DateTimeObject.prototype.getMinute = function () {\r\n        return Number(this._dateTimeStringExploded[4]);\r\n    };\r\n    /**\r\n     * Get this instance's defined second as a numeric value from 0 to 59\r\n     *\r\n     * @return A value between 0 and 59\r\n     */\r\n    DateTimeObject.prototype.getSecond = function () {\r\n        return Number(this._dateTimeStringExploded[5]);\r\n    };\r\n    /**\r\n     * Get this instance's defined miliseconds as a numeric value up to 3 digit\r\n     *\r\n     * @return A value up to 3 digit\r\n     */\r\n    DateTimeObject.prototype.getMiliSecond = function () {\r\n        return Math.round(this.getMicroSecond() / 1000);\r\n    };\r\n    /**\r\n     * Get this instance's defined microseconds as a numeric value up to 6 digit\r\n     *\r\n     * @return A value up to 6 digit\r\n     */\r\n    DateTimeObject.prototype.getMicroSecond = function () {\r\n        return Number(this._dateTimeStringExploded[6]);\r\n    };\r\n    /**\r\n     * Get this instance's defined timezone offset as a numeric value (in seconds)\r\n     *\r\n     * @return The UTC timezone offset in seconds\r\n     */\r\n    DateTimeObject.prototype.getTimeZoneOffset = function () {\r\n        return (new Date(this._dateTimeString)).getTimezoneOffset();\r\n    };\r\n    /**\r\n     * Get the first day of month for the current dateTime value.\r\n     *\r\n     * @return A dateTime object representing the first day of month based on the current instance\r\n     */\r\n    DateTimeObject.prototype.getFirstDayOfMonth = function () {\r\n        // TODO\r\n        //        $dateTime = (new DateTime(this._dateTimeString))->format('Y-m-01\\\\TH:i:s.uP');\r\n        //\r\n        //        return new DateTimeObject($dateTime);\r\n    };\r\n    /**\r\n     * Get the last day of month for the current dateTime value.\r\n     *\r\n     * @return A dateTime object representing the last day of month based on the current instance\r\n     */\r\n    DateTimeObject.prototype.getLastDayOfMonth = function () {\r\n        // TODO\r\n        //        $dateTime = (new DateTime(this._dateTimeString))->format('Y-m-t\\\\TH:i:s.uP');\r\n        //\r\n        //        return new DateTimeObject($dateTime);\r\n    };\r\n    /**\r\n     * Convert the current instance date and time values to the specified timezone offset.\r\n     *\r\n     * @param offset One of the supported timezone names or an offset value (+0200, +05:00, -0300, -03:00, etc...)\r\n     *\r\n     * @return This object instance\r\n     */\r\n    //    setTimeZoneOffset(offset:string){\r\n    // TODO\r\n    //        $dateTime = new DateTime(this._dateTimeString);\r\n    //\r\n    //        $dateTime->setTimezone(new DateTimeZone($offset));\r\n    //\r\n    //        this._dateTimeString = $dateTime->format(this._iso8601FormatString);\r\n    //\r\n    //        this._dateTimeStringExploded = this._explodeISO8601String(this._dateTimeString);\r\n    //\r\n    //        return $this;\r\n    //    }\r\n    /**\r\n     * Convert the current instance date and time values to the local timezone offset.\r\n     *\r\n     * @return This object instance\r\n     */\r\n    DateTimeObject.prototype.setLocalTimeZone = function () {\r\n        // TODO\r\n        //        return this.setTimeZoneOffset(date_default_timezone_get());\r\n    };\r\n    /**\r\n     * Check if the current instance timezone is the UTC +00:00 value\r\n     *\r\n     * @return True if the instance timezone is UTC, false if not\r\n     */\r\n    DateTimeObject.prototype.isUTC = function () {\r\n        return this.getTimeZoneOffset() === 0;\r\n    };\r\n    /**\r\n     * Convert the current instance date and time values to the UTC zero timezone offset.\r\n     *\r\n     * @example If this instance contains a +02:00 timezone offset, after calling this method the offset will be +00:00 (date and time will be updated accordingly)\r\n     *\r\n     * @return This object instance\r\n     */\r\n    DateTimeObject.prototype.setUTC = function () {\r\n        // TODO\r\n        //        let dateTimeInstance = new Date(this._dateTimeString);\r\n        //        dateTimeInstance->setTimezone(new DateTimeZone('UTC'));\r\n        //\r\n        //        this._dateTimeString = $dateTimeInstance->format(this._iso8601FormatString);\r\n        this._dateTimeStringExploded = this._explodeISO8601String(this._dateTimeString);\r\n        return this;\r\n    };\r\n    /**\r\n     * Output the current dateTime instance data as a custom formatted string (by default a full ISO 8601 string).\r\n     *\r\n     * @param formatString A string containing the output format like 'd/m/Y' or 'm-d-y'\r\n     * where the following characters will be automatically replaced:<br><br>\r\n     * - Y with a four digit year value<br>\r\n     * - y with a one or two digit year value<br>\r\n     * - M with a two digit month value<br>\r\n     * - m with a one or two digit month value<br>\r\n     * - D with a two digit day value<br>\r\n     * - d with a one or two digit day value<br>\r\n     * - H with a two digit hour value<br>\r\n     * - h with a one or two digit hour value<br>\r\n     * - N with a two digit minutes value<br>\r\n     * - n with a one or two digit minutes value<br>\r\n     * - S with a two digit seconds value<br>\r\n     * - s with a one or two digit seconds value<br>\r\n     * - U with a 6 digit microseconds value<br>\r\n     * - u with a 3 digit miliseconds value<br>\r\n     * - Offset with the timezone offset value (including the + or - symbol)\r\n     *\r\n     * @return The dateTime with the specified format.\r\n     */\r\n    DateTimeObject.prototype.toString = function (formatString) {\r\n        if (formatString === void 0) { formatString = 'Y-M-DTH:N:S.UOffset'; }\r\n        var exploded = this._dateTimeStringExploded;\r\n        // Get the time zone offset\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'Offset', exploded[7].substr(0));\r\n        // Get the year\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'Y', exploded[0]);\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'y', exploded[0].substr(2));\r\n        // Get the month\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'M', exploded[1]);\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'm', String(Number(exploded[1])));\r\n        // Get the day\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'D', exploded[2]);\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'd', String(Number(exploded[2])));\r\n        // Get the hour\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'H', exploded[3]);\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'h', String(Number(exploded[3])));\r\n        // Get the minute\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'N', exploded[4]);\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'n', String(Number(exploded[4])));\r\n        // Get the second\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'S', exploded[5]);\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 's', String(Number(exploded[5])));\r\n        // Get the milisecond\r\n        formatString = StringUtils_1.StringUtils.replace(formatString, 'u', StringUtils_1.StringUtils.pad(String(Math.min(999, Math.round(Number(exploded[6]) / 1000))), 3, '0'));\r\n        // Get the microsecond\r\n        return StringUtils_1.StringUtils.replace(formatString, 'U', StringUtils_1.StringUtils.pad(exploded[6], 6, '0', 'RIGHT'));\r\n    };\r\n    /**\r\n     * Compares the current datetime instance value to the given one and tells if they\r\n     * are exactly the same or which one represents a later time value than the other.\r\n     * Timezones from the both dateTime values are taken into consideration for the comparison.\r\n     *\r\n     * @param dateTime A valid ISO 8601 dateTime value or a DateTimeObject instance.\r\n     *\r\n     * @throws Error\r\n     *\r\n     * @see DateTimeObject.compare\r\n     *\r\n     * @return 0 If the two dateTime values represent the exact same time, 1 if this instance > dateTime or 2 if dateTime > this instance\r\n     */\r\n    DateTimeObject.prototype.compareTo = function (dateTime) {\r\n        return DateTimeObject.compare(this, dateTime);\r\n    };\r\n    /**\r\n     * Check if the provided ISO 8601 dateTime value is identical to the date and time from this instance\r\n     *\r\n     * @param dateTime A valid ISO 8601 dateTime string or a DateTimeObject instance.\r\n     *\r\n     * @return True if both dateTime values are equivalent to the exact same date and time\r\n     */\r\n    DateTimeObject.prototype.isEqualTo = function (dateTime) {\r\n        return DateTimeObject.compare(this, dateTime) === 0;\r\n    };\r\n    /**\r\n     * Adds the specified amount of time to the given dateTime value\r\n     * TODO - This method currently only works with years, and PHPDoc is incomplete!\r\n     *\r\n     * @param value The numeric amount that will be added to this DateTimeObject instance\r\n     * @param type TODO - this paramenter description\r\n     *\r\n     * @return void\r\n     */\r\n    //    add(value: Number, type = 'minutes'){\r\n    // TODO - copy from php when finished there\r\n    //    }\r\n    /**\r\n     * TODO - this method depends on this.add for being finished\r\n     */\r\n    //    substract(value: Number, type = 'minutes'){\r\n    //        return this.add(-value, type);\r\n    //    }\r\n    /**\r\n     * Auxiliary method that is used to generate an array with all the values that are defined on an ISO 8601 string\r\n     *\r\n     * @param string A valid ISO 8601 string\r\n     *\r\n     * @return An array with all the date time values extracted\r\n     */\r\n    DateTimeObject.prototype._explodeISO8601String = function (string) {\r\n        var result = ['', '01', '01', '00', '00', '00', '000000', ''];\r\n        if (string.substr(string.length - 1, 1).toLowerCase() === 'z') {\r\n            string = string.substr(0, string.length - 1) + '+00:00';\r\n        }\r\n        var splitted = string.split(/[+-.: TZ]/);\r\n        var i = 0;\r\n        while (splitted.length > 0 && i < 6) {\r\n            result[i] = splitted.shift();\r\n            i++;\r\n        }\r\n        var splittedCount = splitted.length;\r\n        if (splittedCount === 1 || splittedCount === 3) {\r\n            // NOTE: Javascript cannot provide microseconds, so we add three zeros here to correctly format it\r\n            result[6] = splitted.shift() + '000';\r\n        }\r\n        if (splittedCount === 2 || splittedCount === 3) {\r\n            result[7] = string.substr(string.length - 6, 1) + splitted[0] + ':' + splitted[1];\r\n        }\r\n        return result;\r\n    };\r\n    return DateTimeObject;\r\n}());\r\nexports.DateTimeObject = DateTimeObject;\r\n//# sourceMappingURL=DateTimeObject.js.map","\"use strict\";\r\n/**\r\n * TurboCommons is a general purpose and cross-language library that implements frequently used and generic software development tasks.\r\n *\r\n * Website : -> http://www.turbocommons.org\r\n * License : -> Licensed under the Apache License, Version 2.0. You may not use this file except in compliance with the License.\r\n * License Url : -> http://www.apache.org/licenses/LICENSE-2.0\r\n * CopyRight : -> Copyright 2015 Edertone Advanded Solutions (08211 Castellar del Vallès, Barcelona). http://www.edertone.com\r\n */\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar StringUtils_1 = require(\"./StringUtils\");\r\n/**\r\n * The most common conversion utilities to convert the data from a simple type to another one.<br>\r\n * To convert complex classes or structures, use SerializationUtils class.\r\n *\r\n * <pre><code>\r\n * This is a static class, so no instance needs to be created.\r\n * Usage example:\r\n *\r\n * var ns = org_turbocommons_utils;\r\n *\r\n * var result1 = ns.ConversionUtils.stringToBase64('hello');\r\n * var result2 = ns.ConversionUtils.base64ToString('somebase64text');\r\n * ...\r\n * </code></pre>\r\n */\r\nvar ConversionUtils = /** @class */ (function () {\r\n    function ConversionUtils() {\r\n    }\r\n    /**\r\n     * Encode a string to base64 (Which contains only numbers, uppercase, lowercase, forward slash, plus and equal signs)\r\n     * Found at: http://www.webtoolkit.info/\r\n     *           http://www.webtoolkit.info/javascript-base64.html#.VO3gzjSG9AY\r\n     *\r\n     * @param {string} string The input string to be converted\r\n     * @returns {string} The input string as base 64\r\n     */\r\n    ConversionUtils.stringToBase64 = function (string) {\r\n        if (string === null || string === undefined) {\r\n            return '';\r\n        }\r\n        if (!StringUtils_1.StringUtils.isString(string)) {\r\n            throw new Error(\"ConversionUtils.stringToBase64: value is not a string\");\r\n        }\r\n        var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n        var chr1;\r\n        var chr2;\r\n        var chr3;\r\n        var enc1;\r\n        var enc2;\r\n        var enc3;\r\n        var enc4;\r\n        var output = '';\r\n        // Auxiliary method to encode a string as utf 8\r\n        function utf8Encode(string) {\r\n            var utftext = '';\r\n            string = string.replace(/\\r\\n/g, \"\\n\");\r\n            for (var n = 0; n < string.length; n++) {\r\n                var c = string.charCodeAt(n);\r\n                if (c < 128) {\r\n                    utftext += String.fromCharCode(c);\r\n                }\r\n                else if ((c > 127) && (c < 2048)) {\r\n                    utftext += String.fromCharCode((c >> 6) | 192);\r\n                    utftext += String.fromCharCode((c & 63) | 128);\r\n                }\r\n                else {\r\n                    utftext += String.fromCharCode((c >> 12) | 224);\r\n                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);\r\n                    utftext += String.fromCharCode((c & 63) | 128);\r\n                }\r\n            }\r\n            return utftext;\r\n        }\r\n        string = utf8Encode(string);\r\n        var i = 0;\r\n        while (i < string.length) {\r\n            chr1 = string.charCodeAt(i++);\r\n            chr2 = string.charCodeAt(i++);\r\n            chr3 = string.charCodeAt(i++);\r\n            enc1 = chr1 >> 2;\r\n            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\r\n            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\r\n            enc4 = chr3 & 63;\r\n            if (isNaN(chr2)) {\r\n                enc3 = enc4 = 64;\r\n            }\r\n            else if (isNaN(chr3)) {\r\n                enc4 = 64;\r\n            }\r\n            output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);\r\n        }\r\n        return output;\r\n    };\r\n    /**\r\n     * Decode a string from base64 (Which contains only numbers, uppercase, lowercase, forward slash, plus and equal signs)\r\n     * Found at: http://www.webtoolkit.info/\r\n     *           http://www.webtoolkit.info/javascript-base64.html#.VO3gzjSG9AY\r\n     *\r\n     * @param {string} string a base64 string\r\n     *\r\n     * @returns {string} The base64 decoded as its original string\r\n     */\r\n    ConversionUtils.base64ToString = function (string) {\r\n        if (string === null || string === undefined) {\r\n            return '';\r\n        }\r\n        if (!StringUtils_1.StringUtils.isString(string)) {\r\n            throw new Error('ConversionUtils.stringToBase64: value is not a string');\r\n        }\r\n        var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\r\n        var chr1;\r\n        var chr2;\r\n        var chr3;\r\n        var enc1;\r\n        var enc2;\r\n        var enc3;\r\n        var enc4;\r\n        var output = '';\r\n        var i = 0;\r\n        string = string.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\r\n        while (i < string.length) {\r\n            enc1 = keyStr.indexOf(string.charAt(i++));\r\n            enc2 = keyStr.indexOf(string.charAt(i++));\r\n            enc3 = keyStr.indexOf(string.charAt(i++));\r\n            enc4 = keyStr.indexOf(string.charAt(i++));\r\n            chr1 = (enc1 << 2) | (enc2 >> 4);\r\n            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\r\n            chr3 = ((enc3 & 3) << 6) | enc4;\r\n            output = output + String.fromCharCode(chr1);\r\n            if (enc3 != 64) {\r\n                output = output + String.fromCharCode(chr2);\r\n            }\r\n            if (enc4 != 64) {\r\n                output = output + String.fromCharCode(chr3);\r\n            }\r\n        }\r\n        // Auxiliary method for utf8 decoding\r\n        function utf8Decode(utftext) {\r\n            var string = '';\r\n            var i = 0;\r\n            var c = 0;\r\n            var c2 = 0;\r\n            while (i < utftext.length) {\r\n                c = utftext.charCodeAt(i);\r\n                if (c < 128) {\r\n                    string += String.fromCharCode(c);\r\n                    i++;\r\n                }\r\n                else if ((c > 191) && (c < 224)) {\r\n                    c2 = utftext.charCodeAt(i + 1);\r\n                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));\r\n                    i += 2;\r\n                }\r\n                else {\r\n                    c2 = utftext.charCodeAt(i + 1);\r\n                    var c3 = utftext.charCodeAt(i + 2);\r\n                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n                    i += 3;\r\n                }\r\n            }\r\n            return string;\r\n        }\r\n        return utf8Decode(output);\r\n    };\r\n    return ConversionUtils;\r\n}());\r\nexports.ConversionUtils = ConversionUtils;\r\n//# sourceMappingURL=ConversionUtils.js.map"],"sourceRoot":""}